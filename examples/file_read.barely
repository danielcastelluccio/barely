function main() {
    variable descriptor: integer = open("examples/file_read.barely", O_RDONLY, 0);

    variable file_contents: any_2048;
    read(descriptor, &(file_contents), 2047);

    print(&(file_contents));

    variable stat: Stat;
    fstat(descriptor, &(stat));

    @print_integer(Stat->size(&(stat)));
};

function print(string: *) {
    write(STDOUT, string, length(string));
};

function println(string: *) {
    print(string);

    variable new_line: integer = 10;
    write(STDOUT, &(new_line), 1);
};

function length(string: *): integer {
    variable length: integer = 0;

    while !(=1(byte(0), *1(+(string, length)))) {
        length = @cast_integer(+(length, 1));
    };

    return length;
};

constant SYS_READ: integer = 0;

constant SYS_WRITE: integer = 1;
constant STDOUT: integer = 1;

constant SYS_OPEN: integer = 2;
constant O_RDONLY: integer = 0;

constant SYS_STAT: integer = 4;

constant SYS_FSTAT: integer = 5;

function read(fd: integer, buffer: *, length: integer) {
    variable _: any_8 = @syscall3(SYS_READ, fd, buffer, length);
};

function write(fd: integer, buffer: *, length: integer) {
    variable _: any_8 = @syscall3(SYS_WRITE, fd, buffer, length);
};

function open(name: *, flags: integer, mode: integer): integer {
    return @cast_integer(@syscall3(SYS_OPEN, name, flags, mode));
};

structure Stat {
    nonsense_0: any_48;
    size: integer;
    nonsense_1: any_88;
};

function stat(name: *, buffer: *Stat) {
    variable _: any_8 = @syscall2(SYS_STAT, name, buffer);
};

function fstat(fd: integer, buffer: *Stat) {
    variable _: any_8 = @syscall2(SYS_FSTAT, fd, buffer);
};
