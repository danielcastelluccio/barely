// probably should be able to just declare the number as whole_1
define ASCII = module {
    define TAB: whole_1 = 9;
    define LINE_FEED: whole_1 = 10;
    define SPACE: whole_1 = 32;
    define EXCLAMATION_POINT: whole_1 = 33;
    define QUOTATION: whole_1 = 34;
    define PERCENT: whole_1 = 37;
    define AMPERSAND: whole_1 = 38;
    define APOSTROPHE: whole_1 = 39;
    define OPEN_PARENTHESIS: whole_1 = 40;
    define CLOSED_PARENTHESIS: whole_1 = 41;
    define ASTERISK: whole_1 = 42;
    define PLUS: whole_1 = 43;
    define COMMA: whole_1 = 44;
    define MINUS: whole_1 = 45;
    define PERIOD: whole_1 = 46;
    define SLASH: whole_1 = 47;
    define ZERO: whole_1 = 48;
    define NINE: whole_1 = 57;
    define COLON: whole_1 = 58;
    define SEMICOLON: whole_1 = 59;
    define LESS_THAN: whole_1 = 60;
    define EQUAL: whole_1 = 61;
    define GREATER_THAN: whole_1 = 62;
    define OPEN_BRACKET: whole_1 = 91;
    define CLOSED_BRACKET: whole_1 = 93;
    define UNDERSCORE: whole_1 = 95;
    define OPEN_CURLY_BRACKETS: whole_1 = 123;
    define VERTICAL_BAR: whole_1 = 124;
    define CLOSED_CURLY_BRACKETS: whole_1 = 125;
};

define NULL: * = 0;

define string_to_whole_8 = function(string: *): whole_8 {
    return string_to_number(string, 8, false);
};

define string_to_number = function(string: *, size: whole_8, signed: boolean): whole_8 {
    declare length = string_length(string);

    declare whole_8 = 0;

    declare has_negative = false;

    declare i = 0;
    while i < length {
        declare character = (cast(*whole_1) (string + i)).*;

        if character == ASCII'UNDERSCORE {
            break;
        } else {
            if character == ASCII'MINUS {
                has_negative = true;
            } else {
                whole_8 = whole_8 * 10;
                whole_8 = whole_8 + whole_1_to_whole_8(character - ASCII'ZERO);
            };
            i = i + 1;
        };
    };

    if has_negative {
        if size == 8 {
            return 0 - whole_8;
        } else if size == 4 {
            return whole_4_to_whole_8(0:whole_4 - whole_8_to_whole_4(whole_8));
        } else if size == 2 {
            return whole_2_to_whole_8(0:whole_2 - whole_8_to_whole_2(whole_8));
        } else if size == 1 {
            return whole_1_to_whole_8(0:whole_1 - whole_8_to_whole_1(whole_8));
        };
    };
    return whole_8;
};

define whole_8_to_string = function(whole_8_in: whole_8, buffer: *) {
    declare whole_8_ = whole_8_in;

    if whole_8_ == 0 {
        (cast(*any_1) buffer).* = ASCII'ZERO;
    };

    declare length = 0;
    while !(whole_8_ == 0) {
        whole_8_ = whole_8_ / 10;
        length = length + 1;
    };

    whole_8_ = whole_8_in;

    declare i = 0;
    while !(whole_8_ == 0) {
        declare number = whole_8_to_whole_1(whole_8_ % 10);
        (cast(*any_1) (buffer + ((length - 1) - i))).* = number + ASCII'ZERO;
        whole_8_ = whole_8_ / 10;
        i = i + 1;
    };
};

define decrement_whole_8_pointer = function(pointer: *whole_8, amount: whole_8) {
    pointer.* = pointer.* - amount;
};

define stringarray_get = function(keys: *, values: *, wanted: *, size: whole_8): * {
    declare j = 0;
    while j < size {
        if string=(cast(*) array8_get(keys, j), wanted) {
            return cast(*) array8_get(values, j);
        };
        j = j + 1;
    };

    return cast(*) 0;
};

define stringarray_get_index = function(keys: *, wanted: *, size: whole_8): whole_8 {
    declare j = 0;
    while j < size {
        if string=(cast(*) array8_get(keys, j), wanted) {
            return j;
        };
        j = j + 1;
    };

    return 999;
};

define print = function(string: *) {
    print_stdout(string, string_length(string));
};

define println = function(string: *) {
    print(string);

    declare new_line = 10;
    print_stdout(&new_line, 1);
};

define array8_set = function(array: *, index: whole_8, value: any_8) {
    declare index_pointer = cast(*any_8) (array + (index * 8));
    index_pointer.* = value;
};

define array8_get = function(array: *, index: whole_8): any_8 {
    declare index_pointer = cast(*any_8) (array + (index * 8));
    return index_pointer.*;
};

define array8_length = function(array: *): whole_8 {
    declare k = 0;
    while !(array8_get(array, k) == 0) {
        k = k + 1;
    };
    return k;
};

define autobuffer_stringarray_get_index = function(keys: *AutoBuffer, wanted: *, size: whole_8): whole_8 {
    declare j = 0;
    while j < size {
        if string=(cast(*) autobuffer_array8_get(keys, j), wanted) {
            return j;
        };
        j = j + 1;
    };

    return 999;
};

define print_whole_8 = function(whole_8: whole_8) {
    declare buffer = any_24'>0();
    whole_8_to_string(whole_8, &buffer);
    print(&buffer);
};

define HashMap = structure {
    buffer: AutoBuffer;
};

define BucketData = structure {
    data: whole_8;
    hash: whole_8;
    value: any_8;
};

define hashmap_new = function(size: whole_8): HashMap {
    declare hashmap: HashMap;
    hashmap.buffer = autobuffer_new(size);
    return hashmap;
};

define hashmap_put = function(hashmap: *HashMap, hash: whole_8, value: any_8) {
    declare buffer = &hashmap.buffer;

    declare bucket_pointer = cast(*AutoBuffer) autobuffer_get_any_8(buffer, (hash % (buffer.size / 8)) * 8);
    if bucket_pointer == 0 {
        declare allocated_autobuffer = cast(*AutoBuffer) brk_allocate(size_of(BucketData));
        declare autobuffer = autobuffer_new(48);
        allocated_autobuffer.* = autobuffer;

        bucket_pointer = allocated_autobuffer;
        autobuffer_set_any_8(buffer, bucket_pointer, (hash % (buffer.size / 8)) * 8);
    };

    declare searching = true;
    declare i = 0;
    while searching {
        if autobuffer_get_any_8(bucket_pointer, i * size_of(BucketData)) == 0 {
            searching = false;
        } else if autobuffer_get_any_8(bucket_pointer, (i * size_of(BucketData)) + 8) == hash {
            searching = false;
        } else {
            i = i + 1;
        };
    };

    declare bucket_data = cast(*BucketData) autobuffer_get_size(bucket_pointer, i * size_of(BucketData), size_of(BucketData));
    bucket_data.data = 1;
    bucket_data.hash = hash;
    bucket_data.value = value;
};

define hashmap_get_general = function(hashmap: *HashMap, hash: whole_8): any_8, boolean {
    declare buffer = &hashmap.buffer;

    declare bucket_pointer = cast(*AutoBuffer) autobuffer_get_any_8(buffer, (hash % (buffer.size / 8)) * 8);
    if !(bucket_pointer == 0) {
        declare i = 0;
        while !(autobuffer_get_any_8(bucket_pointer, i * size_of(BucketData)) == 0) {
            declare bucket_data = cast(*BucketData) autobuffer_get_size(bucket_pointer, i * size_of(BucketData), size_of(BucketData));

            if bucket_data.hash == hash {
                return bucket_data.value, true;
            };

            i = i + 1;
        };
    };

    return 0, false;
};

define hashmap_get = function(hashmap: *HashMap, hash: whole_8): any_8 {
    declare value, found = hashmap_get_general(hashmap, hash);
    return if found {
        value
    } else {
        cast(any_8) 0
    };
};

define hashmap_get2 = function(hashmap: *HashMap, hash: whole_8): any_8 {
    declare value, found = hashmap_get_general(hashmap, hash);
    return if found {
        value
    } else {
        cast(any_8) 999
    };
};

define hashmap_string_put = function(hashmap: *HashMap, string: *, value: any_8) {
    hashmap_put(hashmap, string_hash(string), value);
};

define hashmap_string_get = function(hashmap: *HashMap, string: *): any_8 {
    return hashmap_get(hashmap, string_hash(string));
};

define hashmap_string_get2 = function(hashmap: *HashMap, string: *): any_8 {
    return hashmap_get2(hashmap, string_hash(string));
};

define string_hash = function(string: *): whole_8 {
    declare hash = 5381;
    declare i = 0;
    declare length = string_length(string);
    while i < length {
        declare character = whole_1_to_whole_8(cast(whole_1) ((cast(*any_1) string) + i).*);
        hash = (hash * 33) + character;
        i = i + 1;
    };

    return hash;
};

define concatenate2_brk_allocate = function(string1: *, string2: *): * {
    declare string1_length = string_length(string1);
    declare string2_length = string_length(string2);
    declare new_string = brk_allocate(string1_length + string2_length + 1);

    copy(string1, new_string, string1_length);
    copy(string2, new_string + string1_length, string2_length);

    return new_string;
};

define concatenate3_brk_allocate = function(string1: *, string2: *, string3: *): * {
    declare string1_length = string_length(string1);
    declare string2_length = string_length(string2);
    declare string3_length = string_length(string3);
    declare new_string = brk_allocate(string1_length + string2_length + string3_length + 1);

    copy(string1, new_string, string1_length);
    copy(string2, new_string + string1_length, string2_length);
    copy(string3, new_string + string1_length + string2_length, string3_length);

    return new_string;
};

define concatenate4_brk_allocate = function(string1: *, string2: *, string3: *, string4: *): * {
    declare string1_length = string_length(string1);
    declare string2_length = string_length(string2);
    declare string3_length = string_length(string3);
    declare string4_length = string_length(string4);
    declare new_string = brk_allocate(string1_length + string2_length + string3_length + string4_length + 1);

    copy(string1, new_string, string1_length);
    copy(string2, new_string + string1_length, string2_length);
    copy(string3, new_string + string1_length + string2_length, string3_length);
    copy(string4, new_string + string1_length + string2_length + string3_length, string4_length);

    return new_string;
};

define substring_brk_allocate = function(string: *, start: whole_8, end: whole_8): * {
    declare substring = brk_allocate((end - start) + 1);
    copy(string + start, substring, end - start);

    return substring;
};

define nth_index = function(string: *, character: any_1, n: whole_8): whole_8 {
    declare i = 0;
    declare count = 0;
    while i < string_length(string) {
        if (cast(*any_1) (string + i)).* == character {
            if count == n {
                return i;
            };
            count = count + 1;
        };
        i = i + 1;
    };

    return 999;
};

define first_index = function(string: *, character: any_1): whole_8 {
    return nth_index(string, character, 0);
};

define create_size_zero_array8_brk_allocate = function(): * {
    return brk_allocate(8);
};

define create_size_one_array8_brk_allocate = function(item: any_8): * {
    declare array = brk_allocate(16);
    array8_set(array, 0, item);
    return array;
};

define create_size_two_array8_brk_allocate = function(item1: any_8, item2: any_8): * {
    declare array = brk_allocate(24);
    array8_set(array, 0, item1);
    array8_set(array, 1, item2);
    return array;
};

define create_size_three_array8_brk_allocate = function(item1: any_8, item2: any_8, item3: any_8): * {
    declare array = brk_allocate(32);
    array8_set(array, 0, item1);
    array8_set(array, 1, item2);
    array8_set(array, 2, item3);
    return array;
};

define create_size_four_array8_brk_allocate = function(item1: any_8, item2: any_8, item3: any_8, item4: any_8): * {
    declare array = brk_allocate(40);
    array8_set(array, 0, item1);
    array8_set(array, 1, item2);
    array8_set(array, 2, item3);
    array8_set(array, 3, item4);
    return array;
};

define create_size_five_array8_brk_allocate = function(item1: any_8, item2: any_8, item3: any_8, item4: any_8, item5: any_8): * {
    declare array = brk_allocate(48);
    array8_set(array, 0, item1);
    array8_set(array, 1, item2);
    array8_set(array, 2, item3);
    array8_set(array, 3, item4);
    array8_set(array, 4, item5);
    return array;
};

define create_size_six_array8_brk_allocate = function(item1: any_8, item2: any_8, item3: any_8, item4: any_8, item5: any_8, item6: any_8): * {
    declare array = brk_allocate(56);
    array8_set(array, 0, item1);
    array8_set(array, 1, item2);
    array8_set(array, 2, item3);
    array8_set(array, 3, item4);
    array8_set(array, 4, item5);
    array8_set(array, 5, item6);
    return array;
};

define create_size_seven_array8_brk_allocate = function(item1: any_8, item2: any_8, item3: any_8, item4: any_8, item5: any_8, item6: any_8, item7: any_8): * {
    declare array = brk_allocate(64);
    array8_set(array, 0, item1);
    array8_set(array, 1, item2);
    array8_set(array, 2, item3);
    array8_set(array, 3, item4);
    array8_set(array, 4, item5);
    array8_set(array, 5, item6);
    array8_set(array, 6, item7);
    return array;
};

define copy_string_brk_allocate = function(string: *): * {
    return copy_string_length_brk_allocate(string, string_length(string));
};

define copy_string_length_brk_allocate = function(string: *, string_length: whole_8): * {
    declare new_string = brk_allocate(string_length + 1);
    copy(string, new_string, string_length);
    return new_string;
};

define copy_array8_brk_allocate = function(array: *): * {
    return copy_array8_length_brk_allocate(array, array8_length(array));
};

define copy_array8_length_brk_allocate = function(array: *, length: whole_8): * {
    declare new_array = brk_allocate((length * 8) + 8);
    copy(array, new_array, length * 8);
    return new_array;
};

define AutoBufferBuffer = structure {
    autobuffer: AutoBuffer;
    index: whole_8;
};

define autobuffer_buffer_new = function(size: whole_8): AutoBufferBuffer {
    declare autobuffer_buffer = AutoBufferBuffer'>0();
    autobuffer_buffer.autobuffer = autobuffer_new(size);
    return autobuffer_buffer;
};

define autobuffer_buffer_push_string = function(buffer: *AutoBufferBuffer, string: *) {
    autobuffer_buffer_push_string_length(buffer, string, string_length(string));
};

define autobuffer_buffer_push_string_length = function(buffer: *AutoBufferBuffer, string: *, length: whole_8) {
    declare autobuffer = &buffer.autobuffer;
    declare buffer_index = buffer.index;

    autobuffer_register(autobuffer, buffer_index, length + 1);
    autobuffer_set(autobuffer, string, buffer_index, length);

    buffer.index = buffer_index + length;
};

define autobuffer_buffer_string_push_whole_8 = function(buffer: *AutoBufferBuffer, whole_8: whole_8) {
    declare whole_8_buffer = any_24'>0();
    whole_8_to_string(whole_8, &whole_8_buffer);
    autobuffer_buffer_push_string(buffer, &whole_8_buffer);
};

define autobuffer_buffer_get_buffer_pointer = function(buffer: *AutoBufferBuffer): * {
    return buffer.autobuffer.buffer;
};

define autobuffer_buffer_reset = function(buffer: *AutoBufferBuffer) {
    declare actual_buffer = autobuffer_buffer_get_buffer_pointer(buffer);
    declare size = buffer.autobuffer.size;
    declare i = 0;
    while i < size {
        if (i + 8) < size {
            (cast(*any_8) (actual_buffer + i)).* = 0;
            i = i + 8;
        } else {
            (cast(*any_1) (actual_buffer + i)).* = 0:whole_1;
            i = i + 1;
        };
    };

    buffer.index = 0;
};

define autobuffer_buffer_push_whole_1 = function(buffer: *AutoBufferBuffer, whole_1: whole_1) {
    declare buffer_index = buffer.index;
    autobuffer_set(&buffer.autobuffer, &whole_1, buffer_index, 1);
    buffer.index = buffer_index + 1;
};

define autobuffer_buffer_push_whole_2 = function(buffer: *AutoBufferBuffer, whole_2: whole_2) {
    declare buffer_index = buffer.index;
    autobuffer_set(&buffer.autobuffer, &whole_2, buffer_index, 2);
    buffer.index = buffer_index + 2;
};

define autobuffer_buffer_push_whole_4 = function(buffer: *AutoBufferBuffer, whole_4: whole_4) {
    declare buffer_index = buffer.index;
    autobuffer_set(&buffer.autobuffer, &whole_4, buffer_index, 4);
    buffer.index = buffer_index + 4;
};

define autobuffer_buffer_push_whole_8 = function(buffer: *AutoBufferBuffer, whole_8: whole_8) {
    declare buffer_index = buffer.index;
    autobuffer_set(&buffer.autobuffer, &whole_8, buffer_index, 8);
    buffer.index = buffer_index + 8;
};

define autobuffer_buffer_push_any_1 = function(buffer: *AutoBufferBuffer, value: any_1) {
    declare buffer_index = buffer.index;
    autobuffer_set(&buffer.autobuffer, &value, buffer_index, 1);
    buffer.index = buffer_index + 1;
};

define AutoBufferStack8 = structure {
    autobuffer: AutoBuffer;
    index: whole_8;
};

define autobuffer_stack8_new = function(size: whole_8): AutoBufferStack8 {
    declare autobuffer_buffer = AutoBufferStack8'>0();
    autobuffer_buffer.autobuffer = autobuffer_new(size);
    return autobuffer_buffer;
};

define autobuffer_stack8_push = function(buffer: *AutoBufferStack8, value: any_8) {
    declare index = buffer.index;
    autobuffer_register(&buffer.autobuffer, (index * 8) + 8, 8);
    autobuffer_set_whole_8(&buffer.autobuffer, cast(whole_8) value, index * 8, false);
    buffer.index = index + 1;
};

define autobuffer_stack8_pop = function(buffer: *AutoBufferStack8): any_8 {
    declare index = buffer.index;
    index = index - 1;
    declare index_pointer = cast(*any_8) autobuffer_get(&buffer.autobuffer, index * 8);
    buffer.index = index;
    return index_pointer.*;
};

define autobuffer_stack8_peek = function(buffer: *AutoBufferStack8): any_8 {
    declare index = buffer.index;
    index = index - 1;

    declare index_pointer = cast(*any_8) autobuffer_get(&buffer.autobuffer, index * 8);
    return index_pointer.*;
};

define autobuffer_stack8_get = function(buffer: *AutoBufferStack8, index: whole_8): any_8 {
    declare index_pointer = cast(*any_8) autobuffer_get(&buffer.autobuffer, index * 8);
    return index_pointer.*;
};

define autobuffer_stack8_reset = function(buffer: *AutoBufferStack8) {
    declare actual_buffer = buffer.autobuffer.buffer;
    declare size = buffer.autobuffer.size;
    declare i = 0;
    while i < size {
        if (i + 8) < size {
            (cast(*any_8) (actual_buffer + i)).* = 0:whole_8;
            i = i + 1;
        } else {
            (cast(*any_1) (actual_buffer + i)).* = 0:whole_1;
            i = i + 1;
        };
    };

    buffer.index = 0;
};

define autobuffer_stack8_get_buffer_pointer = function(buffer: *AutoBufferStack8): * {
    return buffer.autobuffer.buffer;
};

define to_type_array = function(type: *): * {
    declare new_array = autobuffer_new(24);
    declare new_array_index = 0;

    declare buffer = autobuffer_buffer_new(24);

    declare i = 0;
    while i < string_length(type) {
        declare character_pointer = type + i;
        
        if string_length=(character_pointer, ".", 1) {
            if buffer.index > 0 {
                autobuffer_array8_set(&new_array, new_array_index, copy_string_brk_allocate(buffer.autobuffer.buffer));
                new_array_index = new_array_index + 1;
                autobuffer_buffer_reset(&buffer);
            };
        } else {
            autobuffer_buffer_push_string_length(&buffer, character_pointer, 1);
        };

        i = i + 1;
    };

    if buffer.index > 0 {
        autobuffer_array8_set(&new_array, new_array_index, copy_string_brk_allocate(buffer.autobuffer.buffer));
        new_array_index = new_array_index + 1;
    };

    return new_array.buffer;
};

define string_to_function_data = function(type: *): Node'FunctionData {
    declare argument_types = autobuffer_stack8_new(24);
    declare return_types = autobuffer_stack8_new(24);

    declare argument_index = 0;
    declare return_index = 0;

    declare inside = 0;
    declare is_return = false;
    declare stack_buffer = autobuffer_stack8_new(24);
    declare buffer = autobuffer_buffer_new(24);
    declare i = 10;
    declare length = string_length(type);
    while i < length {
        declare character_pointer = type + i;
        
        if (inside == 0) && (string_length=(character_pointer, ":", 1) || (string_length=(character_pointer, ",", 1) && !is_return)) {
            if buffer.index > 0 {
                autobuffer_stack8_push(&stack_buffer, copy_string_brk_allocate(autobuffer_buffer_get_buffer_pointer(&buffer)));
                autobuffer_buffer_reset(&buffer);
            };

            if stack_buffer.index > 0 {
                autobuffer_stack8_push(&argument_types, copy_array8_brk_allocate(stack_buffer.autobuffer.buffer));
                autobuffer_stack8_reset(&stack_buffer);
            };

            if string_length=(character_pointer, ":", 1) {
                is_return = true;
            };
        } else if (inside == 0) && (string_length=(character_pointer, "]", 1) || string_length=(character_pointer, ",", 1)) {
            if buffer.index > 0 {
                autobuffer_stack8_push(&stack_buffer, copy_string_brk_allocate(autobuffer_buffer_get_buffer_pointer(&buffer)));
                autobuffer_buffer_reset(&buffer);
            };

            if stack_buffer.index > 0 {
                autobuffer_stack8_push(&return_types, copy_array8_brk_allocate(stack_buffer.autobuffer.buffer));
                autobuffer_stack8_reset(&stack_buffer);
            };
            if string_length=(character_pointer, "]", 1) {
                break;
            };
        } else if (inside == 0) && string_length=(character_pointer, ".", 1) {
            autobuffer_stack8_push(&stack_buffer, copy_string_brk_allocate(buffer.autobuffer.buffer));
            autobuffer_buffer_reset(&buffer);
        } else if string_length=(character_pointer, "[", 1) {
            inside = inside + 1;
            autobuffer_buffer_push_string_length(&buffer, character_pointer, 1);
        } else if string_length=(character_pointer, "]", 1) {
            inside = inside - 1;
            autobuffer_buffer_push_string_length(&buffer, character_pointer, 1);
        } else {
            autobuffer_buffer_push_string_length(&buffer, character_pointer, 1);
        };

        i = i + 1;
    };

    declare data = Node'FunctionData'>0();
    data.argument_types = argument_types.autobuffer.buffer;
    data.return_types = return_types.autobuffer.buffer;

    return data;
};

define function_data_to_string = function(module_stack: *AutoBufferStack8, pointer: *Node'FunctionData): * {
    declare main_name_buffer = autobuffer_buffer_new(32);

    autobuffer_buffer_push_string(&main_name_buffer, "*function[");

    declare arguments = pointer.argument_types;

    declare j = 0;
    while !(array8_get(arguments, j) == 0) {
        declare argument_type_array = cast(*) array8_get(arguments, j);
        declare argument_type = expand_module_name_array(argument_type_array, 0, &module_id_map, &module_references_map, module_stack, create_previous_results_list());
        autobuffer_buffer_push_string(&main_name_buffer, argument_type);
        autobuffer_buffer_push_string(&main_name_buffer, ",");
        j = j + 1;
    };

    if j > 0 {
        main_name_buffer.index = main_name_buffer.index - 1;
    };
    autobuffer_buffer_push_string(&main_name_buffer, ":");

    declare return_types = pointer.return_types;

    declare j = 0;
    while !(array8_get(return_types, j) == 0) {
        declare return_type_array = cast(*) array8_get(return_types, j);
        declare return_type = expand_module_name_array(return_type_array, 0, &module_id_map, &module_references_map, module_stack, create_previous_results_list());
        autobuffer_buffer_push_string(&main_name_buffer, return_type);
        autobuffer_buffer_push_string(&main_name_buffer, ",");
        j = j + 1;
    };

    if j > 0 {
        main_name_buffer.index = main_name_buffer.index - 1;
    };
    autobuffer_buffer_push_string(&main_name_buffer, "]");

    return main_name_buffer.autobuffer.buffer;
};

define structure_data_to_string = function(pointer: *Node'StructureData): * {
    declare main_name_buffer = autobuffer_buffer_new(16);

    autobuffer_buffer_push_string(&main_name_buffer, "structure[");

    declare items = pointer.item_types;
    declare item_names = pointer.item_names;

    declare j = 0;
    while !(array8_get(items, j) == 0) {
        autobuffer_buffer_push_string(&main_name_buffer, cast(*) array8_get(item_names, j));
        autobuffer_buffer_push_string(&main_name_buffer, ":");
        autobuffer_buffer_push_string(&main_name_buffer, cast(*) array8_get(cast(*) array8_get(items, j), 0));
        autobuffer_buffer_push_string(&main_name_buffer, ",");
        j = j + 1;
    };

    main_name_buffer.index = main_name_buffer.index - 1;
    autobuffer_buffer_push_string(&main_name_buffer, "]");

    return main_name_buffer.autobuffer.buffer;
};
