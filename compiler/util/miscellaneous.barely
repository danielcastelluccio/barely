define whole_8_to_whole_4 = function(input: whole_8): whole_4 {
    declare output = whole_4'>0();
    output = cast(*whole_4, &input).*;
    return output;
};

define whole_8_to_whole_2 = function(input: whole_8): whole_2 {
    declare output = whole_2'>0();
    output = cast(*whole_2, &input).*;
    return output;
};

define whole_8_to_whole_1 = function(input: whole_8): whole_1 {
    declare output = whole_1'>0();
    output = cast(*whole_1, &input).*;
    return output;
};

define whole_4_to_whole_8 = function(input: whole_4): whole_8 {
    declare output = whole_8'>0();
    cast(*whole_4, &output).* = input;
    return output;
};

define whole_2_to_whole_8 = function(input: whole_2): whole_8 {
    declare output = whole_8'>0();
    cast(*whole_2, &output).* = input;
    return output;
};

define whole_1_to_whole_8 = function(input: whole_1): whole_8 {
    declare output = whole_8'>0();
    cast(*whole_1, &output).* = input;
    return output;
};

define string_length = function(string: *): whole_8 {
    declare length = 0;

    while !(0:whole_1 == cast(*any_1, string + length).*) {
        length = length + 1;
    };

    return length;
};

define string= = function(string1: *, string2: *): boolean {
    declare string1_length = string_length(string1);
    declare string2_length = string_length(string2);

    if !(string1_length == string2_length) {
        return false;
    };

    return string_length=(string1, string2, string1_length);
};

define string_length= = function(string1: *, string2: *, length: whole_8): boolean {
    declare i = 0;
    while i < length {
        declare string1_character = cast(*any_1, string1 + i).*;
        declare string2_character = cast(*any_1, string2 + i).*;

        if !(string1_character == string2_character) {
            return false;
        };

        i = i + 1;
    };

    return true;
};

define copy = function(from: *, to: *, size: whole_8) {
    declare i = 0;

    while i < size {
        if (i + 4096) < size {
            cast(*any_4096, to + i).* = cast(*any_4096, from + i).*;
            i = i + 4096;
        } else if (i + 512) < size {
            cast(*any_512, to + i).* = cast(*any_512, from + i).*;
            i = i + 512;
        } else if (i + 64) < size {
            cast(*any_64, to + i).* = cast(*any_64, from + i).*;
            i = i + 64;
        } else if (i + 8) < size {
            cast(*any_8, to + i).* = cast(*any_8, from + i).*;
            i = i + 8;
        } else {
            cast(*any_1, to + i).* = cast(*any_1, from + i).*;
            i = i + 1;
        };
    };
};
