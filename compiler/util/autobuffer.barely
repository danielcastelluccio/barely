define AutoBuffer = structure {
    buffer: *;
    size: whole_8;
    increment: whole_8;
};

define autobuffer_new = function(size: whole_8): AutoBuffer {
    declare auto_buffer: AutoBuffer;
    auto_buffer.size = size;
    auto_buffer.increment = size;

    declare allocated = brk_allocate(size);
    auto_buffer.buffer = allocated;

    return auto_buffer;
};

define autobuffer_reset = function(buffer: *AutoBuffer) {
    declare actual_buffer = buffer.buffer;
    declare size = buffer.size;
    declare i = 0;
    while i < size {
        if (i + 8) < size {
            cast(*any_8, actual_buffer + i).* = 0:whole_8;
            i = i + 8;
        } else  {
            cast(*any_1, actual_buffer + i).* = 0:whole_1;
            i = i + 1;
        };
    };
};

define autobuffer_set_boolean = function(buffer: *AutoBuffer, value: boolean, to: whole_8) {
    autobuffer_set(buffer, &value, to, 1);
};

define autobuffer_set_any_1 = function(buffer: *AutoBuffer, value: any_1, to: whole_8) {
    autobuffer_set(buffer, &value, to, 1);
};

define autobuffer_set_any_4 = function(buffer: *AutoBuffer, value: any_4, to: whole_8) {
    autobuffer_set(buffer, &value, to, 4);
};

define autobuffer_set_any_8 = function(buffer: *AutoBuffer, value: any_8, to: whole_8) {
    autobuffer_set(buffer, &value, to, 8);
};

define autobuffer_set_pointer = function(buffer: *AutoBuffer, value: *, to: whole_8) {
    autobuffer_set(buffer, &value, to, 8);
};

define autobuffer_set_whole_8 = function(buffer: *AutoBuffer, value: whole_8, to: whole_8, checked: boolean) {
    autobuffer_set_checked(buffer, &value, to, 8, checked);
};

define autobuffer_register = function(buffer: *AutoBuffer, location: whole_8, size: whole_8) {
    while (location + size) > buffer.size {
        declare previous_buffer = buffer.buffer;
        declare previous_size = buffer.size;
        declare new_buffer_size = previous_size + buffer.increment;
        declare allocated = brk_allocate(new_buffer_size);
        buffer.buffer = allocated;
        buffer.size = new_buffer_size;
        copy(previous_buffer, allocated, previous_size);
    };
};

define autobuffer_set_checked = function(buffer: *AutoBuffer, from: *, to: whole_8, size: whole_8, checked: boolean) {
    if checked {
        autobuffer_register(buffer, to, size);
    };

    declare to_pointer = cast(*, buffer.buffer + to);
    copy(from, to_pointer, size);
};

define autobuffer_set = function(buffer: *AutoBuffer, from: *, to: whole_8, size: whole_8) {
    autobuffer_set_checked(buffer, from, to, size, true);
};

define autobuffer_get = function(buffer: *AutoBuffer, location: whole_8): * {
    return cast(*, buffer.buffer + location);
};

define autobuffer_get_size = function(buffer: *AutoBuffer, location: whole_8, size: whole_8): * {
    autobuffer_register(buffer, location, size);
    return autobuffer_get(buffer, location);
};

define autobuffer_get_whole_8 = function(buffer: *AutoBuffer, location: whole_8): whole_8 {
    return cast(*whole_8, autobuffer_get_size(buffer, location, 8)).*;
};

define autobuffer_get_pointer = function(buffer: *AutoBuffer, location: whole_8): * {
    return cast(**, autobuffer_get(buffer, location)).*;
};

define autobuffer_get_any_1 = function(buffer: *AutoBuffer, location: whole_8): any_1 {
    return cast(*any_1, autobuffer_get(buffer, location)).*;
};

define autobuffer_get_any_8 = function(buffer: *AutoBuffer, location: whole_8): any_8 {
    return cast(*any_8, autobuffer_get_size(buffer, location, 8)).*;
};

define autobuffer_get_whole_4 = function(buffer: *AutoBuffer, location: whole_8): whole_4 {
    return cast(*whole_4, autobuffer_get(buffer, location)).*;
};

define increment_whole_8_pointer = function(pointer: *whole_8, amount: whole_8) {
    pointer.* = pointer.* + amount;
};
