function is_number(string: *): boolean {
    variable length = length(string);

    variable has_number = false;
    variable i = 0;
    while <(i, length) {
        variable character = whole_1->(@cast_*whole_1(+(string, i)));

        if &&(=(character, 95_whole_1), >(i, 0)) {
            break;
            character = 48_whole_1;
        };

        if =(character, 45_whole_1) {
        } else if <(character, 48_whole_1) {
            return false;
        } else if >(character, 57_whole_1) {
            return false;
        } else {
            has_number = true;
        };

        i = +(i, 1);
    };

    return has_number;
};

function to_number(string: *): whole_8 {
    return to_number_size_signed(string, 8, false);
};

function to_number_size_signed(string: *, size: whole_8, signed: boolean): whole_8 {
    variable length = length(string);

    variable whole_8 = 0;

    variable has_negative = false;

    variable i = 0;
    while <(i, length) {
        variable character = whole_1->(@cast_*whole_1(+(string, i)));

        if =(character, 95_whole_1) {
            break;
        } else {
            if =(character, 45_whole_1) {
                has_negative = true;
            } else {
                whole_8 = *(whole_8, 10);
                whole_8 = +(whole_8, whole_1_to_whole_8(-(character, 48_whole_1)));
            };
            i = +(i, 1);
        };
    };

    if has_negative {
        if =(size, 8) {
            return -(0, whole_8);
        } else if =(size, 4) {
            return whole_4_to_whole_8(-(0_whole_4, whole_8_to_whole_4(whole_8)));
        } else if =(size, 2) {
            return whole_2_to_whole_8(-(0_whole_2, whole_8_to_whole_2(whole_8)));
        } else if =(size, 1) {
            return whole_1_to_whole_8(-(0_whole_1, whole_8_to_whole_1(whole_8)));
        };
    };
    return whole_8;
};

function whole_8_to_string(whole_8: whole_8, buffer: *) {
    variable whole_82 = whole_8;

    if =(whole_8, 0) {
        any_1<-(@cast_*any_1(buffer), 48_whole_1);
    };

    variable length = 0;
    while !(=(whole_82, 0)) {
        whole_82 = /(whole_82, 10);
        length = +(length, 1);
    };

    whole_82 = whole_8;

    variable i = 0;
    while !(=(whole_82, 0)) {
        variable number = whole_8_to_whole_1(%(whole_82, 10));
        any_1<-(@cast_*any_1(+(buffer, -(-(length, 1), i))), +(number, 48_whole_1));
        whole_82 = /(whole_82, 10);
        i = +(i, 1);
    };
};

function decrement_whole_8_pointer(pointer: *whole_8, amount: whole_8) {
    whole_8<-(pointer, -(whole_8->(pointer), amount));
};

function stringarray_get(keys: *, values: *, wanted: *, size: whole_8): * {
    variable j = 0;
    while <(j, size) {
        if string=(@cast_*(array8_get(keys, j)), wanted) {
            return @cast_*(array8_get(values, j));
        };
        j = +(j, 1);
    };

    return @cast_*(0);
};

function stringarray_get_index(keys: *, wanted: *, size: whole_8): whole_8 {
    variable j = 0;
    while <(j, size) {
        if string=(@cast_*(array8_get(keys, j)), wanted) {
            return j;
        };
        j = +(j, 1);
    };

    return 999;
};

function autobuffer_string_push_whole_8(buffer: *AutoBuffer, buffer_index_pointer: *whole_8, whole_8: whole_8) {
    variable whole_8_buffer = any_24();
    whole_8_to_string(whole_8, &(whole_8_buffer));
    autobuffer_push_string(buffer, buffer_index_pointer, &(whole_8_buffer));
};

function print(string: *) {
    sys_write(STDOUT, string, length(string));
};

function println(string: *) {
    print(string);

    variable new_line: whole_8 = 10;
    sys_write(STDOUT, &(new_line), 1);
};

function exit(code: whole_8) {
    sys_exit(code);
};

function array8_set(array: *, index: whole_8, value: any_8) {
    variable index_pointer = @cast_*any_8(+(array, *(index, 8)));
    any_8<-(index_pointer, value);
};

function array8_get(array: *, index: whole_8): any_8 {
    variable index_pointer = @cast_*any_8(+(array, *(index, 8)));
    return any_8->(index_pointer);
};

function array8_length(array: *): whole_8 {
    variable k = 0;
    while !(=(array8_get(array, k), 0)) {
        k = +(k, 1);
    };
    return k;
};

function autobuffer_stack8_push(buffer: *AutoBuffer, stack_pointer: *whole_8, value: any_8) {
    autobuffer_set_whole_8(buffer, @cast_whole_8(value), *(whole_8->(stack_pointer), 8));
    increment_whole_8_pointer(stack_pointer, 1);
};

function autobuffer_stack8_pop(buffer: *AutoBuffer, stack_pointer: *whole_8): any_8 {
    decrement_whole_8_pointer(stack_pointer, 1);
    variable index_pointer = @cast_*any_8(autobuffer_get(buffer, *(whole_8->(stack_pointer), 8)));
    return any_8->(index_pointer);
};

function autobuffer_stringarray_get_index(keys: *AutoBuffer, wanted: *, size: whole_8): whole_8 {
    variable j = 0;
    while <(j, size) {
        if string=(@cast_*(autobuffer_array8_get(keys, j)), wanted) {
            return j;
        };
        j = +(j, 1);
    };

    return 999;
};

function print_whole_8(whole_8: whole_8) {
    variable buffer = any_24();
    whole_8_to_string(whole_8, &(buffer));
    print(&(buffer));
};

structure HashMap {
    buffer: AutoBuffer;
};

structure BucketData {
    data: whole_8;
    hash: whole_8;
    value: any_8;
};

function hashmap_new(size: whole_8): HashMap {
    variable hashmap: HashMap;

    variable buffer = autobuffer_new(size);

    HashMap<-buffer(&(hashmap), buffer);

    return hashmap;
};

function hashmap_put(hashmap: *HashMap, hash: whole_8, value: any_8) {
    variable buffer = &(HashMap->buffer(hashmap));

    variable bucket_pointer = @cast_*AutoBuffer(autobuffer_get_any_8(buffer, *(%(hash, /(AutoBuffer->size(buffer), 8)), 8)));
    if =(bucket_pointer, 0) {
        variable allocated_autobuffer = @cast_*AutoBuffer(brk_allocate(24));
        variable autobuffer = autobuffer_new(48);
        AutoBuffer<-(allocated_autobuffer, autobuffer);

        bucket_pointer = allocated_autobuffer;
        autobuffer_set_any_8(buffer, bucket_pointer, *(%(hash, /(AutoBuffer->size(buffer), 8)), 8));
    };

    variable searching = true;
    variable i = 0;
    while searching {
        if =(autobuffer_get_any_8(bucket_pointer, *(i, 24)), 0) {
            searching = false;
        } else if =(autobuffer_get_any_8(bucket_pointer, +(*(i, 24), 8)), hash) {
            searching = false;
        } else {
            i = +(i, 1);
        };
    };

    variable bucket_data = @cast_*BucketData(autobuffer_get_size(bucket_pointer, *(i, 24), 24));
    BucketData<-data(bucket_data, 1);
    BucketData<-hash(bucket_data, hash);
    BucketData<-value(bucket_data, value);
};

function hashmap_get(hashmap: *HashMap, hash: whole_8): any_8 {
    variable buffer = &(HashMap->buffer(hashmap));

    variable bucket_pointer = @cast_*AutoBuffer(autobuffer_get_any_8(buffer, *(%(hash, /(AutoBuffer->size(buffer), 8)), 8)));
    if !(=(bucket_pointer, 0)) {
        variable i = 0;
        while !(=(autobuffer_get_any_8(bucket_pointer, *(i, 24)), 0)) {
            variable bucket_data = @cast_*BucketData(autobuffer_get_size(bucket_pointer, *(i, 24), 24));

            if =(BucketData->hash(bucket_data), hash) {
                return BucketData->value(bucket_data);
            };

            i = +(i, 1);
        };
    };

    return 0;
};

function hashmap_get2(hashmap: *HashMap, hash: whole_8): any_8 {
    variable buffer = &(HashMap->buffer(hashmap));

    variable bucket_pointer = @cast_*AutoBuffer(autobuffer_get_any_8(buffer, *(%(hash, /(AutoBuffer->size(buffer), 8)), 8)));
    if !(=(bucket_pointer, 0)) {
        variable i = 0;
        while !(=(autobuffer_get_any_8(bucket_pointer, *(i, 24)), 0)) {
            variable bucket_data = @cast_*BucketData(autobuffer_get_size(bucket_pointer, *(i, 24), 24));

            if =(BucketData->hash(bucket_data), hash) {
                return BucketData->value(bucket_data);
            };

            i = +(i, 1);
        };
    };

    return 999;
};

function hashmap_string_put(hashmap: *HashMap, string: *, value: any_8) {
    hashmap_put(hashmap, string_hash(string), value);
};

function hashmap_string_get(hashmap: *HashMap, string: *): any_8 {
    return hashmap_get(hashmap, string_hash(string));
};

function string_hash(string: *): whole_8 {
    variable hash = 0;
    variable i = 0;
    while <(i, length(string)) {
        variable character = whole_1_to_whole_8(@cast_whole_1(*1(+(string, i))));
        hash = +(+(+(hash, *(hash, character)), character), i);
        i = +(i, 1);
    };

    return hash;
};
