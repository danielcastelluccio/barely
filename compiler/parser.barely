define tokenize_inner = function(auto_buffer: *AutoBuffer, tokens: *Tokens, file_name: *, row: *whole_8, column: *whole_8) {
    variable buffer = AutoBuffer.>buffer(auto_buffer);
    variable buffer_length = length(AutoBuffer.>buffer(auto_buffer));

    if =(buffer_length, 0) {
        return;
    };

    variable is_keyword = if string=(buffer, "function") true
    else if string=(buffer, "variable") true
    else if string=(buffer, "structure") true
    else if string=(buffer, "module") true
    else if string=(buffer, "macro") true
    else if string=(buffer, "return") true
    else if string=(buffer, "if") true
    else if string=(buffer, "else") true
    else if string=(buffer, "while") true
    else if string=(buffer, "global") true
    else if string=(buffer, "define") true
    else if string=(buffer, "break") true
    else false;

    if is_keyword {
        variable copied_buffer = copy_string_brk_allocate(buffer);

        variable keyword_data = TokenKeywordData.*cast(tokens_append_data(tokens, TOKEN_KEYWORD, file_name, whole_8.>(row), whole_8.>(column)));
        TokenKeywordData.<keyword(keyword_data, copied_buffer);
    } else if is_number(buffer) {
        tokenize_number(tokens, buffer, file_name, whole_8.>(row), whole_8.>(column));
    } else if |(string=(buffer, "true"), string=(buffer, "false")) {
        variable boolean_data = TokenBooleanData.*cast(tokens_append_data(tokens, TOKEN_BOOLEAN, file_name, whole_8.>(row), whole_8.>(column)));
        TokenBooleanData.<value(boolean_data, string=(buffer, "true"));
    } else {
        variable copied_buffer = copy_string_brk_allocate(buffer);

        variable name_data = TokenNameData.*cast(tokens_append_data(tokens, TOKEN_NAME, file_name, whole_8.>(row), whole_8.>(column)));
        TokenNameData.<name(name_data, copied_buffer);
    };
    
    increment_whole_8_pointer(column, buffer_length);
};

define tokenize_number = function(tokens: *Tokens, buffer: *, file_name: *, row: whole_8, column: whole_8) {
    variable number_data = TokenNumberData.*cast(tokens_append_data(tokens, TOKEN_NUMBER, file_name, row, column));

    // 0 = actual number, 1 = whole/integer, 2 = size
    variable stage = 0;
    variable type_buffer = autobuffer_buffer_new(8);
    variable size_buffer = autobuffer_buffer_new(8);
    variable number_buffer = autobuffer_buffer_new(8);

    variable j = 0;
    while <(j, length(buffer)) {
        variable character = whole_1.>(whole_1.*cast(+(buffer, j)));
        if =(character, ASCII.UNDERSCORE) {
            stage = +(stage, 1);
        } else if =(stage, 1) {
            autobuffer_buffer_push_whole_1(&(type_buffer), character);
        } else if =(stage, 2) {
            autobuffer_buffer_push_whole_1(&(size_buffer), character);
        } else {
            autobuffer_buffer_push_whole_1(&(number_buffer), character);
        };
        
        j = +(j, 1);
    };

    //if !(check_number_fits(tokens, size_bytes, =(TokenNumberData.>type(number_data), 1), buffer)) {
    //    print_token_error_beginning(tokens, -(Tokens.>index(tokens), 1));
    //    print("Number literal '");
    //    print(autobuffer_buffer_get_buffer_pointer(&(number_buffer)));
    //    print("' cannot fit in type '");
    //    print(autobuffer_buffer_get_buffer_pointer(&(type_buffer)));
    //    print("_");
    //    print(autobuffer_buffer_get_buffer_pointer(&(size_buffer)));
    //    println("'");
    //    exit(1);
    //};

    TokenNumberData.<value(number_data, string_to_whole_8(buffer));
};

define check_number_fits = function(tokens: *Tokens, size_bytes: whole_8, wants_signed: boolean, input_string: *): boolean {
    variable size_bits = 2;
    variable m = 1;
    while <(m, *(size_bytes, 8)) {
        size_bits = *(2, size_bits);
        m = +(m, 1);
    };
    size_bits = -(size_bits, 1);
    if wants_signed {
        size_bits = /(size_bits, 2);
    };

    variable number = 0;

    variable is_input_negative = =(any_1.>(any_1.*cast(input_string)), ASCII.MINUS);
    if is_input_negative {
        if wants_signed {
            number = -(string_to_whole_8(+(input_string, 1)), 1);
        } else {
            return false;
        };
    } else {
        number = string_to_whole_8(input_string);
    };

    return !(>(number, size_bits));
};

define tokenize = function(file_name: *, contents: *, tokens: *Tokens) {
    variable index = 0;
    variable row = 1;
    variable column = 1;
    variable column_cache = 1;

    variable contents_length = length(contents);

    variable buffer = autobuffer_new(64);
    variable buffer_index = 0;

    variable in_quotes = false;
    variable in_comment = false;

    while <(index, contents_length) {
        variable character_pointer = any_1.*cast(+(contents, index));
        variable character_pointer_next = any_1.*cast(+(contents, +(index, 1)));
        variable handled = false;

        if !(in_quotes) {
            if !(in_comment) {
                // a macro would probably be better suited for this
                variable current_character = any_1.>(character_pointer);
                handle_special_character(current_character, ASCII.OPEN_PARENTHESIS, TOKEN_OPEN_PARENTHESIS, &(buffer), &(buffer_index), tokens, file_name, &(row), &(column), &(handled));
                handle_special_character(current_character, ASCII.CLOSED_PARENTHESIS, TOKEN_CLOSED_PARENTHESIS, &(buffer), &(buffer_index), tokens, file_name, &(row), &(column), &(handled));
                handle_special_character(current_character, ASCII.OPEN_CURLY_BRACKETS, TOKEN_OPEN_CURLY_BRACKETS, &(buffer), &(buffer_index), tokens, file_name, &(row), &(column), &(handled));
                handle_special_character(current_character, ASCII.CLOSED_CURLY_BRACKETS, TOKEN_CLOSED_CURLY_BRACKETS, &(buffer), &(buffer_index), tokens, file_name, &(row), &(column), &(handled));
                handle_special_character(current_character, ASCII.OPEN_BRACKET, TOKEN_OPEN_BRACKET, &(buffer), &(buffer_index), tokens, file_name, &(row), &(column), &(handled));
                handle_special_character(current_character, ASCII.CLOSED_BRACKET, TOKEN_CLOSED_BRACKET, &(buffer), &(buffer_index), tokens, file_name, &(row), &(column), &(handled));
                handle_special_character(current_character, ASCII.COMMA, TOKEN_COMMA, &(buffer), &(buffer_index), tokens, file_name, &(row), &(column), &(handled));
                handle_special_character(current_character, ASCII.SEMICOLON, TOKEN_SEMICOLON, &(buffer), &(buffer_index), tokens, file_name, &(row), &(column), &(handled));
                handle_special_character(current_character, ASCII.PERIOD, TOKEN_PERIOD, &(buffer), &(buffer_index), tokens, file_name, &(row), &(column), &(handled));
                handle_special_character(current_character, ASCII.COLON, TOKEN_COLON, &(buffer), &(buffer_index), tokens, file_name, &(row), &(column), &(handled));

                handle_break(any_1.>(character_pointer), ASCII.SPACE, &(buffer), &(buffer_index), tokens, file_name, &(row), &(column), &(handled));
                handle_break(any_1.>(character_pointer), ASCII.LINE_FEED, &(buffer), &(buffer_index), tokens, file_name, &(row), &(column), &(handled));
                handle_break(any_1.>(character_pointer), ASCII.TAB, &(buffer), &(buffer_index), tokens, file_name, &(row), &(column), &(handled));
            };
        };

        if !(in_comment) {
            if =(any_1.>(character_pointer), ASCII.QUOTATION) {
                if in_quotes {
                    variable buffer_length = length(AutoBuffer.>buffer(&(buffer)));
                    variable buffer_copy = copy_string_brk_allocate(AutoBuffer.>buffer(&(buffer)));

                    variable string_pointer_data = TokenStringData.*cast(tokens_append_data(tokens, TOKEN_STRING, file_name, row, column));
                    TokenStringData.<value(string_pointer_data, buffer_copy);

                    autobuffer_reset(&(buffer));
                    buffer_index = 0;
                    column = +(+(column, buffer_length), 2);
                };

                in_quotes = !(in_quotes);
                handled = true;
            };
        };
        if =(any_1.>(character_pointer), ASCII.SLASH) {
            if =(any_1.>(character_pointer_next), ASCII.SLASH) {
                in_comment = true;
                handled = true;
            };
            column = +(column, 1);
        };

        if !(handled) {
            if !(in_comment) {
                autobuffer_set_any_1(&(buffer), any_1.>(any_1.*cast(character_pointer)), buffer_index);

                buffer_index = +(buffer_index, 1);
            };
        };

        if =(any_1.>(character_pointer), ASCII.LINE_FEED) {
            in_comment = false;
            handled = true;
            autobuffer_reset(&(buffer));
            buffer_index = 0;

            column = 1;
            row = +(row, 1);
        };

        index = +(index, 1);
    };
};

define handle_special_character = function(current_character: any_1, desired_character: whole_1, token: whole_8, buffer: *AutoBuffer, buffer_index: *whole_8, tokens: *Tokens, file_name: *, row: *whole_8, column: *whole_8, handled: *boolean) {
    if =(current_character, desired_character) {
        tokenize_inner(buffer, tokens, file_name, row, column);
        boolean.<(handled, true);
        autobuffer_reset(buffer);
        whole_8.<(buffer_index, 0);

        variable _ = tokens_append(tokens, token, file_name, whole_8.>(row), whole_8.>(column));
        increment_whole_8_pointer(column, 1);
    };
};

define handle_break = function(current_character: any_1, desired_character: whole_1, buffer: *AutoBuffer, buffer_index: *whole_8, tokens: *Tokens, file_name: *, row: *whole_8, column: *whole_8, handled: *boolean) {
    if =(current_character, desired_character) {
        tokenize_inner(buffer, tokens, file_name, row, column);
        boolean.<(handled, true);
        autobuffer_reset(buffer);
        whole_8.<(buffer_index, 0);

        increment_whole_8_pointer(column, 1);
    };
};

define get_token_location_data = function(tokens: *Tokens, index: whole_8): *, whole_8, whole_8 {
    variable data = tokens_get_location_data(tokens, index);
    return TokenLocationData.>file(data), TokenLocationData.>row(data), TokenLocationData.>column(data);
};

define print_token_error_beginning = function(tokens: *Tokens, location: whole_8) {
    variable location_data = tokens_get_location_data(tokens, location);
    print("[ERROR] ");
    print(TokenLocationData.>file(location_data));
    print(":");
    print_whole_8(TokenLocationData.>row(location_data));
    print(":");
    print_whole_8(TokenLocationData.>column(location_data));
    print(": ");
};

define parse_define = function(tokens: *Tokens, index_pointer: *whole_8, nodes: *Nodes) {
    variable index = whole_8.>(index_pointer);
    variable name_token_pointer_data = TokenNameData.*cast(tokens_get_pointer_data(tokens, +(index, 1)));
    variable name = TokenNameData.>name(name_token_pointer_data);

    variable type = *.cast(0);
    variable value_offset = if =(tokens_get_id(tokens, +(index, 2)), TOKEN_COLON) {
        variable type_token_pointer_data = TokenNameData.*cast(tokens_get_pointer_data(tokens, +(index, 3)));
        type = TokenNameData.>name(type_token_pointer_data);
        5
    } else if tokens_is_name(tokens, +(index, 2), "=") {
        3
    } else {
        print_token_error_beginning(tokens, +(index, 2));
        println("Unexpected token");
        exit(1);
        0
    };

    if =(tokens_get_id(tokens, +(index, value_offset)), TOKEN_NUMBER) {
        variable value_token_pointer_data = TokenNumberData.*cast(tokens_get_pointer_data(tokens, +(index, value_offset)));

        variable value = brk_allocate(8);
        whole_8.<(whole_8.*cast(value), TokenNumberData.>value(value_token_pointer_data));
    };

    variable define_index = Nodes.>index(nodes);
    variable define_node_data = NodeDefineData.*cast(nodes_append_data(nodes, NODE_DEFINE, get_token_location_data(tokens, whole_8.>(index_pointer))));
    NodeDefineData.<name(define_node_data, name);
    NodeDefineData.<type(define_node_data, type);

    increment_whole_8_pointer(index_pointer, value_offset);

    parse_individual(tokens, index_pointer, nodes);

    variable end_define_index = Nodes.>index(nodes);
    variable end_define_node_data = NodeEndDefineData.*cast(nodes_append_data(nodes, NODE_ENDDEFINE, get_token_location_data(tokens, whole_8.>(index_pointer))));
    NodeEndDefineData.<type(end_define_node_data, type);

    increment_whole_8_pointer(index_pointer, 1);
};

define parse_global = function(tokens: *Tokens, index_pointer: *whole_8, nodes: *Nodes) {
    variable index = whole_8.>(index_pointer);
    variable type_token_pointer_data = TokenNameData.*cast(tokens_get_pointer_data(tokens, +(index, 2)));
    variable type = TokenNameData.>name(type_token_pointer_data);

    variable global_node_data = NodeGlobalData.*cast(nodes_append_data(nodes, NODE_GLOBAL, get_token_location_data(tokens, whole_8.>(index_pointer))));
    NodeGlobalData.<type(global_node_data, type);

    increment_whole_8_pointer(index_pointer, 4);
};

define parse_structure = function(tokens: *Tokens, index_pointer: *whole_8, nodes: *Nodes) {
    variable index = whole_8.>(index_pointer);

    variable member_names = autobuffer_new(40);
    variable member_types = autobuffer_new(40);
    variable member_index = 0;

    index = +(index, 2);

    variable seen_item_name = false;

    while !(=(tokens_get_id(tokens, index), TOKEN_CLOSED_CURLY_BRACKETS)) {
        variable id = tokens_get_id(tokens, index);

        if =(id, TOKEN_NAME) {
            if seen_item_name {
                autobuffer_array8_set(&(member_types), member_index, parse_name(tokens, &(index)));
                member_index = +(member_index, 1);
            } else {
                autobuffer_array8_set(&(member_names), member_index, parse_name(tokens, &(index)));
            };

            seen_item_name = !(seen_item_name);
        } else if =(id, TOKEN_COLON) {
            index = +(index, 1);
        } else if =(id, TOKEN_SEMICOLON) {
            index = +(index, 1);
        };
    };

    variable structure_data = NodeStructureData.*cast(nodes_append_data(nodes, NODE_STRUCTURE, get_token_location_data(tokens, whole_8.>(index_pointer))));
    NodeStructureData.<item_names(structure_data, AutoBuffer.>buffer(&(member_names)));
    NodeStructureData.<item_types(structure_data, AutoBuffer.>buffer(&(member_types)));

    index = +(index, 1);

    whole_8.<(index_pointer, index);
};

define parse_name = function(tokens: *Tokens, index_pointer: *whole_8): * {
    variable buffer = autobuffer_buffer_new(64);
    if =(tokens_get_id(tokens, whole_8.>(index_pointer)), TOKEN_NAME) {
        variable token_name = TokenNameData.>name(TokenNameData.*cast(tokens_get_pointer_data(tokens, whole_8.>(index_pointer))));
        autobuffer_buffer_push_string(&(buffer), token_name);
        increment_whole_8_pointer(index_pointer, 1);
    };

    variable inner = 0;
    while |(>(inner, 0), =(tokens_get_id(tokens, whole_8.>(index_pointer)), TOKEN_OPEN_BRACKET)) {
        variable id = tokens_get_id(tokens, whole_8.>(index_pointer));
        variable pointer_data = tokens_get_pointer_data(tokens, whole_8.>(index_pointer));
        if =(id, TOKEN_OPEN_BRACKET) {
            autobuffer_buffer_push_string(&(buffer), "[");
            inner = +(inner, 1);
        } else if =(id, TOKEN_CLOSED_BRACKET) {
            autobuffer_buffer_push_string(&(buffer), "]");
            inner = -(inner, 1);
        } else if =(id, TOKEN_COMMA) {
            autobuffer_buffer_push_string(&(buffer), ",");
        } else if =(id, TOKEN_COLON) {
            autobuffer_buffer_push_string(&(buffer), ":");
        } else if =(id, TOKEN_NAME) {
            autobuffer_buffer_push_string(&(buffer), TokenNameData.>name(TokenNameData.*cast(pointer_data)));
        };
        increment_whole_8_pointer(index_pointer, 1);
    };

    variable result = AutoBuffer.>buffer(&(AutoBufferBuffer.>autobuffer(&(buffer))));

    if =(tokens_get_id(tokens, whole_8.>(index_pointer)), TOKEN_PERIOD) {
        increment_whole_8_pointer(index_pointer, 1);
        if is_only_asterisks(result) {
            result = concatenate3_brk_allocate(result, "@current_module.", parse_name(tokens, index_pointer));
        } else {
            result = concatenate3_brk_allocate(result, ".", parse_name(tokens, index_pointer));
        };
    };

    return result;
};

define parse_name_array = function(tokens: *Tokens, index_pointer: *whole_8): * {
    variable buffer = autobuffer_buffer_new(32);
    variable array = autobuffer_new(24);
    variable array_index = 0;
    if =(tokens_get_id(tokens, whole_8.>(index_pointer)), TOKEN_NAME) {
        variable token_name = TokenNameData.>name(TokenNameData.*cast(tokens_get_pointer_data(tokens, whole_8.>(index_pointer))));
        autobuffer_buffer_push_string(&(buffer), token_name);
        increment_whole_8_pointer(index_pointer, 1);
    };

    variable inner = 0;
    while |(>(inner, 0), =(tokens_get_id(tokens, whole_8.>(index_pointer)), TOKEN_OPEN_BRACKET)) {
        variable id = tokens_get_id(tokens, whole_8.>(index_pointer));
        variable pointer_data = tokens_get_pointer_data(tokens, whole_8.>(index_pointer));
        if =(id, TOKEN_OPEN_BRACKET) {
            autobuffer_buffer_push_string(&(buffer), "[");
            inner = +(inner, 1);
        } else if =(id, TOKEN_CLOSED_BRACKET) {
            autobuffer_buffer_push_string(&(buffer), "]");
            inner = -(inner, 1);
        } else if =(id, TOKEN_COMMA) {
            autobuffer_buffer_push_string(&(buffer), ",");
        } else if =(id, TOKEN_COLON) {
            autobuffer_buffer_push_string(&(buffer), ":");
        } else if =(id, TOKEN_NAME) {
            autobuffer_buffer_push_string(&(buffer), TokenNameData.>name(TokenNameData.*cast(pointer_data)));
        };
        increment_whole_8_pointer(index_pointer, 1);
    };

    if >(length(autobuffer_buffer_get_buffer_pointer(&(buffer))), 0) {
        autobuffer_array8_set(&(array), array_index, autobuffer_buffer_get_buffer_pointer(&(buffer)));
        array_index = +(array_index, 1);
    };

    if =(tokens_get_id(tokens, whole_8.>(index_pointer)), TOKEN_PERIOD) {
        increment_whole_8_pointer(index_pointer, 1);
        if is_only_asterisks(*.cast(autobuffer_array8_get(&(array), -(autobuffer_array8_length(&(array)), 1)))) {
            array_index = -(array_index, 1);
            variable first_index_contents = *.cast(autobuffer_array8_get(&(array), array_index));
            autobuffer_array8_set(&(array), array_index, concatenate2_brk_allocate(first_index_contents, "@current_module"));
            array_index = +(array_index, 1);
            variable next_array = parse_name_array(tokens, index_pointer);

            variable i = 0;
            while <(i, array8_length(next_array)) {
                autobuffer_array8_set(&(array), array_index, *.cast(array8_get(next_array, i)));
                array_index = +(array_index, 1);
                i = +(i, 1);
            };
        } else {
            variable next_array = parse_name_array(tokens, index_pointer);

            variable i = 0;
            while <(i, array8_length(next_array)) {
                autobuffer_array8_set(&(array), array_index, *.cast(array8_get(next_array, i)));
                array_index = +(array_index, 1);
                i = +(i, 1);
            };
        };
    };

    return AutoBuffer.>buffer(&(array));
};

define is_only_asterisks = function(string: *): boolean {
    variable i = 0;
    while <(i, length(string)) {
        variable character = any_1.>(any_1.*cast(+(string, i)));
        if !(=(character, ASCII.ASTERISK)) {
            return false;
        };
        i = +(i, 1);
    };

    return true;
};

define parse_function = function(tokens: *Tokens, index_pointer: *whole_8, nodes: *Nodes) {
    variable index = whole_8.>(index_pointer);

    variable function_data = NodeFunctionData.*cast(nodes_append_data(nodes, NODE_FUNCTION, get_token_location_data(tokens, whole_8.>(index_pointer))));

    index = +(index, 2);

    variable function_argument_names, function_arguments, function_arguments_array, function_returns = parse_function_definition(tokens, &(index), nodes);

    variable has_body = =(tokens_get_id(tokens, index), TOKEN_OPEN_CURLY_BRACKETS);

    NodeFunctionData.<argument_names(function_data, function_argument_names);
    NodeFunctionData.<argument_types_array(function_data, function_arguments_array);
    NodeFunctionData.<returns(function_data, function_returns);

    if has_body {
        index = +(index, 1);

        variable _ = nodes_append(nodes, NODE_SCOPE, get_token_location_data(tokens, index));
        while !(=(tokens_get_id(tokens, index), TOKEN_CLOSED_CURLY_BRACKETS)) {
            parse_statement(tokens, &(index), nodes);
        };

        index = +(index, 1);

        
        if !(=(nodes_get_id(nodes, -(Nodes.>index(nodes), 1)), NODE_RETURN)) {
            variable _ = nodes_append(nodes, NODE_RETURN, get_token_location_data(tokens, -(index, 1)));
        };

        variable _ = nodes_append(nodes, NODE_ENDSCOPE, get_token_location_data(tokens, index));
    };

    variable _ = nodes_append(nodes, NODE_ENDFUNCTION, get_token_location_data(tokens, index));

    whole_8.<(index_pointer, index);
};

define parse_function_definition = function(tokens: *Tokens, index_pointer: *whole_8, nodes: *Nodes): *, *, *, * {
    variable index = whole_8.>(index_pointer);

    variable function_argument_names = autobuffer_new(40);
    variable function_arguments = autobuffer_new(40);
    variable function_arguments_array = autobuffer_new(40);
    variable function_returns = autobuffer_new(40);

    variable is_name = true;
    variable arguments_index = 0;
    while !(=(tokens_get_id(tokens, index), TOKEN_CLOSED_PARENTHESIS)) {
        variable id = tokens_get_id(tokens, index);

        if =(id, TOKEN_NAME) {
            variable token_name = TokenNameData.>name(TokenNameData.*cast(tokens_get_pointer_data(tokens, index)));

            if is_name {
                autobuffer_array8_set(&(function_argument_names), arguments_index, token_name);
                index = +(index, 1);
            } else {
                token_name = parse_name_array(tokens, &(index));
                autobuffer_array8_set(&(function_arguments_array), arguments_index, token_name);
                arguments_index = +(arguments_index, 1);
            };

            is_name = !(is_name);
        } else if |(=(id, TOKEN_COMMA), =(id, TOKEN_COLON)) {
            index = +(index, 1);
        };
    };
    
    index = +(index, 1);

    variable returns_index = 0;
    while &&(!(=(tokens_get_id(tokens, index), TOKEN_OPEN_CURLY_BRACKETS)), !(=(tokens_get_id(tokens, index), TOKEN_SEMICOLON))) {
        variable id = tokens_get_id(tokens, index);

        if |(=(id, TOKEN_NAME), =(id, TOKEN_PERIOD)) {
            variable token_name = parse_name(tokens, &(index));
            autobuffer_array8_set(&(function_returns), returns_index, token_name);
            returns_index = +(returns_index, 1);
        } else if |(=(id, TOKEN_COMMA), =(id, TOKEN_COLON)) {
            index = +(index, 1);
        };

    };

    whole_8.<(index_pointer, index);

    return AutoBuffer.>buffer(&(function_argument_names)), AutoBuffer.>buffer(&(function_arguments)), AutoBuffer.>buffer(&(function_arguments_array)), AutoBuffer.>buffer(&(function_returns));
};

define parse_invoke_parenthesis = function(tokens: *Tokens, index_pointer: *whole_8, nodes: *Nodes) {
    increment_whole_8_pointer(index_pointer, 1);

    parse_multiple_expressions(tokens, index_pointer, nodes, TOKEN_CLOSED_PARENTHESIS);

    increment_whole_8_pointer(index_pointer, 1);
};

define parse_invoke_parenthesis_ending = function(tokens: *Tokens, index_in: whole_8, nodes: *Nodes) {
    variable index = index_in;

    variable inner = 0_integer_8;
    while |(>(inner, 0_integer_8), =(tokens_get_id(tokens, index), TOKEN_OPEN_PARENTHESIS)) {
        variable id = tokens_get_id(tokens, index);
        if =(id, TOKEN_OPEN_PARENTHESIS) {
            if =(inner, 0_integer_8) {
                variable inside_index = +(index, 1);
                variable inside_inner = 1_integer_8;
                while >(inside_inner, 0_integer_8) {
                    variable id3 = tokens_get_id(tokens, inside_index);
                    if =(id3, TOKEN_OPEN_PARENTHESIS) {
                        inside_inner = +(inside_inner, 1_integer_8);
                    } else if =(id3, TOKEN_CLOSED_PARENTHESIS) {
                        inside_inner = -(inside_inner, 1_integer_8);
                    } else if =(id3, TOKEN_SEMICOLON) {
                        print_token_error_beginning(tokens, index);
                        println("Unclosed parenthesis");
                        exit(1);
                    };

                    inside_index = +(inside_index, 1);
                };
                parse_invoke_parenthesis_ending(tokens, inside_index, nodes);
                parse_invoke_parenthesis(tokens, &(index), nodes);
                return;
            } else {
                inner = +(inner, 1_integer_8);
                index = +(index, 1);
            };
        } else if =(id, TOKEN_CLOSED_PARENTHESIS) {
            inner = -(inner, 1_integer_8);
            index = +(index, 1);
        };
    };
};

define parse_expression = function(tokens: *Tokens, index_pointer: *whole_8, nodes_in: *Nodes) {
    variable index = whole_8.>(index_pointer);

    variable id = tokens_get_id(tokens, index);
    variable pointer_data = tokens_get_pointer_data(tokens, index);

    variable nodes_temp = nodes_new();
    variable nodes = &(nodes_temp);

    variable nodes_index = Nodes.>index(nodes);
    variable nodes_initial_index = Nodes.>index(nodes_in);

    check_parse_simple_expressions(tokens, &(index), nodes, id, pointer_data);

    if =(id, TOKEN_OPEN_CURLY_BRACKETS) {
        variable _ = nodes_append(nodes, NODE_SCOPE, get_token_location_data(tokens, index));
        index = +(index, 1);
        while !(=(tokens_get_id(tokens, index), TOKEN_CLOSED_CURLY_BRACKETS)) {
            parse_statement(tokens, &(index), nodes);
        };
        index = +(index, 1);
        variable _ = nodes_append(nodes, NODE_ENDSCOPE, get_token_location_data(tokens, index));
    };

    if =(id, TOKEN_KEYWORD) {
        variable name_value = TokenNameData.>name(TokenNameData.*cast(tokens_get_pointer_data(tokens, whole_8.>(index_pointer))));
        if string=(name_value, "if") {
            parse_if(tokens, &(index), nodes);
        };
    };

    check_parse_invoke_parenthesis_chain(tokens, &(index), nodes, nodes_in);

    whole_8.<(index_pointer, index);
};

define check_parse_invoke_parenthesis_chain = function(tokens: *Tokens, index_pointer: *whole_8, nodes: *Nodes, nodes_in: *Nodes) {
    variable index = whole_8.>(index_pointer);

    variable nodes_moved_count = Nodes.>index(nodes);

    variable nodes_index = Nodes.>index(nodes);

    parse_invoke_parenthesis_ending(tokens, index, nodes_in);

    variable nodes_in_index = Nodes.>index(nodes_in);

    autobuffer_set(&(Nodes.>buffer(nodes_in)), AutoBuffer.>buffer(&(Nodes.>buffer(nodes))), *(Nodes.>index(nodes_in), NODE_SIZE), *(nodes_moved_count, NODE_SIZE));
    Nodes.<index(nodes_in, +(Nodes.>index(nodes_in), nodes_moved_count));

    if =(tokens_get_id(tokens, index), TOKEN_OPEN_PARENTHESIS) {
        nodes_index = -(nodes_index, 1);
        parse_invoke_parenthesis_chain(tokens, &(index), nodes_in, +(nodes_in_index, nodes_index));
    };

    whole_8.<(index_pointer, index);
};

define check_parse_simple_expressions = function(tokens: *Tokens, index_pointer: *whole_8, nodes: *Nodes, token_id: whole_8, token_pointer_data: *) {
    variable index = whole_8.>(index_pointer);

    if |(=(token_id, TOKEN_NAME), =(token_id, TOKEN_PERIOD)) {
        variable names_buffer = autobuffer_new(24);
        variable j = 0;
        if =(token_id, TOKEN_PERIOD) {
            autobuffer_array8_set(&(names_buffer), j, "@current_module");
            j = +(j, 1);
            index = +(index, 1);
        };

        index = -(index, 1);

        variable retrieve_node_data = NodeRetrieveData.*cast(nodes_append_data(nodes, NODE_RETRIEVE, get_token_location_data(tokens, index)));

        variable name_name: * = *.cast(0);
        variable first = true;
        while |(=(tokens_get_id(tokens, index), TOKEN_PERIOD), first) {
            index = +(index, 1);

            if !(=(name_name, 0)) {
                autobuffer_array8_set(&(names_buffer), j, name_name);
                j = +(j, 1);
            };

            variable name_data = TokenNameData.*cast(tokens_get_pointer_data(tokens, index));
            name_name = TokenNameData.>name(name_data);

            index = +(index, 1);
            first = false;
        };

        autobuffer_array8_set(&(names_buffer), j, name_name);
        NodeRetrieveData.<name(retrieve_node_data, AutoBuffer.>buffer(&(names_buffer)));

        if =(tokens_get_id(tokens, index), TOKEN_COLON) {
            index = +(index, 1);
            variable name = parse_name(tokens, &(index));
            NodeRetrieveData.<coercion(retrieve_node_data, name);
        };
    };

    if =(token_id, TOKEN_STRING) {
        variable string_value = TokenStringData.>value(TokenStringData.*cast(token_pointer_data));
        variable string_pointer_data = NodeStringData.*cast(nodes_append_data(nodes, NODE_STRING, get_token_location_data(tokens, index)));
        NodeStringData.<value(string_pointer_data, string_value);

        index = +(index, 1);
    };

    if =(token_id, TOKEN_NUMBER) {
        variable number_token_data = TokenNumberData.*cast(token_pointer_data);
        variable number_node_data = NodeNumberData.*cast(nodes_append_data(nodes, NODE_NUMBER, get_token_location_data(tokens, index)));
        NodeNumberData.<value(number_node_data, TokenNumberData.>value(number_token_data));

        index = +(index, 1);

        if =(tokens_get_id(tokens, index), TOKEN_COLON) {
            index = +(index, 1);

            variable coerced_value = parse_name_array(tokens, &(index));
            NodeNumberData.<coersion(number_node_data, coerced_value);
        };
    };

    if =(token_id, TOKEN_BOOLEAN) {
        variable boolean_value = TokenBooleanData.>value(TokenBooleanData.*cast(token_pointer_data));
        variable boolean_node_data = NodeBooleanData.*cast(nodes_append_data(nodes, NODE_BOOLEAN, get_token_location_data(tokens, index)));
        NodeBooleanData.<value(boolean_node_data, boolean_value);

        index = +(index, 1);
    };

    whole_8.<(index_pointer, index);
};

define parse_invoke_parenthesis_chain = function(tokens: *Tokens, index_pointer: *whole_8, nodes: *Nodes, previous_retrieve_index: whole_8) {
    variable index = whole_8.>(index_pointer);
    variable inner = 0_integer_8;

    variable is_first = true;

    while |(>(inner, 0_integer_8), =(tokens_get_id(tokens, index), TOKEN_OPEN_PARENTHESIS)) {
        variable id2 = tokens_get_id(tokens, index);
        if =(id2, TOKEN_OPEN_PARENTHESIS) {
            if =(inner, 0_integer_8) {
                variable is_special = false;
                variable is_pointer = false;
                variable retrieve_name_array = NodeRetrieveData.>name(NodeRetrieveData.*cast(nodes_get_pointer_data(nodes, previous_retrieve_index)));
                if is_first {
                    is_special = is_special_function(retrieve_name_array);
                    if string=(*.cast(array8_get(retrieve_name_array, 0)), "&") {
                        is_pointer = true;
                    };
                };

                if is_special {
                    nodes_set_skip(nodes, previous_retrieve_index);

                    if is_pointer {
                        // Maybe want to make this also not a special case
                        variable _ = nodes_append(nodes, NODE_POINTER, get_token_location_data(tokens, whole_8.>(index_pointer)));
                    } else {
                        variable invoke_data = NodeInvokeInternalData.*cast(nodes_append_data(nodes, NODE_INVOKE_INTERNAL, get_token_location_data(tokens, whole_8.>(index_pointer))));
                        NodeInvokeInternalData.<name(invoke_data, retrieve_name_array);
                    };
                } else {
                    variable _ = nodes_append(nodes, NODE_INVOKE, get_token_location_data(tokens, whole_8.>(index_pointer)));
                };

                is_first = false;
            };
            inner = +(inner, 1_integer_8);
        } else if =(id2, TOKEN_CLOSED_PARENTHESIS) {
            inner = -(inner, 1_integer_8);
        };
        index = +(index, 1);
    };

    whole_8.<(index_pointer, index);
};

define is_special_function = function(names: *): boolean {
    variable name = *.cast(array8_get(names, -(array8_length(names), 1)));
    return if string=(name, "+") {
        true
    } else if string=(name, "-") {
        true
    } else if string=(name, "*") {
        true
    } else if string=(name, "/") {
        true
    } else if string=(name, "%") {
        true
    } else if string=(name, "=") {
        true
    } else if string=(name, ">") {
        true
    } else if string=(name, "<") {
        true
    } else if string=(name, "&") {
        true
    } else if string=(name, "!") {
        true
    } else if string=(name, "|") {
        true
    } else if string=(name, "&&") {
        true
    } else if string_length=(name, "<", 1) {
        true
    } else if string_length=(name, ">", 1) {
        true
    } else if string_length=(name, "cast", 4) {
        true
    } else if string_length=(name, "*cast", 5) {
        true
    } else if &&(string_length=(name, "size", 4), =(length(name), 4)) {
        true
    } else if string_length=(name, "@syscall", 8) {
        true
    } else {
        false
    };
};

define parse_if = function(tokens: *Tokens, index_pointer: *whole_8, nodes: *Nodes) {
    variable index = whole_8.>(index_pointer);

    variable end_target = get_target_id();

    variable end_if: *NodeEndIfBlockData;

    while =(tokens_get_id(tokens, index), TOKEN_KEYWORD) {
        variable target = get_target_id();
        variable token_data = TokenKeywordData.*cast(tokens_get_pointer_data(tokens, index));
        variable token_index = index;

        variable is_bare_else = false;

        if tokens_is_keyword(tokens, token_index, "if") {
            index = +(index, 1);

            parse_expression(tokens, &(index), nodes);
            variable conditional_jump_data = NodeJumpConditionalData.*cast(nodes_append_data(nodes, NODE_JUMP_CONDITIONAL, get_token_location_data(tokens, index)));
            NodeJumpConditionalData.<target_id(conditional_jump_data, target);
        } else if &&(tokens_is_keyword(tokens, token_index, "else"), tokens_is_keyword(tokens, token_index, "if")) {
            index = +(index, 2);

            parse_expression(tokens, &(index), nodes);
            variable conditional_jump_data = NodeJumpConditionalData.*cast(nodes_append_data(nodes, NODE_JUMP_CONDITIONAL, get_token_location_data(tokens, index)));
            NodeJumpConditionalData.<target_id(conditional_jump_data, target);
        } else {
            is_bare_else = true;
            index = +(index, 1);
        };

        variable _ = nodes_append(nodes, NODE_STARTIFBLOCK, get_token_location_data(tokens, index));
        parse_expression(tokens, &(index), nodes);

        variable jump_data = NodeJumpData.*cast(nodes_append_data(nodes, NODE_JUMP, get_token_location_data(tokens, index)));
        NodeJumpData.<target_id(jump_data, end_target);

        end_if = NodeEndIfBlockData.*cast(nodes_append_data(nodes, NODE_ENDIFBLOCK, get_token_location_data(tokens, -(index, 1))));
        NodeEndIfBlockData.<id(end_if, end_target);
        NodeEndIfBlockData.<is_bare_else(end_if, is_bare_else);

        variable target_node_data = NodeTargetData.*cast(nodes_append_data(nodes, NODE_TARGET, get_token_location_data(tokens, index)));
        NodeTargetData.<id(target_node_data, target);
    };

    NodeEndIfBlockData.<is_last(end_if, true);

    variable target_node_data = NodeTargetData.*cast(nodes_append_data(nodes, NODE_TARGET, get_token_location_data(tokens, index)));
    NodeTargetData.<id(target_node_data, end_target);

    whole_8.<(index_pointer, index);
};

define target_id = global(whole_8);

define while_target_id_stack = global(AutoBufferStack8);

define get_target_id = function(): whole_8 {
    variable return_ = target_id;
    target_id = +(target_id, 1);

    return return_;
};

define parse_statement = function(tokens: *Tokens, index_pointer: *whole_8, nodes: *Nodes) {
    while =(tokens_get_id(tokens, whole_8.>(index_pointer)), TOKEN_COMMA) {
        increment_whole_8_pointer(index_pointer, 1);
    };

    variable done_anything = false;

    if tokens_is_keyword(tokens, whole_8.>(index_pointer), "variable") {
        parse_declare_variable(tokens, index_pointer, nodes);
        done_anything = true;
    };

    if &&(tokens_is_keyword(tokens, whole_8.>(index_pointer), "return"), !(done_anything)) {
        parse_return(tokens, index_pointer, nodes);
        done_anything = true;
        return;
    };

    if &&(tokens_is_keyword(tokens, whole_8.>(index_pointer), "while"), !(done_anything)) {
        parse_while(tokens, index_pointer, nodes);
        done_anything = true;
    };

    if !(done_anything) {
        if check_parse_assign(tokens, index_pointer, nodes) {
            done_anything = true;
        };
    };

    if &&(tokens_is_keyword(tokens, whole_8.>(index_pointer), "break"), !(done_anything)) {
        parse_break(tokens, index_pointer, nodes);
        done_anything = true;
    };

    if !(done_anything) {
        parse_expression(tokens, index_pointer, nodes);
        if =(tokens_get_id(tokens, whole_8.>(index_pointer)), TOKEN_SEMICOLON) {
            variable _ = nodes_append(nodes, NODE_ENDSTATEMENT, get_token_location_data(tokens, whole_8.>(index_pointer)));
            increment_whole_8_pointer(index_pointer, 1);
        };
    } else {
        variable _ = nodes_append(nodes, NODE_ENDSTATEMENT, get_token_location_data(tokens, -(whole_8.>(index_pointer), 1)));
    };
};

define parse_break = function(tokens: *Tokens, index_pointer: *whole_8, nodes: *Nodes) {
    variable jump_data = NodeJumpData.*cast(nodes_append_data(nodes, NODE_JUMP, get_token_location_data(tokens, whole_8.>(index_pointer))));
    NodeJumpData.<target_id(jump_data, whole_8.cast(autobuffer_stack8_peek(&(while_target_id_stack))));

    increment_whole_8_pointer(index_pointer, 2);
};

define parse_return = function(tokens: *Tokens, index_pointer: *whole_8, nodes: *Nodes) {
    increment_whole_8_pointer(index_pointer, 1);

    parse_multiple_expressions(tokens, index_pointer, nodes, TOKEN_SEMICOLON);

    variable node = nodes_append(nodes, NODE_RETURN, get_token_location_data(tokens, whole_8.>(index_pointer)));
    increment_whole_8_pointer(index_pointer, 1);
};

define check_parse_assign = function(tokens: *Tokens, index_pointer: *whole_8, nodes: *Nodes): boolean {
    variable is_assign = true;
    variable index = whole_8.>(index_pointer);
    while true {
        if =(tokens_get_id(tokens, index), TOKEN_COMMA) {
            index = +(index, 1);
        } else if =(tokens_get_id(tokens, index), TOKEN_NAME) {
            variable name = TokenNameData.>name(TokenNameData.*cast(tokens_get_pointer_data(tokens, index)));
            if string=(name, "=") {
                break;
            };
            index = +(index, 1);
        } else {
            is_assign = false;
            break;
        };
    };

    if is_assign {
        parse_assign(tokens, index_pointer, nodes);
        return true;
    };

    return false;
};

define parse_assign = function(tokens: *Tokens, index_pointer: *whole_8, nodes: *Nodes) {
    variable names = autobuffer_new(40);
    variable name_index = 0;

    variable index = whole_8.>(index_pointer);
    while true {
        if =(tokens_get_id(tokens, index), TOKEN_COMMA) {
            index = +(index, 1);
        } else {
            variable name = TokenNameData.>name(TokenNameData.*cast(tokens_get_pointer_data(tokens, index)));
            autobuffer_stack8_legacy_push(&(names), &(name_index), name);
            index = +(index, 1);
        };

        if =(tokens_get_id(tokens, index), TOKEN_NAME) {
            if string=(TokenNameData.>name(TokenNameData.*cast(tokens_get_pointer_data(tokens, index))), "=") {
                break;
            };
        };
    };

    index = +(index, 1);

    parse_multiple_expressions(tokens, &(index), nodes, TOKEN_SEMICOLON);

    index = +(index, 1);

    variable temp = autobuffer_array8_length(&(names));
    variable i = -(autobuffer_array8_length(&(names)), 1);
    while <(i, temp) {
        variable assign_node_data = NodeAssignData.*cast(nodes_append_data(nodes, NODE_ASSIGN, get_token_location_data(tokens, whole_8.>(index_pointer))));
        NodeAssignData.<name(assign_node_data, *.cast(autobuffer_array8_get(&(names), i)));
        i = -(i, 1);
    };

    whole_8.<(index_pointer, index);
};

define parse_while = function(tokens: *Tokens, index_pointer: *whole_8, nodes: *Nodes) {
    increment_whole_8_pointer(index_pointer, 1);

    variable target1 = get_target_id();

    variable target2 = get_target_id();

    variable target_node1_data = NodeTargetData.*cast(nodes_append_data(nodes, NODE_TARGET, get_token_location_data(tokens, whole_8.>(index_pointer))));
    NodeTargetData.<id(target_node1_data, target1);

    parse_expression(tokens, index_pointer, nodes);
    variable conditional_jump_data = NodeJumpConditionalData.*cast(nodes_append_data(nodes, NODE_JUMP_CONDITIONAL, get_token_location_data(tokens, whole_8.>(index_pointer))));
    NodeJumpConditionalData.<target_id(conditional_jump_data, target2);
    NodeJumpConditionalData.<desired_state(conditional_jump_data, false);
    variable _ = nodes_append(nodes, NODE_ENDSTATEMENT, get_token_location_data(tokens, whole_8.>(index_pointer)));

    autobuffer_stack8_push(&(while_target_id_stack), target2);
    parse_expression(tokens, index_pointer, nodes);
    variable _ = autobuffer_stack8_pop(&(while_target_id_stack));

    variable jump_node_data = NodeJumpData.*cast(nodes_append_data(nodes, NODE_JUMP, get_token_location_data(tokens, whole_8.>(index_pointer))));
    NodeJumpData.<target_id(jump_node_data, target1);

    variable target_node2_data = NodeTargetData.*cast(nodes_append_data(nodes, NODE_TARGET, get_token_location_data(tokens, whole_8.>(index_pointer))));
    NodeTargetData.<id(target_node2_data, target2);

    increment_whole_8_pointer(index_pointer, 1);
};

define parse_declare_variable = function(tokens: *Tokens, index_pointer: *whole_8, nodes: *Nodes) {
    variable index = whole_8.>(index_pointer);

    variable parse_expression, variable_names = parse_declare_variable_declaration(tokens, &(index), nodes);

    if parse_expression {
        index = +(index, 1);

        parse_multiple_expressions(tokens, &(index), nodes, TOKEN_SEMICOLON);

        variable temp = array8_length(variable_names);
        variable i = -(array8_length(variable_names), 1);
        while <(i, temp) {
            variable node_data = NodeAssignData.*cast(nodes_append_data(nodes, NODE_ASSIGN, get_token_location_data(tokens, whole_8.>(index_pointer))));
            NodeAssignData.<name(node_data, *.cast(array8_get(variable_names, i)));

            i = -(i, 1);
        };
    };

    index = +(index, 1);
    whole_8.<(index_pointer, index);
};

define parse_declare_variable_declaration = function(tokens: *Tokens, index_pointer: *whole_8, nodes: *Nodes): boolean, * {
    variable index = whole_8.>(index_pointer);
    index = +(index, 1);

    variable names = autobuffer_new(40);
    variable types = autobuffer_new(40);

    variable name_index = 0;
    variable seen_item_name = false;
    variable parse_expression = false;
    while true {
        variable id = tokens_get_id(tokens, index);
        if =(id, TOKEN_COMMA) {
            name_index = +(name_index, 1);
            seen_item_name = false;
        };

        if =(id, TOKEN_NAME) {
            variable name_value = TokenNameData.>name(TokenNameData.*cast(tokens_get_pointer_data(tokens, index)));
            if seen_item_name {
                variable name = parse_name_array(tokens, &(index));
                autobuffer_array8_set(&(types), name_index, name);
            } else {
                autobuffer_array8_set(&(names), name_index, name_value);
                autobuffer_array8_set(&(types), name_index, create_size_zero_array8_brk_allocate());
                seen_item_name = true;

                index = +(index, 1);
            };
        } else {
            index = +(index, 1);
        };

        if =(tokens_get_id(tokens, index), TOKEN_NAME) {
            variable name_value = TokenNameData.>name(TokenNameData.*cast(tokens_get_pointer_data(tokens, index)));
            if string=(name_value, "=") {
                parse_expression = true;
                break;
            };
        };
        if =(tokens_get_id(tokens, index), TOKEN_SEMICOLON) {
            parse_expression = false;
            break;
        };
    };

    variable i = 0;
    while !(=(autobuffer_array8_get(&(names), i), 0)) {
        variable node_data = NodeDeclareData.*cast(nodes_append_data(nodes, NODE_DECLARE, get_token_location_data(tokens, whole_8.>(index_pointer))));
        NodeDeclareData.<name(node_data, *.cast(autobuffer_array8_get(&(names), i)));
        NodeDeclareData.<type(node_data, *.cast(autobuffer_array8_get(&(types), i)));

        i = +(i, 1);
    };

    whole_8.<(index_pointer, index);
    return parse_expression, AutoBuffer.>buffer(&(names));
};

define parse_multiple_expressions = function(tokens: *Tokens, index_pointer: *whole_8, nodes: *Nodes, breaker: whole_8) {
    while !(=(tokens_get_id(tokens, whole_8.>(index_pointer)), breaker)) {
        if =(tokens_get_id(tokens, whole_8.>(index_pointer)), TOKEN_COMMA) {
            increment_whole_8_pointer(index_pointer, 1);
        } else if |(|(=(tokens_get_id(tokens, whole_8.>(index_pointer)), TOKEN_SEMICOLON), =(tokens_get_id(tokens, whole_8.>(index_pointer)), TOKEN_CLOSED_PARENTHESIS)), =(tokens_get_id(tokens, whole_8.>(index_pointer)), TOKEN_CLOSED_CURLY_BRACKETS)) {
            print_token_error_beginning(tokens, whole_8.>(index_pointer));
            println("Unexpected token");
            exit(1);
        } else {
            parse_expression(tokens, index_pointer, nodes);
        };
    };
};

define parse_module = function(tokens: *Tokens, index_pointer: *whole_8, nodes: *Nodes) {
    variable _ = nodes_append(nodes, NODE_MODULE, get_token_location_data(tokens, whole_8.>(index_pointer)));

    increment_whole_8_pointer(index_pointer, 2);

    parse_multiple(tokens, index_pointer, nodes, TOKEN_CLOSED_CURLY_BRACKETS);

    variable _ = nodes_append(nodes, NODE_ENDMODULE, get_token_location_data(tokens, whole_8.>(index_pointer)));

    increment_whole_8_pointer(index_pointer, 1);
};

define parse_individual = function(tokens: *Tokens, index: *whole_8, nodes: *Nodes) {
    variable id = tokens_get_id(tokens, whole_8.>(index));
    if =(id, TOKEN_KEYWORD) {
        variable keyword_data = TokenKeywordData.*cast(tokens_get_pointer_data(tokens, whole_8.>(index)));
        variable keyword = TokenKeywordData.>keyword(keyword_data);

        if string=(keyword, "function") {
            parse_function(tokens, index, nodes);
        };

        if string=(keyword, "structure") {
            parse_structure(tokens, index, nodes);
        };

        if string=(keyword, "global") {
            parse_global(tokens, index, nodes);
        };

        if string=(keyword, "module") {
            parse_module(tokens, index, nodes);
        };

        if string=(keyword, "define") {
            parse_define(tokens, index, nodes);
        };
    } else {
        parse_expression(tokens, index, nodes);
    };
};

define parse_multiple = function(tokens: *Tokens, index: *whole_8, nodes: *Nodes, ending: whole_8) {
    variable tokens_count = Tokens.>index(tokens);
    while &&(!(=(tokens_get_id(tokens, whole_8.>(index)), ending)), <(whole_8.>(index), Tokens.>index(tokens))) {
        parse_individual(tokens, index, nodes);
    };
};

define parse = function(tokens: *Tokens, nodes: *Nodes) {
    variable index = 0;
    parse_multiple(tokens, &(index), nodes, 0);
};
