define expand_macros = function(tokens: *Tokens, tokens_expanded: *Tokens) {
    //map that points macro name to start and end of macro tokens in 'tokens'
    variable macro_starts, macro_ends, macro_bindings = get_macro_definitions(tokens);

    variable i = 0;
    while <(i, Tokens.>index(tokens)) {
        variable id = tokens_get_id(tokens, i);
        variable handled = false;

        if =(id, TOKEN_NAME) {
            variable name_data = TokenNameData.*cast(tokens_get_pointer_data(tokens, i));
            variable name = TokenNameData.>name(name_data);
            if &&(!(=(hashmap_string_get2(&(macro_starts), name), 999)), !(=(tokens_get_id(tokens, -(i, 1)), TOKEN_PERIOD))) {
                if !(tokens_is_keyword(tokens, -(i, 1), "define")) {
                    expand_macro_specific(&(macro_starts), &(macro_ends), &(macro_bindings), tokens, &(i), tokens_expanded);
                } else {
                    Tokens.<index(tokens_expanded, -(Tokens.>index(tokens_expanded), 1));

                    i = +(i, 4);

                    variable inside = 1;
                    while >(inside, 0) {
                        variable id = tokens_get_id(tokens, i);

                        if =(id, TOKEN_OPEN_PARENTHESIS) {
                            inside = +(inside, 1);
                        } else if =(id, TOKEN_CLOSED_PARENTHESIS) {
                            inside = -(inside, 1);
                        };

                        i = +(i, 1);
                    };

                    i = +(i, 2);

                    variable inside = 1;
                    while >(inside, 0) {
                        variable id = tokens_get_id(tokens, i);

                        if =(id, TOKEN_OPEN_CURLY_BRACKETS) {
                            inside = +(inside, 1);
                        } else if =(id, TOKEN_CLOSED_CURLY_BRACKETS) {
                            inside = -(inside, 1);
                        };

                        i = +(i, 1);
                    };
                    i = +(i, 1);
                };
                handled = true;
            };
        };

        if !(handled) {
            tokens_copy_append(tokens, i, tokens_expanded);
            i = +(i, 1);
        };
    };
};

define expand_macro_specific = function(macro_starts: *HashMap, macro_ends: *HashMap, macro_bindings: *HashMap, tokens_in: *Tokens, index_in: *whole_8, tokens_out: *Tokens) {
    if =(tokens_get_id(tokens_in, whole_8.>(index_in)), TOKEN_NAME) {
        variable name_data = TokenNameData.*cast(tokens_get_pointer_data(tokens_in, whole_8.>(index_in)));
        variable name = TokenNameData.>name(name_data);
        if !(=(hashmap_string_get2(macro_starts, name), 999)) {
            variable bindings = *.cast(hashmap_string_get(macro_bindings, name));
            variable bindings_map = hashmap_new(32);

            increment_whole_8_pointer(index_in, 2);

            variable inside = 1;
            variable index = 0;
            while >(inside, 0) {
                variable id = tokens_get_id(tokens_in, whole_8.>(index_in));

                if =(id, TOKEN_OPEN_PARENTHESIS) {
                    inside = +(inside, 1);
                } else if =(id, TOKEN_CLOSED_PARENTHESIS) {
                    inside = -(inside, 1);
                } else if =(id, TOKEN_NAME) {
                    variable name_data = TokenNameData.*cast(tokens_get_pointer_data(tokens_in, whole_8.>(index_in)));
                    variable current_binding = *.cast(array8_get(bindings, index));
                    if =(hashmap_string_get(&(bindings_map), current_binding), 0) {
                        variable new_autobuffer = AutoBufferStack8.*cast(brk_allocate(AutoBufferStack8.size()));
                        AutoBufferStack8.<(new_autobuffer, autobuffer_stack8_new(24));
                        hashmap_string_put(&(bindings_map), current_binding, new_autobuffer);
                    };

                    variable autobuffer = AutoBufferStack8.*cast(hashmap_string_get(&(bindings_map), current_binding));
                    autobuffer_stack8_push(autobuffer, TokenNameData.>name(name_data));
                } else if =(id, TOKEN_COMMA) {
                    index = +(index, 1);
                };

                increment_whole_8_pointer(index_in, 1);
            };

            variable j = whole_8.cast(hashmap_string_get(macro_starts, name));
            variable max = hashmap_string_get(macro_ends, name);
            while <(j, max) {
                variable new_index = Tokens.>index(tokens_out);
                tokens_copy_append(tokens_in, j, tokens_out);

                if =(tokens_get_id(tokens_out, new_index), TOKEN_NAME) {
                    variable name_data = TokenNameData.*cast(tokens_get_pointer_data(tokens_out, new_index));
                    variable name = TokenNameData.>name(name_data);

                    variable binding = AutoBufferStack8.*cast(hashmap_string_get2(&(bindings_map), name));
                    if !(=(binding, 999)) {
                        Tokens.<index(tokens_out, -(Tokens.>index(tokens_out), 1));

                        variable k = 0;
                        while <(k, AutoBufferStack8.>index(binding)) {
                            if >(k, 0) {
                                variable _ = tokens_append(tokens_out, TOKEN_PERIOD, "", 0, 0);
                            };

                            variable new_name = TokenNameData.*cast(tokens_append_data(tokens_out, TOKEN_NAME, "", 0, 0));
                            TokenNameData.<name(new_name, *.cast(autobuffer_stack8_get(binding, k)));
                            k = +(k, 1);
                        };
                    };
                };

                j = +(j, 1);
            };
        };
    };
};

define get_macro_definitions = function(tokens: *Tokens): HashMap, HashMap, HashMap {
    variable macro_starts = hashmap_new(512);
    variable macro_ends = hashmap_new(512);
    variable macro_bindings = hashmap_new(512);

    variable i = 0;
    while <(i, Tokens.>index(tokens)) {
        if tokens_is_keyword(tokens, i, "macro") {
            variable name_token = TokenNameData.*cast(tokens_get_pointer_data(tokens, -(i, 2)));
            variable name = TokenNameData.>name(name_token);

            i = +(i, 2);

            variable bindings = autobuffer_stack8_new(24);
            while !(=(tokens_get_id(tokens, i), TOKEN_CLOSED_PARENTHESIS)) {
                variable id = tokens_get_id(tokens, i);

                if =(id, TOKEN_NAME) {
                    variable name_data = TokenNameData.*cast(tokens_get_pointer_data(tokens, i));
                    autobuffer_stack8_push(&(bindings), TokenNameData.>name(name_data));
                };

                i = +(i, 1);
            };
            hashmap_string_put(&(macro_bindings), name, autobuffer_stack8_get_buffer_pointer(&(bindings)));

            i = +(i, 2);

            hashmap_string_put(&(macro_starts), name, i);

            variable inside = 1;
            while >(inside, 0) {
                variable id = tokens_get_id(tokens, i);

                if =(id, TOKEN_OPEN_CURLY_BRACKETS) {
                    inside = +(inside, 1);
                } else if =(id, TOKEN_CLOSED_CURLY_BRACKETS) {
                    inside = -(inside, 1);
                };

                i = +(i, 1);
            };

            hashmap_string_put(&(macro_ends), name, -(i, 1));
        } else {
            i = +(i, 1);
        };
    };

    return macro_starts, macro_ends, macro_bindings;
};

define tokens_copy_append = function(tokens_from: *Tokens, index: whole_8, tokens_to: *Tokens) {
    variable old_token = tokens_get_pointer(tokens_from, index);
    variable location_data = tokens_get_location_data(tokens_from, index);
    variable new_token = tokens_append(tokens_to, 0, "", 0, 0);
    copy(old_token, new_token, TOKEN_SIZE);
};
