define is_pointer = function(nodes: *Nodes, index: whole_8): boolean {
    return =(nodes_get_id(nodes, index), NODE_POINTER);
};

define add_internal_functions_linux_x86-64 = function(nodes: *Nodes) {
    variable function_arguments = create_size_one_array8_brk_allocate("whole_8");
    variable function_returns = create_size_one_array8_brk_allocate("any_8");
    nodes_append_function(nodes, "@syscall0", function_arguments, function_returns);

    variable function_arguments = create_size_two_array8_brk_allocate("whole_8", "any_8");
    variable function_returns = create_size_one_array8_brk_allocate("any_8");
    nodes_append_function(nodes, "@syscall1", function_arguments, function_returns);

    variable function_arguments = create_size_three_array8_brk_allocate("whole_8", "any_8", "any_8");
    variable function_returns = create_size_one_array8_brk_allocate("any_8");
    nodes_append_function(nodes, "@syscall2", function_arguments, function_returns);

    variable function_arguments = create_size_four_array8_brk_allocate("whole_8", "any_8", "any_8", "any_8");
    variable function_returns2 = create_size_one_array8_brk_allocate("any_8");
    nodes_append_function(nodes, "@syscall3", function_arguments, function_returns);

    variable function_arguments = create_size_five_array8_brk_allocate("whole_8", "any_8", "any_8", "any_8", "any_8");
    variable function_returns = create_size_one_array8_brk_allocate("any_8");
    nodes_append_function(nodes, "@syscall4", function_arguments, function_returns);

    variable function_arguments = create_size_six_array8_brk_allocate("whole_8", "any_8", "any_8", "any_8", "any_8", "any_8");
    variable function_returns = create_size_one_array8_brk_allocate("any_8");
    nodes_append_function(nodes, "@syscall5", function_arguments, function_returns);
};

define is_internal_function_linux_x86-64 = function(name: *): boolean {
    return string_length=(name, "@syscall", 8);
};

define OutputData = structure {
    define_values: HashMap;
    structure_datas: AutoBufferStack8;
    structure_members: AutoBuffer;
};

define output_linux_x86-64_elf = function(nodes: *Nodes, program_data: ProgramData, output_file: *) {
    variable output = autobuffer_new(512);

    variable data_buffer = autobuffer_new(512);
    variable data_index = 0;

    variable instructions_buffer = autobuffer_new(512);
    variable instructions_index = 0;

    variable data_indexes_to_adjust = autobuffer_new(512);
    variable data_indexes_to_adjust_index = 0;

    variable data_indexes_to_adjust_relative = autobuffer_new(512);
    variable data_indexes_to_adjust_relative_index = 0;

    variable bss_indexes_to_adjust = autobuffer_new(512);
    variable bss_indexes_to_adjust_index = 0;

    variable bss_indexes_to_adjust_relative = autobuffer_new(512);
    variable bss_indexes_to_adjust_relative_index = 0;

    variable buffer = autobuffer_new(8388608);
    variable buffer_index = 0;

    variable data_buffer = autobuffer_new(131072);
    variable data_buffer_index = 0;

    variable bss_buffer = autobuffer_new(131072);
    variable bss_buffer_index = 0;

    autobuffer_legacy_push_lea_register8_offset_register8(&(instructions_buffer), &(instructions_index), RSP, 8, RAX);
    autobuffer_legacy_push_mov_register8_register8(&(instructions_buffer), &(instructions_index), RAX, R12);
    autobuffer_legacy_push_mov_register8_register8(&(instructions_buffer), &(instructions_index), RSP, R13);
    autobuffer_legacy_push_pop_register8(&(instructions_buffer), &(instructions_index), RBX);
    autobuffer_legacy_push_mov_register8_register8(&(instructions_buffer), &(instructions_index), RBX, R14);
    autobuffer_legacy_push_push_register8(&(instructions_buffer), &(instructions_index), RAX);
    autobuffer_legacy_push_push_register8(&(instructions_buffer), &(instructions_index), RBX);
    variable main_call = autobuffer_legacy_push_call_near(&(instructions_buffer), &(instructions_index));
    autobuffer_legacy_push_mov_whole_8_register8(&(instructions_buffer), &(instructions_index), RAX, 60);
    autobuffer_legacy_push_mov_whole_8_register8(&(instructions_buffer), &(instructions_index), RDI, 0);
    autobuffer_legacy_push_syscall(&(instructions_buffer), &(instructions_index));

    variable structure_member_types = ProgramData.>structure_member_types(&(program_data));
    variable structure_member_names = ProgramData.>structure_member_names(&(program_data));

    variable structure_datas = ProgramData.>structure_datas(&(program_data));

    variable function_argument_names = ProgramData.>function_argument_names(&(program_data));
    variable function_argument_types = ProgramData.>function_argument_types(&(program_data));
    variable function_return_types = ProgramData.>function_return_types(&(program_data));
    variable function_node_locations = ProgramData.>function_locations(&(program_data));
    variable function_locations = autobuffer_new(1024);
    variable function_local_sizes = autobuffer_new(1024);

    variable internal_function_argument_names = ProgramData.>internal_function_argument_names(&(program_data));
    variable internal_function_argument_types = ProgramData.>internal_function_argument_types(&(program_data));
    variable internal_function_return_types = ProgramData.>internal_function_return_types(&(program_data));
    variable index = 0;

    variable global_types = ProgramData.>global_types(&(program_data));
    variable global_locations = autobuffer_new(512);

    variable define_types = ProgramData.>define_types(&(program_data));
    variable define_values = ProgramData.>define_values(&(program_data));

    variable internal_function_instructions = hashmap_new(1024);
    variable internal_function_instruction_sizes = hashmap_new(1024);

    variable push_functions = autobuffer_new(512);
    variable push_functions2 = autobuffer_new(512);
    variable push_function_targets = autobuffer_new(512);
    variable push_function_targets2 = autobuffer_new(512);
    variable push_function_index = 0;
    variable push_function_index2 = 0;

    variable calls = autobuffer_new(512);
    variable call_targets = autobuffer_new(512);
    variable call_index = 0;

    variable targets = autobuffer_new(512);

    variable jmps = autobuffer_new(512);
    variable jmp_targets = autobuffer_new(512);
    variable jmp_index = 0;

    variable jes = autobuffer_new(512);
    variable je_targets = autobuffer_new(512);
    variable je_index = 0;

    variable define_function_index = autobuffer_array8_length(&(function_argument_names));
    variable define_structure_index = autobuffer_array8_length(&(structure_member_names));
    variable define_global_index = autobuffer_array8_length(&(global_types));

    variable node_count = Nodes.>index(nodes);

    variable i = 0;
    while <(i, define_function_index) {
        variable total = 16;
        variable j = whole_8.cast(autobuffer_array8_get(&(function_node_locations), i));
        while !(=(nodes_get_id(nodes, j), NODE_ENDFUNCTION)) {
            variable id = nodes_get_id(nodes, j);
            variable pointer_data = nodes_get_pointer_data(nodes, j);
            
            if =(id, NODE_DECLARE) {
                variable declare_data = NodeDeclareData.*cast(pointer_data);
                variable declare_name = NodeDeclareData.>name(declare_data);
                variable declare_type = NodeDeclareData.>type(declare_data);
                total = +(total, get_size_linux_x86-643_new(declare_type, nodes, &(program_data)));
            };

            j = +(j, 1);
        };

        autobuffer_array8_set(&(function_local_sizes), i, total);
        i = +(i, 1);
    };

    i = 0;
    while <(i, define_global_index) {
        variable global_type = *.cast(autobuffer_array8_get(&(global_types), i));

        autobuffer_array8_set(&(global_locations), i, bss_buffer_index);

        bss_buffer_index = +(bss_buffer_index, get_size_linux_x86-643_new(global_type, nodes, &(program_data)));
        i = +(i, 1);
    };

    create_structure_internal_functions(&(program_data), nodes, &(internal_function_instructions), &(internal_function_instruction_sizes));

    variable current_function: *;
    variable current_function_id = 999;

    variable variable_scopes_types_map = autobuffer_new(64);
    variable variable_scope_types_pointer = 0;
    variable variable_scopes_indexes_map = autobuffer_new(64);
    variable variable_scope_indexes_pointer = 0;

    variable variable_types_map = hashmap_new(2048);
    variable variable_names = autobuffer_new(2048);
    variable variable_sizes = autobuffer_new(2048);
    variable variable_index = 0;

    variable program_constant_index = 0;

    variable second_defined_function_index = 0;

    variable i = 0;
    while <(i, node_count) {
        variable id = nodes_get_id(nodes, i);
        variable pointer_data = nodes_get_pointer_data(nodes, i);

        variable done_anything = false;

        if =(id, NODE_FUNCTION) {
            variable function_data = NodeFunctionData.*cast(pointer_data);
            variable next_id = nodes_get_id(nodes, +(i, 1));

            if !(=(next_id, NODE_ENDFUNCTION)) {
                variable function_name = NodeFunctionData.>name(function_data);

                variable instructions_index_cached = instructions_index;
                autobuffer_legacy_push_push_register8(&(instructions_buffer), &(instructions_index), RBP);
                autobuffer_legacy_push_mov_register8_register8(&(instructions_buffer), &(instructions_index), RSP, RBP);

                if !(=(function_name, 0)) {
                    current_function = function_name;
                } else {
                    variable locals_size = whole_8.cast(autobuffer_array8_get(&(function_local_sizes), second_defined_function_index));

                    autobuffer_legacy_push_sub_register8_whole_8(&(instructions_buffer), &(instructions_index), RSP, +(locals_size, 16));
                    current_function_id = second_defined_function_index;
                    second_defined_function_index = +(second_defined_function_index, 1);
                };

                autobuffer_reset(&(HashMap.>buffer(&(variable_types_map))));
                autobuffer_reset(&(variable_scopes_indexes_map));
                variable_index = 0;
            };

            done_anything = true;
        } else if =(id, NODE_NUMBER) {
            variable whole_8_data = NodeNumberData.*cast(pointer_data);
            variable value_whole_8 = NodeNumberData.>value(whole_8_data);

            variable size = NodeNumberData.>size(whole_8_data);

            if =(size, 8) {
                autobuffer_legacy_push_mov_whole_8_register8(&(instructions_buffer), &(instructions_index), RAX, value_whole_8);
                autobuffer_legacy_push_sub_register8_whole_8(&(instructions_buffer), &(instructions_index), RSP, 8);
                autobuffer_legacy_push_mov_register8_register8_pointer_offset(&(instructions_buffer), &(instructions_index), RAX, RSP, 0);
            } else if =(size, 4) {
                autobuffer_legacy_push_mov_whole_4_register4(&(instructions_buffer), &(instructions_index), EAX, whole_8_to_whole_4(value_whole_8));
                autobuffer_legacy_push_sub_register8_whole_8(&(instructions_buffer), &(instructions_index), RSP, 4);
                autobuffer_legacy_push_mov_register4_register8_pointer_offset(&(instructions_buffer), &(instructions_index), EAX, RSP, 0);
            } else if =(size, 2) {
                autobuffer_legacy_push_mov_whole_2_register2(&(instructions_buffer), &(instructions_index), AX, whole_8_to_whole_2(value_whole_8));
                autobuffer_legacy_push_sub_register8_whole_8(&(instructions_buffer), &(instructions_index), RSP, 2);
                autobuffer_legacy_push_mov_register2_register8_pointer_offset(&(instructions_buffer), &(instructions_index), AX, RSP, 0);
            } else if =(size, 1) {
                autobuffer_legacy_push_mov_whole_1_register1(&(instructions_buffer), &(instructions_index), AL, whole_1.cast(whole_8_to_whole_1(value_whole_8)));
                autobuffer_legacy_push_sub_register8_whole_8(&(instructions_buffer), &(instructions_index), RSP, 1);
                autobuffer_legacy_push_mov_register1_register8_pointer_offset(&(instructions_buffer), &(instructions_index), AL, RSP, 0);
            };

            done_anything = true;
        } else if =(id, NODE_BOOLEAN) {
            variable boolean_data = NodeBooleanData.*cast(pointer_data);
            variable value_boolean = NodeBooleanData.>value(boolean_data);

            autobuffer_legacy_push_sub_register8_whole_8(&(instructions_buffer), &(instructions_index), RSP, 1);

            if value_boolean {
                autobuffer_legacy_push_mov_whole_8_register8(&(instructions_buffer), &(instructions_index), RAX, 1);
                autobuffer_legacy_push_mov_register1_register8_pointer_offset(&(instructions_buffer), &(instructions_index), AL, RSP, 0);
            } else {
                autobuffer_legacy_push_mov_whole_8_register8(&(instructions_buffer), &(instructions_index), RAX, 0);
                autobuffer_legacy_push_mov_register1_register8_pointer_offset(&(instructions_buffer), &(instructions_index), AL, RSP, 0);
            };

            done_anything = true;
        } else if =(id, NODE_INVOKE) {
            variable invoke_data = NodeInvokeData.*cast(pointer_data);
            variable function_name = NodeInvokeData.>name(invoke_data);
            variable next_id = nodes_get_id(nodes, +(i, 1));

            if =(next_id, NODE_POINTER) {
                variable function_name_new = brk_allocate(+(length(function_name), 2));
                copy("*", function_name_new, 1);
                copy(function_name, *.cast(+(function_name_new, 1)), length(function_name));
                function_name = function_name_new;
            };

            variable done_anything_invoke = false;

            variable memory_function = hashmap_string_get(&(internal_function_instructions), function_name);
            if !(=(memory_function, 0)) {
                variable contents = *.cast(memory_function);
                variable contents_size = whole_8.cast(hashmap_string_get(&(internal_function_instruction_sizes), function_name));
                autobuffer_legacy_push_pointer(&(instructions_buffer), &(instructions_index), contents, contents_size);
                done_anything_invoke = true;
            } else if string=(function_name, "*cast") {
                done_anything_invoke = true;
            } else if string=(function_name, "cast") {
                done_anything_invoke = true;
            } else if string_length=(function_name, "@cast_", 6) {
                done_anything_invoke = true;
            } else if string_length=(function_name, "=_", 2) {
                variable size = get_size_linux_x86-643_new(+(function_name, 2), nodes, &(program_data));

                if =(size, 8) {
                    autobuffer_legacy_push_pop_register8(&(instructions_buffer), &(instructions_index), RAX);
                    autobuffer_legacy_push_pop_register8(&(instructions_buffer), &(instructions_index), RBX);
                    autobuffer_legacy_push_cmp_register8_register8(&(instructions_buffer), &(instructions_index), RAX, RBX);
                } else if =(size, 4) {
                    autobuffer_legacy_push_mov_register8_pointer_offset_register4(&(instructions_buffer), &(instructions_index), RSP, 0, EAX);
                    autobuffer_legacy_push_add_register8_whole_8(&(instructions_buffer), &(instructions_index), RSP, 4);
                    autobuffer_legacy_push_mov_register8_pointer_offset_register4(&(instructions_buffer), &(instructions_index), RSP, 0, EBX);
                    autobuffer_legacy_push_add_register8_whole_8(&(instructions_buffer), &(instructions_index), RSP, 4);
                    autobuffer_legacy_push_cmp_register4_register4(&(instructions_buffer), &(instructions_index), EAX, EBX);
                } else if =(size, 2) {
                    autobuffer_legacy_push_mov_register8_pointer_offset_register2(&(instructions_buffer), &(instructions_index), RSP, 0, AX);
                    autobuffer_legacy_push_add_register8_whole_8(&(instructions_buffer), &(instructions_index), RSP, 2);
                    autobuffer_legacy_push_mov_register8_pointer_offset_register2(&(instructions_buffer), &(instructions_index), RSP, 0, BX);
                    autobuffer_legacy_push_add_register8_whole_8(&(instructions_buffer), &(instructions_index), RSP, 2);
                    autobuffer_legacy_push_cmp_register2_register2(&(instructions_buffer), &(instructions_index), AX, BX);
                } else if =(size, 1) {
                    autobuffer_legacy_push_mov_register8_pointer_offset_register1(&(instructions_buffer), &(instructions_index), RSP, 0, AL);
                    autobuffer_legacy_push_add_register8_whole_8(&(instructions_buffer), &(instructions_index), RSP, 1);
                    autobuffer_legacy_push_mov_register8_pointer_offset_register1(&(instructions_buffer), &(instructions_index), RSP, 0, BL);
                    autobuffer_legacy_push_add_register8_whole_8(&(instructions_buffer), &(instructions_index), RSP, 1);
                    autobuffer_legacy_push_cmp_register1_register1(&(instructions_buffer), &(instructions_index), AL, BL);
                };

                autobuffer_legacy_push_mov_whole_8_register8(&(instructions_buffer), &(instructions_index), RCX, 0);
                autobuffer_legacy_push_mov_whole_8_register8(&(instructions_buffer), &(instructions_index), RBX, 1);
                autobuffer_legacy_push_cmove_register8_register8(&(instructions_buffer), &(instructions_index), RCX, RBX);
                autobuffer_legacy_push_sub_register8_whole_8(&(instructions_buffer), &(instructions_index), RSP, 1);
                autobuffer_legacy_push_mov_register1_register8_pointer_offset(&(instructions_buffer), &(instructions_index), CL, RSP, 0);

                done_anything_invoke = true;
            } else if string_length=(function_name, ">_", 2) {
                variable size = get_size_linux_x86-643_new(+(function_name, 2), nodes, &(program_data));
                variable signed = =(is_signed(+(function_name, 2), nodes), 1);

                if =(size, 8) {
                    autobuffer_legacy_push_pop_register8(&(instructions_buffer), &(instructions_index), RAX);
                    autobuffer_legacy_push_pop_register8(&(instructions_buffer), &(instructions_index), RBX);
                    autobuffer_legacy_push_cmp_register8_register8(&(instructions_buffer), &(instructions_index), RAX, RBX);
                } else if =(size, 4) {
                    autobuffer_legacy_push_mov_register8_pointer_offset_register4(&(instructions_buffer), &(instructions_index), RSP, 0, EAX);
                    autobuffer_legacy_push_add_register8_whole_8(&(instructions_buffer), &(instructions_index), RSP, 4);
                    autobuffer_legacy_push_mov_register8_pointer_offset_register4(&(instructions_buffer), &(instructions_index), RSP, 0, EBX);
                    autobuffer_legacy_push_add_register8_whole_8(&(instructions_buffer), &(instructions_index), RSP, 4);
                    autobuffer_legacy_push_cmp_register4_register4(&(instructions_buffer), &(instructions_index), EAX, EBX);
                } else if =(size, 2) {
                    autobuffer_legacy_push_mov_register8_pointer_offset_register2(&(instructions_buffer), &(instructions_index), RSP, 0, AX);
                    autobuffer_legacy_push_add_register8_whole_8(&(instructions_buffer), &(instructions_index), RSP, 2);
                    autobuffer_legacy_push_mov_register8_pointer_offset_register2(&(instructions_buffer), &(instructions_index), RSP, 0, BX);
                    autobuffer_legacy_push_add_register8_whole_8(&(instructions_buffer), &(instructions_index), RSP, 2);
                    autobuffer_legacy_push_cmp_register2_register2(&(instructions_buffer), &(instructions_index), AX, BX);
                } else if =(size, 1) {
                    autobuffer_legacy_push_mov_register8_pointer_offset_register1(&(instructions_buffer), &(instructions_index), RSP, 0, AL);
                    autobuffer_legacy_push_add_register8_whole_8(&(instructions_buffer), &(instructions_index), RSP, 1);
                    autobuffer_legacy_push_mov_register8_pointer_offset_register1(&(instructions_buffer), &(instructions_index), RSP, 0, BL);
                    autobuffer_legacy_push_add_register8_whole_8(&(instructions_buffer), &(instructions_index), RSP, 1);
                    autobuffer_legacy_push_cmp_register1_register1(&(instructions_buffer), &(instructions_index), AL, BL);
                };

                autobuffer_legacy_push_mov_whole_8_register8(&(instructions_buffer), &(instructions_index), RCX, 0);
                autobuffer_legacy_push_mov_whole_8_register8(&(instructions_buffer), &(instructions_index), RBX, 1);
                if signed {
                    autobuffer_legacy_push_cmovl_register8_register8(&(instructions_buffer), &(instructions_index), RCX, RBX);
                } else {
                    autobuffer_legacy_push_cmovb_register8_register8(&(instructions_buffer), &(instructions_index), RCX, RBX);
                };
                autobuffer_legacy_push_sub_register8_whole_8(&(instructions_buffer), &(instructions_index), RSP, 1);
                autobuffer_legacy_push_mov_register1_register8_pointer_offset(&(instructions_buffer), &(instructions_index), CL, RSP, 0);

                done_anything_invoke = true;
            } else if string_length=(function_name, "<_", 2) {
                variable size = get_size_linux_x86-643_new(+(function_name, 2), nodes, &(program_data));
                variable signed = =(is_signed(+(function_name, 2), nodes), 1);

                if =(size, 8) {
                    autobuffer_legacy_push_pop_register8(&(instructions_buffer), &(instructions_index), RAX);
                    autobuffer_legacy_push_pop_register8(&(instructions_buffer), &(instructions_index), RBX);
                    autobuffer_legacy_push_cmp_register8_register8(&(instructions_buffer), &(instructions_index), RAX, RBX);
                } else if =(size, 4) {
                    autobuffer_legacy_push_mov_register8_pointer_offset_register4(&(instructions_buffer), &(instructions_index), RSP, 0, EAX);
                    autobuffer_legacy_push_add_register8_whole_8(&(instructions_buffer), &(instructions_index), RSP, 4);
                    autobuffer_legacy_push_mov_register8_pointer_offset_register4(&(instructions_buffer), &(instructions_index), RSP, 0, EBX);
                    autobuffer_legacy_push_add_register8_whole_8(&(instructions_buffer), &(instructions_index), RSP, 4);
                    autobuffer_legacy_push_cmp_register4_register4(&(instructions_buffer), &(instructions_index), EAX, EBX);
                } else if =(size, 2) {
                    autobuffer_legacy_push_mov_register8_pointer_offset_register2(&(instructions_buffer), &(instructions_index), RSP, 0, AX);
                    autobuffer_legacy_push_add_register8_whole_8(&(instructions_buffer), &(instructions_index), RSP, 2);
                    autobuffer_legacy_push_mov_register8_pointer_offset_register2(&(instructions_buffer), &(instructions_index), RSP, 0, BX);
                    autobuffer_legacy_push_add_register8_whole_8(&(instructions_buffer), &(instructions_index), RSP, 2);
                    autobuffer_legacy_push_cmp_register2_register2(&(instructions_buffer), &(instructions_index), AX, BX);
                } else if =(size, 1) {
                    autobuffer_legacy_push_mov_register8_pointer_offset_register1(&(instructions_buffer), &(instructions_index), RSP, 0, AL);
                    autobuffer_legacy_push_add_register8_whole_8(&(instructions_buffer), &(instructions_index), RSP, 1);
                    autobuffer_legacy_push_mov_register8_pointer_offset_register1(&(instructions_buffer), &(instructions_index), RSP, 0, BL);
                    autobuffer_legacy_push_add_register8_whole_8(&(instructions_buffer), &(instructions_index), RSP, 1);
                    autobuffer_legacy_push_cmp_register1_register1(&(instructions_buffer), &(instructions_index), AL, BL);
                };

                autobuffer_legacy_push_mov_whole_8_register8(&(instructions_buffer), &(instructions_index), RCX, 0);
                autobuffer_legacy_push_mov_whole_8_register8(&(instructions_buffer), &(instructions_index), RBX, 1);
                if signed {
                    autobuffer_legacy_push_cmovg_register8_register8(&(instructions_buffer), &(instructions_index), RCX, RBX);
                } else {
                    autobuffer_legacy_push_cmova_register8_register8(&(instructions_buffer), &(instructions_index), RCX, RBX);
                };
                autobuffer_legacy_push_sub_register8_whole_8(&(instructions_buffer), &(instructions_index), RSP, 1);
                autobuffer_legacy_push_mov_register1_register8_pointer_offset(&(instructions_buffer), &(instructions_index), CL, RSP, 0);

                done_anything_invoke = true;
            } else if string=(function_name, "get_rsp") {
                autobuffer_legacy_push_push_register8(&(instructions_buffer), &(instructions_index), RSP);
                done_anything_invoke = true;
            } else if string=(function_name, "!") {
                autobuffer_legacy_push_mov_whole_8_register8(&(instructions_buffer), &(instructions_index), RAX, 0);
                autobuffer_legacy_push_mov_register8_pointer_offset_register1(&(instructions_buffer), &(instructions_index), RSP, 0, AL);
                autobuffer_legacy_push_add_register8_whole_8(&(instructions_buffer), &(instructions_index), RSP, 1);
                //TODO compare directly with whole_8
                autobuffer_legacy_push_mov_whole_8_register8(&(instructions_buffer), &(instructions_index), RBX, 0);
                autobuffer_legacy_push_cmp_register8_register8(&(instructions_buffer), &(instructions_index), RAX, RBX);
                autobuffer_legacy_push_mov_whole_8_register8(&(instructions_buffer), &(instructions_index), RCX, 0);
                autobuffer_legacy_push_mov_whole_8_register8(&(instructions_buffer), &(instructions_index), RBX, 1);
                autobuffer_legacy_push_cmove_register8_register8(&(instructions_buffer), &(instructions_index), RCX, RBX);
                autobuffer_legacy_push_sub_register8_whole_8(&(instructions_buffer), &(instructions_index), RSP, 1);
                autobuffer_legacy_push_mov_register1_register8_pointer_offset(&(instructions_buffer), &(instructions_index), CL, RSP, 0);

                done_anything_invoke = true;
            } else if string_length=(function_name, "+_", 2) {
                variable size = get_size_linux_x86-643_new(+(function_name, 2), nodes, &(program_data));

                if =(size, 8) {
                    autobuffer_legacy_push_pop_register8(&(instructions_buffer), &(instructions_index), RAX);
                    autobuffer_legacy_push_pop_register8(&(instructions_buffer), &(instructions_index), RBX);
                    autobuffer_legacy_push_add_register8_register8(&(instructions_buffer), &(instructions_index), RAX, RBX);
                    autobuffer_legacy_push_push_register8(&(instructions_buffer), &(instructions_index), RAX);
                } else if =(size, 4) {
                    autobuffer_legacy_push_mov_register8_pointer_offset_register4(&(instructions_buffer), &(instructions_index), RSP, 0, EAX);
                    autobuffer_legacy_push_add_register8_whole_8(&(instructions_buffer), &(instructions_index), RSP, 4);
                    autobuffer_legacy_push_mov_register8_pointer_offset_register4(&(instructions_buffer), &(instructions_index), RSP, 0, EBX);
                    autobuffer_legacy_push_add_register8_whole_8(&(instructions_buffer), &(instructions_index), RSP, 4);
                    autobuffer_legacy_push_add_register4_register4(&(instructions_buffer), &(instructions_index), EAX, EBX);
                    autobuffer_legacy_push_sub_register8_whole_8(&(instructions_buffer), &(instructions_index), RSP, 4);
                    autobuffer_legacy_push_mov_register4_register8_pointer_offset(&(instructions_buffer), &(instructions_index), EAX, RSP, 0);
                } else if =(size, 2) {
                    autobuffer_legacy_push_mov_register8_pointer_offset_register2(&(instructions_buffer), &(instructions_index), RSP, 0, AX);
                    autobuffer_legacy_push_add_register8_whole_8(&(instructions_buffer), &(instructions_index), RSP, 2);
                    autobuffer_legacy_push_mov_register8_pointer_offset_register2(&(instructions_buffer), &(instructions_index), RSP, 0, BX);
                    autobuffer_legacy_push_add_register8_whole_8(&(instructions_buffer), &(instructions_index), RSP, 2);
                    autobuffer_legacy_push_add_register2_register2(&(instructions_buffer), &(instructions_index), AX, BX);
                    autobuffer_legacy_push_sub_register8_whole_8(&(instructions_buffer), &(instructions_index), RSP, 2);
                    autobuffer_legacy_push_mov_register2_register8_pointer_offset(&(instructions_buffer), &(instructions_index), AX, RSP, 0);
                } else if =(size, 1) {
                    autobuffer_legacy_push_mov_register8_pointer_offset_register1(&(instructions_buffer), &(instructions_index), RSP, 0, AL);
                    autobuffer_legacy_push_add_register8_whole_8(&(instructions_buffer), &(instructions_index), RSP, 1);
                    autobuffer_legacy_push_mov_register8_pointer_offset_register1(&(instructions_buffer), &(instructions_index), RSP, 0, BL);
                    autobuffer_legacy_push_add_register8_whole_8(&(instructions_buffer), &(instructions_index), RSP, 1);
                    autobuffer_legacy_push_add_register1_register1(&(instructions_buffer), &(instructions_index), AL, BL);
                    autobuffer_legacy_push_sub_register8_whole_8(&(instructions_buffer), &(instructions_index), RSP, 1);
                    autobuffer_legacy_push_mov_register1_register8_pointer_offset(&(instructions_buffer), &(instructions_index), AL, RSP, 0);
                };
                done_anything_invoke = true;
            } else if string_length=(function_name, "-_", 2) {
                variable size = get_size_linux_x86-643_new(+(function_name, 2), nodes, &(program_data));

                if =(size, 8) {
                    autobuffer_legacy_push_pop_register8(&(instructions_buffer), &(instructions_index), RAX);
                    autobuffer_legacy_push_pop_register8(&(instructions_buffer), &(instructions_index), RBX);
                    autobuffer_legacy_push_sub_register8_register8(&(instructions_buffer), &(instructions_index), RBX, RAX);
                    autobuffer_legacy_push_push_register8(&(instructions_buffer), &(instructions_index), RBX);
                } else if =(size, 4) {
                    autobuffer_legacy_push_mov_register8_pointer_offset_register4(&(instructions_buffer), &(instructions_index), RSP, 0, EAX);
                    autobuffer_legacy_push_add_register8_whole_8(&(instructions_buffer), &(instructions_index), RSP, 4);
                    autobuffer_legacy_push_mov_register8_pointer_offset_register4(&(instructions_buffer), &(instructions_index), RSP, 0, EBX);
                    autobuffer_legacy_push_add_register8_whole_8(&(instructions_buffer), &(instructions_index), RSP, 4);
                    autobuffer_legacy_push_sub_register4_register4(&(instructions_buffer), &(instructions_index), EBX, EAX);
                    autobuffer_legacy_push_sub_register8_whole_8(&(instructions_buffer), &(instructions_index), RSP, 4);
                    autobuffer_legacy_push_mov_register4_register8_pointer_offset(&(instructions_buffer), &(instructions_index), EBX, RSP, 0);
                } else if =(size, 2) {
                    autobuffer_legacy_push_mov_register8_pointer_offset_register2(&(instructions_buffer), &(instructions_index), RSP, 0, AX);
                    autobuffer_legacy_push_add_register8_whole_8(&(instructions_buffer), &(instructions_index), RSP, 2);
                    autobuffer_legacy_push_mov_register8_pointer_offset_register2(&(instructions_buffer), &(instructions_index), RSP, 0, BX);
                    autobuffer_legacy_push_add_register8_whole_8(&(instructions_buffer), &(instructions_index), RSP, 2);
                    autobuffer_legacy_push_sub_register2_register2(&(instructions_buffer), &(instructions_index), BX, AX);
                    autobuffer_legacy_push_sub_register8_whole_8(&(instructions_buffer), &(instructions_index), RSP, 2);
                    autobuffer_legacy_push_mov_register2_register8_pointer_offset(&(instructions_buffer), &(instructions_index), BX, RSP, 0);
                } else if =(size, 1) {
                    autobuffer_legacy_push_mov_register8_pointer_offset_register1(&(instructions_buffer), &(instructions_index), RSP, 0, AL);
                    autobuffer_legacy_push_add_register8_whole_8(&(instructions_buffer), &(instructions_index), RSP, 1);
                    autobuffer_legacy_push_mov_register8_pointer_offset_register1(&(instructions_buffer), &(instructions_index), RSP, 0, BL);
                    autobuffer_legacy_push_add_register8_whole_8(&(instructions_buffer), &(instructions_index), RSP, 1);
                    autobuffer_legacy_push_sub_register1_register1(&(instructions_buffer), &(instructions_index), BL, AL);
                    autobuffer_legacy_push_sub_register8_whole_8(&(instructions_buffer), &(instructions_index), RSP, 1);
                    autobuffer_legacy_push_mov_register1_register8_pointer_offset(&(instructions_buffer), &(instructions_index), BL, RSP, 0);
                };
                done_anything_invoke = true;
            } else if string_length=(function_name, "*_", 2) {
                variable size = get_size_linux_x86-643_new(+(function_name, 2), nodes, &(program_data));
                variable signed = =(is_signed(+(function_name, 2), nodes), 1);

                if =(size, 8) {
                    autobuffer_legacy_push_pop_register8(&(instructions_buffer), &(instructions_index), RAX);
                    autobuffer_legacy_push_pop_register8(&(instructions_buffer), &(instructions_index), RBX);
                    if signed {
                        autobuffer_legacy_push_imul_register8(&(instructions_buffer), &(instructions_index), RBX);
                    } else {
                        autobuffer_legacy_push_mul_register8(&(instructions_buffer), &(instructions_index), RBX);
                    };
                    autobuffer_legacy_push_push_register8(&(instructions_buffer), &(instructions_index), RAX);
                } else if =(size, 4) {
                    autobuffer_legacy_push_mov_register8_pointer_offset_register4(&(instructions_buffer), &(instructions_index), RSP, 0, EAX);
                    autobuffer_legacy_push_add_register8_whole_8(&(instructions_buffer), &(instructions_index), RSP, 4);
                    autobuffer_legacy_push_mov_register8_pointer_offset_register4(&(instructions_buffer), &(instructions_index), RSP, 0, EBX);
                    autobuffer_legacy_push_add_register8_whole_8(&(instructions_buffer), &(instructions_index), RSP, 4);
                    if signed {
                        autobuffer_legacy_push_imul_register4(&(instructions_buffer), &(instructions_index), EBX);
                    } else {
                        autobuffer_legacy_push_mul_register4(&(instructions_buffer), &(instructions_index), EBX);
                    };
                    autobuffer_legacy_push_sub_register8_whole_8(&(instructions_buffer), &(instructions_index), RSP, 4);
                    autobuffer_legacy_push_mov_register4_register8_pointer_offset(&(instructions_buffer), &(instructions_index), EAX, RSP, 0);
                } else if =(size, 2) {
                    autobuffer_legacy_push_mov_register8_pointer_offset_register2(&(instructions_buffer), &(instructions_index), RSP, 0, AX);
                    autobuffer_legacy_push_add_register8_whole_8(&(instructions_buffer), &(instructions_index), RSP, 2);
                    autobuffer_legacy_push_mov_register8_pointer_offset_register2(&(instructions_buffer), &(instructions_index), RSP, 0, BX);
                    autobuffer_legacy_push_add_register8_whole_8(&(instructions_buffer), &(instructions_index), RSP, 2);
                    if signed {
                        autobuffer_legacy_push_imul_register2(&(instructions_buffer), &(instructions_index), BX);
                    } else {
                        autobuffer_legacy_push_mul_register2(&(instructions_buffer), &(instructions_index), BX);
                    };
                    autobuffer_legacy_push_sub_register8_whole_8(&(instructions_buffer), &(instructions_index), RSP, 2);
                    autobuffer_legacy_push_mov_register2_register8_pointer_offset(&(instructions_buffer), &(instructions_index), AX, RSP, 0);
                } else if =(size, 1) {
                    autobuffer_legacy_push_mov_register8_pointer_offset_register1(&(instructions_buffer), &(instructions_index), RSP, 0, AL);
                    autobuffer_legacy_push_add_register8_whole_8(&(instructions_buffer), &(instructions_index), RSP, 1);
                    autobuffer_legacy_push_mov_register8_pointer_offset_register1(&(instructions_buffer), &(instructions_index), RSP, 0, BL);
                    autobuffer_legacy_push_add_register8_whole_8(&(instructions_buffer), &(instructions_index), RSP, 1);
                    if signed {
                        autobuffer_legacy_push_imul_register1(&(instructions_buffer), &(instructions_index), BL);
                    } else {
                        autobuffer_legacy_push_mul_register1(&(instructions_buffer), &(instructions_index), BL);
                    };
                    autobuffer_legacy_push_sub_register8_whole_8(&(instructions_buffer), &(instructions_index), RSP, 1);
                    autobuffer_legacy_push_mov_register1_register8_pointer_offset(&(instructions_buffer), &(instructions_index), AL, RSP, 0);
                };
                done_anything_invoke = true;
            } else if string_length=(function_name, "/_", 2) {
                variable size = get_size_linux_x86-643_new(+(function_name, 2), nodes, &(program_data));
                variable signed = =(is_signed(+(function_name, 2), nodes), 1);

                if =(size, 8) {
                    autobuffer_legacy_push_pop_register8(&(instructions_buffer), &(instructions_index), RBX);
                    autobuffer_legacy_push_pop_register8(&(instructions_buffer), &(instructions_index), RAX);
                    if signed {
                        autobuffer_legacy_push_cqo(&(instructions_buffer), &(instructions_index));
                        autobuffer_legacy_push_idiv_register8(&(instructions_buffer), &(instructions_index), RBX);
                    } else {
                        autobuffer_legacy_push_mov_whole_8_register8(&(instructions_buffer), &(instructions_index), RDX, 0);
                        autobuffer_legacy_push_div_register8(&(instructions_buffer), &(instructions_index), RBX);
                    };
                    autobuffer_legacy_push_push_register8(&(instructions_buffer), &(instructions_index), RAX);
                } else if =(size, 4) {
                    autobuffer_legacy_push_mov_register8_pointer_offset_register4(&(instructions_buffer), &(instructions_index), RSP, 0, EBX);
                    autobuffer_legacy_push_add_register8_whole_8(&(instructions_buffer), &(instructions_index), RSP, 4);
                    autobuffer_legacy_push_mov_register8_pointer_offset_register4(&(instructions_buffer), &(instructions_index), RSP, 0, EAX);
                    autobuffer_legacy_push_add_register8_whole_8(&(instructions_buffer), &(instructions_index), RSP, 4);
                    if signed {
                        autobuffer_legacy_push_cdq(&(instructions_buffer), &(instructions_index));
                        autobuffer_legacy_push_idiv_register4(&(instructions_buffer), &(instructions_index), EBX);
                    } else {
                        autobuffer_legacy_push_mov_whole_4_register4(&(instructions_buffer), &(instructions_index), EDX, 0_whole_4);
                        autobuffer_legacy_push_div_register4(&(instructions_buffer), &(instructions_index), EBX);
                    };
                    autobuffer_legacy_push_sub_register8_whole_8(&(instructions_buffer), &(instructions_index), RSP, 4);
                    autobuffer_legacy_push_mov_register4_register8_pointer_offset(&(instructions_buffer), &(instructions_index), EAX, RSP, 0);
                } else if =(size, 2) {
                    autobuffer_legacy_push_mov_register8_pointer_offset_register2(&(instructions_buffer), &(instructions_index), RSP, 0, BX);
                    autobuffer_legacy_push_add_register8_whole_8(&(instructions_buffer), &(instructions_index), RSP, 2);
                    autobuffer_legacy_push_mov_register8_pointer_offset_register2(&(instructions_buffer), &(instructions_index), RSP, 0, AX);
                    autobuffer_legacy_push_add_register8_whole_8(&(instructions_buffer), &(instructions_index), RSP, 2);
                    if signed {
                        autobuffer_legacy_push_cwd(&(instructions_buffer), &(instructions_index));
                        autobuffer_legacy_push_idiv_register2(&(instructions_buffer), &(instructions_index), BX);
                    } else {
                        autobuffer_legacy_push_mov_whole_2_register2(&(instructions_buffer), &(instructions_index), DX, 0_whole_2);
                        autobuffer_legacy_push_div_register2(&(instructions_buffer), &(instructions_index), BX);
                    };
                    autobuffer_legacy_push_sub_register8_whole_8(&(instructions_buffer), &(instructions_index), RSP, 2);
                    autobuffer_legacy_push_mov_register2_register8_pointer_offset(&(instructions_buffer), &(instructions_index), AX, RSP, 0);
                } else if =(size, 1) {
                    autobuffer_legacy_push_mov_register8_pointer_offset_register1(&(instructions_buffer), &(instructions_index), RSP, 0, BL);
                    autobuffer_legacy_push_add_register8_whole_8(&(instructions_buffer), &(instructions_index), RSP, 1);
                    autobuffer_legacy_push_mov_whole_8_register8(&(instructions_buffer), &(instructions_index), RAX, 0);
                    autobuffer_legacy_push_mov_register8_pointer_offset_register1(&(instructions_buffer), &(instructions_index), RSP, 0, AL);
                    autobuffer_legacy_push_add_register8_whole_8(&(instructions_buffer), &(instructions_index), RSP, 1);
                    if signed {
                        autobuffer_legacy_push_cbw(&(instructions_buffer), &(instructions_index));
                        autobuffer_legacy_push_idiv_register1(&(instructions_buffer), &(instructions_index), BL);
                    } else {
                        autobuffer_legacy_push_mov_whole_1_register1(&(instructions_buffer), &(instructions_index), DL, 0_whole_1);
                        autobuffer_legacy_push_div_register1(&(instructions_buffer), &(instructions_index), BL);
                    };
                    autobuffer_legacy_push_sub_register8_whole_8(&(instructions_buffer), &(instructions_index), RSP, 1);
                    autobuffer_legacy_push_mov_register1_register8_pointer_offset(&(instructions_buffer), &(instructions_index), AL, RSP, 0);
                };
                done_anything_invoke = true;
            } else if string_length=(function_name, "%_", 2) {
                variable size = get_size_linux_x86-643_new(+(function_name, 2), nodes, &(program_data));
                variable signed = =(is_signed(+(function_name, 2), nodes), 1);

                if =(size, 8) {
                    autobuffer_legacy_push_pop_register8(&(instructions_buffer), &(instructions_index), RBX);
                    autobuffer_legacy_push_pop_register8(&(instructions_buffer), &(instructions_index), RAX);
                    if signed {
                        autobuffer_legacy_push_cqo(&(instructions_buffer), &(instructions_index));
                        autobuffer_legacy_push_idiv_register8(&(instructions_buffer), &(instructions_index), RBX);
                    } else {
                        autobuffer_legacy_push_mov_whole_8_register8(&(instructions_buffer), &(instructions_index), RDX, 0);
                        autobuffer_legacy_push_div_register8(&(instructions_buffer), &(instructions_index), RBX);
                    };
                    autobuffer_legacy_push_push_register8(&(instructions_buffer), &(instructions_index), RDX);
                } else if =(size, 4) {
                    autobuffer_legacy_push_mov_register8_pointer_offset_register4(&(instructions_buffer), &(instructions_index), RSP, 0, EBX);
                    autobuffer_legacy_push_add_register8_whole_8(&(instructions_buffer), &(instructions_index), RSP, 4);
                    autobuffer_legacy_push_mov_register8_pointer_offset_register4(&(instructions_buffer), &(instructions_index), RSP, 0, EAX);
                    autobuffer_legacy_push_add_register8_whole_8(&(instructions_buffer), &(instructions_index), RSP, 4);
                    if signed {
                        autobuffer_legacy_push_cdq(&(instructions_buffer), &(instructions_index));
                        autobuffer_legacy_push_idiv_register4(&(instructions_buffer), &(instructions_index), EBX);
                    } else {
                        autobuffer_legacy_push_mov_whole_4_register4(&(instructions_buffer), &(instructions_index), EDX, 0_whole_4);
                        autobuffer_legacy_push_div_register4(&(instructions_buffer), &(instructions_index), EBX);
                    };
                    autobuffer_legacy_push_sub_register8_whole_8(&(instructions_buffer), &(instructions_index), RSP, 4);
                    autobuffer_legacy_push_mov_register4_register8_pointer_offset(&(instructions_buffer), &(instructions_index), EDX, RSP, 0);
                } else if =(size, 2) {
                    autobuffer_legacy_push_mov_register8_pointer_offset_register2(&(instructions_buffer), &(instructions_index), RSP, 0, BX);
                    autobuffer_legacy_push_add_register8_whole_8(&(instructions_buffer), &(instructions_index), RSP, 2);
                    autobuffer_legacy_push_mov_register8_pointer_offset_register2(&(instructions_buffer), &(instructions_index), RSP, 0, AX);
                    autobuffer_legacy_push_add_register8_whole_8(&(instructions_buffer), &(instructions_index), RSP, 2);
                    if signed {
                        autobuffer_legacy_push_cwd(&(instructions_buffer), &(instructions_index));
                        autobuffer_legacy_push_idiv_register2(&(instructions_buffer), &(instructions_index), BX);
                    } else {
                        autobuffer_legacy_push_mov_whole_2_register2(&(instructions_buffer), &(instructions_index), DX, 0_whole_2);
                        autobuffer_legacy_push_div_register2(&(instructions_buffer), &(instructions_index), BX);
                    };
                    autobuffer_legacy_push_sub_register8_whole_8(&(instructions_buffer), &(instructions_index), RSP, 2);
                    autobuffer_legacy_push_mov_register2_register8_pointer_offset(&(instructions_buffer), &(instructions_index), DX, RSP, 0);
                } else if =(size, 1) {
                    autobuffer_legacy_push_mov_register8_pointer_offset_register1(&(instructions_buffer), &(instructions_index), RSP, 0, BL);
                    autobuffer_legacy_push_add_register8_whole_8(&(instructions_buffer), &(instructions_index), RSP, 1);
                    autobuffer_legacy_push_mov_whole_8_register8(&(instructions_buffer), &(instructions_index), RAX, 0);
                    autobuffer_legacy_push_mov_register8_pointer_offset_register1(&(instructions_buffer), &(instructions_index), RSP, 0, AL);
                    autobuffer_legacy_push_add_register8_whole_8(&(instructions_buffer), &(instructions_index), RSP, 1);
                    if signed {
                        autobuffer_legacy_push_cbw(&(instructions_buffer), &(instructions_index));
                        autobuffer_legacy_push_idiv_register1(&(instructions_buffer), &(instructions_index), BL);
                    } else {
                        autobuffer_legacy_push_mov_whole_1_register1(&(instructions_buffer), &(instructions_index), DL, 0_whole_1);
                        autobuffer_legacy_push_div_register1(&(instructions_buffer), &(instructions_index), BL);
                    };
                    autobuffer_legacy_push_sub_register8_whole_8(&(instructions_buffer), &(instructions_index), RSP, 1);
                    autobuffer_legacy_push_mov_register1_register8_pointer_offset(&(instructions_buffer), &(instructions_index), AH, RSP, 0);
                };
                done_anything_invoke = true;
            } else if string=(function_name, "|") {
                autobuffer_legacy_push_mov_register8_pointer_offset_register1(&(instructions_buffer), &(instructions_index), RSP, 0, AL);
                autobuffer_legacy_push_add_register8_whole_8(&(instructions_buffer), &(instructions_index), RSP, 1);
                autobuffer_legacy_push_mov_register8_pointer_offset_register1(&(instructions_buffer), &(instructions_index), RSP, 0, BL);
                autobuffer_legacy_push_add_register8_whole_8(&(instructions_buffer), &(instructions_index), RSP, 1);
                autobuffer_legacy_push_sub_register8_whole_8(&(instructions_buffer), &(instructions_index), RSP, 1);
                autobuffer_legacy_push_or_register1_register1(&(instructions_buffer), &(instructions_index), AL, BL);
                autobuffer_legacy_push_mov_register1_register8_pointer_offset(&(instructions_buffer), &(instructions_index), AL, RSP, 0);
                done_anything_invoke = true;
            } else if string=(function_name, "&&") {
                autobuffer_legacy_push_mov_register8_pointer_offset_register1(&(instructions_buffer), &(instructions_index), RSP, 0, AL);
                autobuffer_legacy_push_add_register8_whole_8(&(instructions_buffer), &(instructions_index), RSP, 1);
                autobuffer_legacy_push_mov_register8_pointer_offset_register1(&(instructions_buffer), &(instructions_index), RSP, 0, BL);
                autobuffer_legacy_push_add_register8_whole_8(&(instructions_buffer), &(instructions_index), RSP, 1);
                autobuffer_legacy_push_sub_register8_whole_8(&(instructions_buffer), &(instructions_index), RSP, 1);
                autobuffer_legacy_push_and_register1_register1(&(instructions_buffer), &(instructions_index), AL, BL);
                autobuffer_legacy_push_mov_register1_register8_pointer_offset(&(instructions_buffer), &(instructions_index), AL, RSP, 0);
                done_anything_invoke = true;
            } else if string=(function_name, "@syscall0") {
                autobuffer_legacy_push_pop_register8(&(instructions_buffer), &(instructions_index), RAX);
                autobuffer_legacy_push_syscall(&(instructions_buffer), &(instructions_index));
                autobuffer_legacy_push_push_register8(&(instructions_buffer), &(instructions_index), RAX);
                done_anything_invoke = true;
            } else if string=(function_name, "@syscall1") {
                autobuffer_legacy_push_pop_register8(&(instructions_buffer), &(instructions_index), RDI);
                autobuffer_legacy_push_pop_register8(&(instructions_buffer), &(instructions_index), RAX);
                autobuffer_legacy_push_syscall(&(instructions_buffer), &(instructions_index));
                autobuffer_legacy_push_push_register8(&(instructions_buffer), &(instructions_index), RAX);
                done_anything_invoke = true;
            } else if string=(function_name, "@syscall2") {
                autobuffer_legacy_push_pop_register8(&(instructions_buffer), &(instructions_index), RSI);
                autobuffer_legacy_push_pop_register8(&(instructions_buffer), &(instructions_index), RDI);
                autobuffer_legacy_push_pop_register8(&(instructions_buffer), &(instructions_index), RAX);
                autobuffer_legacy_push_syscall(&(instructions_buffer), &(instructions_index));
                autobuffer_legacy_push_push_register8(&(instructions_buffer), &(instructions_index), RAX);
                done_anything_invoke = true;
            } else if string=(function_name, "@syscall3") {
                autobuffer_legacy_push_pop_register8(&(instructions_buffer), &(instructions_index), RDX);
                autobuffer_legacy_push_pop_register8(&(instructions_buffer), &(instructions_index), RSI);
                autobuffer_legacy_push_pop_register8(&(instructions_buffer), &(instructions_index), RDI);
                autobuffer_legacy_push_pop_register8(&(instructions_buffer), &(instructions_index), RAX);
                autobuffer_legacy_push_syscall(&(instructions_buffer), &(instructions_index));
                autobuffer_legacy_push_push_register8(&(instructions_buffer), &(instructions_index), RAX);
                done_anything_invoke = true;
            } else if string=(function_name, "@syscall5") {
                autobuffer_legacy_push_pop_register8(&(instructions_buffer), &(instructions_index), R8);
                autobuffer_legacy_push_pop_register8(&(instructions_buffer), &(instructions_index), R10);
                autobuffer_legacy_push_pop_register8(&(instructions_buffer), &(instructions_index), RDX);
                autobuffer_legacy_push_pop_register8(&(instructions_buffer), &(instructions_index), RSI);
                autobuffer_legacy_push_pop_register8(&(instructions_buffer), &(instructions_index), RDI);
                autobuffer_legacy_push_pop_register8(&(instructions_buffer), &(instructions_index), RAX);
                autobuffer_legacy_push_syscall(&(instructions_buffer), &(instructions_index));
                autobuffer_legacy_push_push_register8(&(instructions_buffer), &(instructions_index), RAX);
                done_anything_invoke = true;
            } else {
                variable push_function_instruction = autobuffer_legacy_push_push_instruction_pointer(&(instructions_buffer), &(instructions_index));
                autobuffer_legacy_push_pop_register8(&(instructions_buffer), &(instructions_index), RAX);
                autobuffer_legacy_push_call_far_register8(&(instructions_buffer), &(instructions_index), RAX);

                // hack, should not need to cast
                autobuffer_array8_set(&(push_functions), push_function_index, any_8.cast(push_function_instruction));
                autobuffer_array8_set(&(push_function_targets), push_function_index, function_name);

                push_function_index = +(push_function_index, 1);
            };
            done_anything = true;
        } else if =(id, NODE_INVOKE_POINTER) {
            autobuffer_legacy_push_pop_register8(&(instructions_buffer), &(instructions_index), RAX);
            autobuffer_legacy_push_call_far_register8(&(instructions_buffer), &(instructions_index), RAX);
            done_anything = true;
        } else if =(id, NODE_STRING) {
            variable string_data = NodeStringData.*cast(pointer_data);
            variable string_value = NodeStringData.>value(string_data);
            variable string_id = program_constant_index;
            program_constant_index = +(program_constant_index, 1);

            variable id_string = any_24.>0();
            whole_8_to_string(string_id, &(id_string));

            variable string_data_index = autobuffer_legacy_push_data_string(&(data_buffer), &(data_buffer_index), string_value);

            autobuffer_legacy_push_push_data(&(instructions_buffer), &(instructions_index), &(data_indexes_to_adjust), &(data_indexes_to_adjust_index), string_data_index);

            done_anything = true;
        } else if =(id, NODE_DECLARE) {
            variable declare_data = NodeDeclareData.*cast(pointer_data);
            variable variable_name = NodeDeclareData.>name(declare_data);
            variable variable_type = NodeDeclareData.>type(declare_data);

            hashmap_string_put(&(variable_types_map), variable_name, variable_type);
            autobuffer_array8_set(&(variable_names), variable_index, variable_name);
            autobuffer_array8_set(&(variable_sizes), variable_index, get_size_linux_x86-643_new(variable_type, nodes, &(program_data)));
            variable_index = +(variable_index, 1);

            hashmap_string_put(HashMap.*cast(autobuffer_array8_get(&(variable_scopes_types_map), -(variable_scope_types_pointer, 1))), variable_name, variable_type);

            done_anything = true;
        } else if =(id, NODE_ASSIGN) {
            variable assign_data = NodeAssignData.*cast(pointer_data);
            variable variable_name = NodeAssignData.>name(assign_data);

            variable scope_index = -(variable_scope_types_pointer, 1);
            variable variable_type = *.cast(0);
            while &&(=(variable_type, 0), <(scope_index, variable_scope_types_pointer)) {
                variable_type = *.cast(hashmap_string_get(HashMap.*cast(autobuffer_array8_get(&(variable_scopes_types_map), scope_index)), variable_name));
                scope_index = -(scope_index, 1);
            };
            scope_index = +(scope_index, 1);
            
            variable scope_variable_index = whole_8.cast(autobuffer_array8_get(&(variable_scopes_indexes_map), scope_index));

            if !(=(variable_type, 0)) {
                variable size = get_size_linux_x86-643_new(variable_type, nodes, &(program_data));

                variable location = 0;
                variable j = 0;
                while true {
                    if !(<(j, variable_index)) {
                        break;
                    } else if !(|(!(string=(variable_name, *.cast(autobuffer_array8_get(&(variable_names), j)))), <(j, scope_variable_index))) {
                        break;
                    } else {
                        location = +(location, autobuffer_array8_get(&(variable_sizes), j));
                        j = +(j, 1);
                    };
                };

                variable j = 0;
                while <(j, size) {
                    variable done_anything_assign = false;

                    if >(-(size, j), 7) {
                        autobuffer_legacy_push_mov_register8_pointer_offset_register8(&(instructions_buffer), &(instructions_index), RSP, j, RAX);
                        autobuffer_legacy_push_mov_register8_register8_pointer_offset(&(instructions_buffer), &(instructions_index), RAX, RBP, -(0, -(+(size, location), j)));

                        j = +(j, 8);
                        done_anything_assign = true;
                    };
                    if &&(>(-(size, j), 3), !(done_anything_assign)) {
                        autobuffer_legacy_push_mov_register8_pointer_offset_register4(&(instructions_buffer), &(instructions_index), RSP, j, EAX);
                        autobuffer_legacy_push_mov_register4_register8_pointer_offset(&(instructions_buffer), &(instructions_index), EAX, RBP, -(0, -(+(size, location), j)));

                        j = +(j, 4);
                        done_anything_assign = true;
                    };
                    if &&(>(-(size, j), 1), !(done_anything_assign)) {
                        autobuffer_legacy_push_mov_register8_pointer_offset_register2(&(instructions_buffer), &(instructions_index), RSP, j, AX);
                        autobuffer_legacy_push_mov_register2_register8_pointer_offset(&(instructions_buffer), &(instructions_index), AX, RBP, -(0, -(+(size, location), j)));

                        j = +(j, 2);
                        done_anything_assign = true;
                    };
                    if &&(>(-(size, j), 0), !(done_anything_assign)) {
                        autobuffer_legacy_push_mov_register8_pointer_offset_register1(&(instructions_buffer), &(instructions_index), RSP, j, AL);
                        autobuffer_legacy_push_mov_register1_register8_pointer_offset(&(instructions_buffer), &(instructions_index), AL, RBP, -(0, -(+(size, location), j)));

                        j = +(j, 1);
                        done_anything_assign = true;
                    };
                };
                
                autobuffer_legacy_push_add_register8_whole_8(&(instructions_buffer), &(instructions_index), RSP, size);
            } else {
                variable global_name = brk_allocate(+(length(variable_name), 2));
                copy("_", global_name, 1);
                copy(variable_name, *.cast(+(global_name, 1)), length(variable_name));

                variable define_values = &(ProgramData.>define_values(&(program_data)));

                variable global_index = whole_8.cast(hashmap_string_get(define_values, variable_name));
                variable_type = *.cast(autobuffer_array8_get(&(global_types), global_index));
                variable global_location = BssIndex.cast(autobuffer_array8_get(&(global_locations), global_index));

                variable size = get_size_linux_x86-642(variable_type, nodes);

                variable j = 0;
                while <(j, size) {
                    variable done_anything_assign = false;

                    if >(-(size, j), 7) {
                        autobuffer_legacy_push_mov_register8_pointer_offset_register8(&(instructions_buffer), &(instructions_index), RSP, j, RAX);
                        autobuffer_legacy_push_mov_register8_bss_pointer_offset(&(instructions_buffer), &(instructions_index), &(bss_indexes_to_adjust_relative), &(bss_indexes_to_adjust_relative_index), RAX, global_location, j);

                        j = +(j, 8);
                        done_anything_assign = true;
                    };
                    if &&(>(-(size, j), 3), !(done_anything_assign)) {
                        //autobuffer_legacy_push_string(&(buffer), &(buffer_index), "mov eax, [rsp+");
                        //autobuffer_legacy_push_whole_8(&(buffer), &(buffer_index), j);
                        //autobuffer_legacy_push_string_with_newline(&(buffer), &(buffer_index), "]");

                        //autobuffer_legacy_push_string(&(buffer), &(buffer_index), "mov [");
                        //autobuffer_legacy_push_string(&(buffer), &(buffer_index), global_name);
                        //autobuffer_legacy_push_string(&(buffer), &(buffer_index), "+");
                        //autobuffer_legacy_push_whole_8(&(buffer), &(buffer_index), j);
                        //autobuffer_legacy_push_string_with_newline(&(buffer), &(buffer_index), "], eax");

                        j = +(j, 4);
                        done_anything_assign = true;
                    };
                    if &&(>(-(size, j), 1), !(done_anything_assign)) {
                        //autobuffer_legacy_push_string(&(buffer), &(buffer_index), "mov ax, [rsp+");
                        //autobuffer_legacy_push_whole_8(&(buffer), &(buffer_index), j);
                        //autobuffer_legacy_push_string_with_newline(&(buffer), &(buffer_index), "]");

                        //autobuffer_legacy_push_string(&(buffer), &(buffer_index), "mov [");
                        //autobuffer_legacy_push_string(&(buffer), &(buffer_index), global_name);
                        //autobuffer_legacy_push_string(&(buffer), &(buffer_index), "+");
                        //autobuffer_legacy_push_whole_8(&(buffer), &(buffer_index), j);
                        //autobuffer_legacy_push_string_with_newline(&(buffer), &(buffer_index), "], ax");

                        j = +(j, 2);
                        done_anything_assign = true;
                    };
                    if &&(>(-(size, j), 0), !(done_anything_assign)) {
                        //autobuffer_legacy_push_string(&(buffer), &(buffer_index), "mov al, [rsp+");
                        //autobuffer_legacy_push_whole_8(&(buffer), &(buffer_index), j);
                        //autobuffer_legacy_push_string_with_newline(&(buffer), &(buffer_index), "]");

                        //autobuffer_legacy_push_string(&(buffer), &(buffer_index), "mov [");
                        //autobuffer_legacy_push_string(&(buffer), &(buffer_index), global_name);
                        //autobuffer_legacy_push_string(&(buffer), &(buffer_index), "+");
                        //autobuffer_legacy_push_whole_8(&(buffer), &(buffer_index), j);
                        //autobuffer_legacy_push_string_with_newline(&(buffer), &(buffer_index), "], al");

                        j = +(j, 1);
                        done_anything_assign = true;
                    };
                };

                autobuffer_legacy_push_add_register8_whole_8(&(instructions_buffer), &(instructions_index), RSP, size);
            };

            done_anything = true;
        } else if =(id, NODE_RETRIEVE) {
            variable next_id = nodes_get_id(nodes, +(i, 1));

            variable variable_name = NodeRetrieveData.>name(NodeRetrieveData.*cast(nodes_get_pointer_data(nodes, i)));

            variable scope_index = -(variable_scope_types_pointer, 1);
            variable variable_type = *.cast(0);
            while &&(=(variable_type, 0), <(scope_index, variable_scope_types_pointer)) {
                variable_type = *.cast(hashmap_string_get(HashMap.*cast(autobuffer_array8_get(&(variable_scopes_types_map), scope_index)), variable_name));
                scope_index = -(scope_index, 1);
            };
            scope_index = +(scope_index, 1);

            variable scope_variable_index = whole_8.cast(autobuffer_array8_get(&(variable_scopes_indexes_map), scope_index));

            if !(=(variable_type, 0)) {
                variable size = get_size_linux_x86-643_new(variable_type, nodes, &(program_data));

                variable location = 0;
                variable j = 0;
                while true {
                    // changed from 'variable_index' to 'scope_variable_index', appears to fix a bug
                    if !(<(j, variable_index)) {
                        break;
                    } else if !(|(!(string=(variable_name, *.cast(autobuffer_array8_get(&(variable_names), j)))), <(j, scope_variable_index))) {
                        break;
                    } else {
                        location = +(location, autobuffer_array8_get(&(variable_sizes), j));
                        j = +(j, 1);
                    };
                };

                if is_pointer(nodes, +(i, 1)) {
                    variable thing = instructions_index;
                    autobuffer_legacy_push_lea_register8_offset_register8(&(instructions_buffer), &(instructions_index), RBP, -(0, +(size, location)), RAX);
                    autobuffer_legacy_push_push_register8(&(instructions_buffer), &(instructions_index), RAX);
                } else {
                    autobuffer_legacy_push_sub_register8_whole_8(&(instructions_buffer), &(instructions_index), RSP, size);

                    variable j = 0;
                    while <(j, size) {
                        variable done_anything_assign = false;

                        if >(-(size, j), 7) {
                            autobuffer_legacy_push_mov_register8_pointer_offset_register8(&(instructions_buffer), &(instructions_index), RBP, -(0, -(+(size, location), j)), RAX);
                            autobuffer_legacy_push_mov_register8_register8_pointer_offset(&(instructions_buffer), &(instructions_index), RAX, RSP, j);
                            j = +(j, 8);
                            done_anything_assign = true;
                        };
                        if &&(>(-(size, j), 3), !(done_anything_assign)) {
                            autobuffer_legacy_push_mov_register8_pointer_offset_register4(&(instructions_buffer), &(instructions_index), RBP, -(0, -(+(size, location), j)), EAX);
                            autobuffer_legacy_push_mov_register4_register8_pointer_offset(&(instructions_buffer), &(instructions_index), EAX, RSP, j);
                            j = +(j, 4);
                            done_anything_assign = true;
                        };
                        if &&(>(-(size, j), 1), !(done_anything_assign)) {
                            autobuffer_legacy_push_mov_register8_pointer_offset_register2(&(instructions_buffer), &(instructions_index), RBP, -(0, -(+(size, location), j)), AX);
                            autobuffer_legacy_push_mov_register2_register8_pointer_offset(&(instructions_buffer), &(instructions_index), AX, RSP, j);

                            j = +(j, 2);
                            done_anything_assign = true;
                        };
                        if &&(>(-(size, j), 0), !(done_anything_assign)) {
                            autobuffer_legacy_push_mov_register8_pointer_offset_register1(&(instructions_buffer), &(instructions_index), RBP, -(0, -(+(size, location), j)), AL);
                            autobuffer_legacy_push_mov_register1_register8_pointer_offset(&(instructions_buffer), &(instructions_index), AL, RSP, j);

                            j = +(j, 1);
                            done_anything_assign = true;
                        };
                    };
                };

            } else {
                variable function_argument_names2 = *.cast(autobuffer_array8_get(&(function_argument_names), current_function_id));
                variable function_arguments2 = *.cast(autobuffer_array8_get(&(function_argument_types), current_function_id));

                variable_type = stringarray_get(function_argument_names2, function_arguments2, variable_name, array8_length(function_arguments2));

                if !(=(variable_type, 0)) {
                    variable size = get_size_linux_x86-643_new(variable_type, nodes, &(program_data));
                    variable location = get_size_multiple_reversed_linux_x86-643_new(function_arguments2, stringarray_get_index(function_argument_names2, variable_name, array8_length(function_argument_names2)), nodes, &(program_data));

                    if =(next_id, NODE_POINTER) {
                        autobuffer_legacy_push_lea_register8_offset_register8(&(instructions_buffer), &(instructions_index), RBP, +(16, location), RAX);
                        autobuffer_legacy_push_push_register8(&(instructions_buffer), &(instructions_index), RAX);
                    } else {
                        autobuffer_legacy_push_sub_register8_whole_8(&(instructions_buffer), &(instructions_index), RSP, size);

                        variable j = 0;
                        while <(j, size) {
                            variable done_anything_assign = false;
                            if >(-(size, j), 7) {
                                autobuffer_legacy_push_mov_register8_pointer_offset_register8(&(instructions_buffer), &(instructions_index), RBP, +(+(16, location), j), RAX);
                                autobuffer_legacy_push_mov_register8_register8_pointer_offset(&(instructions_buffer), &(instructions_index), RAX, RSP, j);
                                j = +(j, 8);
                                done_anything_assign = true;
                            };
                            if &&(>(-(size, j), 3), !(done_anything_assign)) {
                                autobuffer_legacy_push_mov_register8_pointer_offset_register4(&(instructions_buffer), &(instructions_index), RBP, +(+(16, location), j), EAX);
                                autobuffer_legacy_push_mov_register4_register8_pointer_offset(&(instructions_buffer), &(instructions_index), EAX, RSP, j);
                                j = +(j, 4);
                                done_anything_assign = true;
                            };
                            if &&(>(-(size, j), 1), !(done_anything_assign)) {
                                autobuffer_legacy_push_mov_register8_pointer_offset_register2(&(instructions_buffer), &(instructions_index), RBP, +(+(16, location), j), AX);
                                autobuffer_legacy_push_mov_register2_register8_pointer_offset(&(instructions_buffer), &(instructions_index), AX, RSP, j);
                                j = +(j, 2);
                                done_anything_assign = true;
                            };
                            if &&(>(-(size, j), 0), !(done_anything_assign)) {
                                autobuffer_legacy_push_mov_register8_pointer_offset_register1(&(instructions_buffer), &(instructions_index), RBP, +(+(16, location), j), AL);
                                autobuffer_legacy_push_mov_register1_register8_pointer_offset(&(instructions_buffer), &(instructions_index), AL, RSP, j);
                                j = +(j, 1);
                                done_anything_assign = true;
                            };
                        };
                    };
                } else {
                    variable define_type = *.cast(hashmap_string_get(&(define_types), variable_name));
                    if !(=(define_type, 0)) {
                        if string_length=(define_type, "global[", 7) {
                            variable define_values = &(ProgramData.>define_values(&(program_data)));
                            variable define_value = hashmap_string_get2(define_values, variable_name);
                            if !(=(define_value, 999)) {
                                variable_type = *.cast(autobuffer_array8_get(&(global_types), whole_8.cast(define_value)));
                            };
                        };
                    };

                    if !(=(variable_type, 0)) {
                        variable global_name = brk_allocate(+(length(variable_name), 2));
                        copy("_", global_name, 1);
                        copy(variable_name, *.cast(+(global_name, 1)), length(variable_name));

                        variable size = get_size_linux_x86-643_new(variable_type, nodes, &(program_data));

                        variable define_values = &(ProgramData.>define_values(&(program_data)));
                        variable define_value = whole_8.cast(hashmap_string_get2(define_values, variable_name));
                        variable global_index2 = BssIndex.cast(autobuffer_array8_get(&(global_locations), define_value));

                        if =(next_id, NODE_POINTER) {
                            autobuffer_legacy_push_push_bss(&(instructions_buffer), &(instructions_index), &(bss_indexes_to_adjust), &(bss_indexes_to_adjust_index), global_index2);
                        } else {
                            autobuffer_legacy_push_sub_register8_whole_8(&(instructions_buffer), &(instructions_index), RSP, size);

                            variable j = 0;
                            while <(j, size) {
                                variable done_anything_assign = false;

                                if >(-(size, j), 7) {
                                    autobuffer_legacy_push_mov_bss_offset_pointer_register8(&(instructions_buffer), &(instructions_index), &(bss_indexes_to_adjust_relative), &(bss_indexes_to_adjust_relative_index),  global_index2, j, RAX);
                                    autobuffer_legacy_push_mov_register8_register8_pointer_offset(&(instructions_buffer), &(instructions_index), RAX, RSP, j);
                                    j = +(j, 8);
                                    done_anything_assign = true;
                                };
                                if &&(>(-(size, j), 3), !(done_anything_assign)) {
                                    autobuffer_legacy_push_mov_bss_offset_pointer_register4(&(instructions_buffer), &(instructions_index), &(bss_indexes_to_adjust_relative), &(bss_indexes_to_adjust_relative_index),  global_index2, j, EAX);
                                    autobuffer_legacy_push_mov_register4_register8_pointer_offset(&(instructions_buffer), &(instructions_index), EAX, RSP, j);
                                    j = +(j, 4);
                                    done_anything_assign = true;
                                };
                                if &&(>(-(size, j), 1), !(done_anything_assign)) {
                                    autobuffer_legacy_push_mov_bss_offset_pointer_register2(&(instructions_buffer), &(instructions_index), &(bss_indexes_to_adjust_relative), &(bss_indexes_to_adjust_relative_index),  global_index2, j, AX);
                                    autobuffer_legacy_push_mov_register2_register8_pointer_offset(&(instructions_buffer), &(instructions_index), AX, RSP, j);
                                    j = +(j, 2);
                                    done_anything_assign = true;
                                };
                                if &&(>(-(size, j), 0), !(done_anything_assign)) {
                                    autobuffer_legacy_push_mov_bss_offset_pointer_register1(&(instructions_buffer), &(instructions_index), &(bss_indexes_to_adjust_relative), &(bss_indexes_to_adjust_relative_index),  global_index2, j, AL);
                                    autobuffer_legacy_push_mov_register1_register8_pointer_offset(&(instructions_buffer), &(instructions_index), AL, RSP, j);
                                    j = +(j, 1);
                                    done_anything_assign = true;
                                };
                            };
                        };
                    } else {
                        variable_type = *.cast(hashmap_string_get(&(define_types), variable_name));

                        if !(=(variable_type, 0)) {
                            variable constant_name = brk_allocate(+(length(variable_name), 2));
                            copy("_", constant_name, 1);
                            copy(variable_name, *.cast(+(constant_name, 1)), length(variable_name));

                            variable define_values = &(ProgramData.>define_values(&(program_data)));
                            variable define_value = hashmap_string_get(define_values, variable_name);

                            if string_length=(variable_type, "*function", 9) {
                                variable push_function_instruction = autobuffer_legacy_push_push_instruction_pointer(&(instructions_buffer), &(instructions_index));
                                autobuffer_array8_set(&(push_functions2), push_function_index2, any_8.cast(push_function_instruction));
                                autobuffer_array8_set(&(push_function_targets2), push_function_index2, define_value);

                                push_function_index2 = +(push_function_index2, 1);
                            } else if string_length=(variable_type, "structure", 9) {
                            } else {
                                variable size = get_size_linux_x86-643_new(variable_type, nodes, &(program_data));
                                if =(size, 8) {
                                    autobuffer_legacy_push_mov_whole_8_register8(&(instructions_buffer), &(instructions_index), RAX, whole_8.cast(define_value));
                                    autobuffer_legacy_push_sub_register8_whole_8(&(instructions_buffer), &(instructions_index), RSP, 8);
                                    autobuffer_legacy_push_mov_register8_register8_pointer_offset(&(instructions_buffer), &(instructions_index), RAX, RSP, 0);
                                } else if =(size, 1) {
                                    autobuffer_legacy_push_mov_whole_1_register1(&(instructions_buffer), &(instructions_index), AL, whole_8_to_whole_1(whole_8.cast(define_value)));
                                    autobuffer_legacy_push_sub_register8_whole_8(&(instructions_buffer), &(instructions_index), RSP, 1);
                                    autobuffer_legacy_push_mov_register1_register8_pointer_offset(&(instructions_buffer), &(instructions_index), AL, RSP, 0);
                                } else {
                                    println("no size");
                                };
                            };
                        } else {
                            if !(=(hashmap_string_get(&(internal_function_argument_types), variable_name), 0)) {
                                variable push_function_instruction = autobuffer_legacy_push_push_instruction_pointer(&(instructions_buffer), &(instructions_index));
                                autobuffer_array8_set(&(push_functions), push_function_index, any_8.cast(push_function_instruction));
                                autobuffer_array8_set(&(push_function_targets), push_function_index, variable_name);

                                push_function_index = +(push_function_index, 1);
                            };
                        };
                    };

                };
                
            };

            done_anything = true;
        } else if =(id, NODE_RETURN) {
            variable arguments_size = get_size_multiple_linux_x86-643_new(*.cast(autobuffer_array8_get(&(function_argument_types), current_function_id)), 999, nodes, &(program_data));
            variable returns_size = get_size_multiple_linux_x86-643_new(*.cast(autobuffer_array8_get(&(function_return_types), current_function_id)), 999, nodes, &(program_data));
            variable returns_size_rounded = returns_size;
            if !(=(%(returns_size_rounded, 8), 0)) {
                returns_size_rounded = +(returns_size_rounded, -(8, %(returns_size, 8)));
            };

            variable j = 8;
            variable k = +(returns_size, 8);

            variable thing = instructions_index;
            autobuffer_legacy_push_mov_register8_pointer_offset_register8(&(instructions_buffer), &(instructions_index), RBP, 8, RCX);
            autobuffer_legacy_push_mov_register8_pointer_offset_register8(&(instructions_buffer), &(instructions_index), RBP, 0, RDX);

            returns_size = +(returns_size, 8);

            while <(j, returns_size) {
                variable done_anything_assign = false;

                if >(-(returns_size, j), 7) {
                    k = -(k, 8);

                    autobuffer_legacy_push_mov_register8_pointer_offset_register8(&(instructions_buffer), &(instructions_index), RSP, -(-(returns_size, j), 8), RAX);
                    autobuffer_legacy_push_mov_register8_register8_pointer_offset(&(instructions_buffer), &(instructions_index), RAX, RBP, +(+(16, +(-(arguments_size, returns_size), k)), 0));

                    j = +(j, 8);
                };
                if &&(>(-(returns_size, j), 3), !(done_anything_assign)) {
                    k = -(k, 4);

                    autobuffer_legacy_push_mov_register8_pointer_offset_register4(&(instructions_buffer), &(instructions_index), RSP, -(-(returns_size, j), 4), EAX);
                    autobuffer_legacy_push_mov_register4_register8_pointer_offset(&(instructions_buffer), &(instructions_index), EAX, RBP, +(+(16, +(-(arguments_size, returns_size), k)), 0));

                    j = +(j, 4);
                };
                if &&(>(-(returns_size, j), 1), !(done_anything_assign)) {
                    k = -(k, 2);

                    autobuffer_legacy_push_mov_register8_pointer_offset_register2(&(instructions_buffer), &(instructions_index), RSP, -(-(returns_size, j), 2), AX);
                    autobuffer_legacy_push_mov_register2_register8_pointer_offset(&(instructions_buffer), &(instructions_index), AX, RBP, +(+(16, +(-(arguments_size, returns_size), k)), 0));

                    j = +(j, 2);
                };
                if &&(>(-(returns_size, j), 0), !(done_anything_assign)) {
                    k = -(k, 1);

                    autobuffer_legacy_push_mov_register8_pointer_offset_register1(&(instructions_buffer), &(instructions_index), RSP, -(-(returns_size, j), 1), AL);
                    autobuffer_legacy_push_mov_register1_register8_pointer_offset(&(instructions_buffer), &(instructions_index), AL, RBP, +(+(16, +(-(arguments_size, returns_size), k)), 0));

                    j = +(j, 1);
                };
            };

            autobuffer_legacy_push_mov_register8_register8(&(instructions_buffer), &(instructions_index), RBP, RSP);

            autobuffer_legacy_push_add_register8_whole_8(&(instructions_buffer), &(instructions_index), RSP, +(+(16, +(-(arguments_size, returns_size), k)), 0));

            returns_size = -(returns_size, 8);

            autobuffer_legacy_push_push_register8(&(instructions_buffer), &(instructions_index), RDX);
            autobuffer_legacy_push_pop_register8(&(instructions_buffer), &(instructions_index), RBP);
            autobuffer_legacy_push_push_register8(&(instructions_buffer), &(instructions_index), RCX);
            autobuffer_legacy_push_ret(&(instructions_buffer), &(instructions_index));
                
            done_anything = true;
        } else if =(id, NODE_POINTER) {
            done_anything = true;
        } else if =(id, NODE_JUMP_CONDITIONAL) {
            variable jump_conditional_data = NodeJumpConditionalData.*cast(pointer_data);
            variable target = NodeJumpConditionalData.>target_id(jump_conditional_data);
            variable conditional = NodeJumpConditionalData.>desired_state(jump_conditional_data);

            autobuffer_legacy_push_mov_whole_8_register8(&(instructions_buffer), &(instructions_index), RAX, 0);
            autobuffer_legacy_push_mov_register8_pointer_offset_register1(&(instructions_buffer), &(instructions_index), RSP, 0, AL);
            autobuffer_legacy_push_add_register8_whole_8(&(instructions_buffer), &(instructions_index), RSP, 1);
            autobuffer_legacy_push_mov_whole_8_register8(&(instructions_buffer), &(instructions_index), RBX, 0);
            autobuffer_legacy_push_mov_whole_8_register8(&(instructions_buffer), &(instructions_index), RCX, 1);

            if conditional {
                autobuffer_legacy_push_cmp_register8_register8(&(instructions_buffer), &(instructions_index), RAX, RCX);
                done_anything = true;
            } else {
                autobuffer_legacy_push_cmp_register8_register8(&(instructions_buffer), &(instructions_index), RAX, RBX);
            };

            variable jump_instruction = autobuffer_legacy_push_je_near(&(instructions_buffer), &(instructions_index));
            autobuffer_array8_set(&(jes), je_index, any_8.cast(jump_instruction));
            autobuffer_array8_set(&(je_targets), je_index, target);

            je_index = +(je_index, 1);
            done_anything = true;
        } else if =(id, NODE_JUMP) {
            variable jump_data = NodeJumpData.*cast(pointer_data);
            variable target = NodeJumpData.>target_id(jump_data);

            variable jump_instruction = autobuffer_legacy_push_jmp_near(&(instructions_buffer), &(instructions_index));
            autobuffer_array8_set(&(jmps), jmp_index, any_8.cast(jump_instruction));
            autobuffer_array8_set(&(jmp_targets), jmp_index, target);

            jmp_index = +(jmp_index, 1);
            done_anything = true;
        } else if =(id, NODE_TARGET) {
            variable target_data = NodeTargetData.*cast(pointer_data);
            variable target = NodeTargetData.>id(target_data);
            
            autobuffer_array8_set(&(targets), target, any_8.cast(get_instruction(&(instructions_buffer), &(instructions_index))));
            done_anything = true;
        } else if =(id, NODE_SCOPE) {
            variable new_hashmap = hashmap_new(512);
            variable allocated = brk_allocate(24);
            HashMap.<(HashMap.*cast(allocated), new_hashmap);
            autobuffer_stack8_legacy_push(&(variable_scopes_types_map), &(variable_scope_types_pointer), allocated);

            autobuffer_stack8_legacy_push(&(variable_scopes_indexes_map), &(variable_scope_indexes_pointer), variable_index);
        } else if =(id, NODE_ENDSCOPE) {
            variable _ = autobuffer_stack8_legacy_pop(&(variable_scopes_types_map), &(variable_scope_types_pointer));
            variable _ = autobuffer_stack8_legacy_pop(&(variable_scopes_indexes_map), &(variable_scope_indexes_pointer));
        } else if =(id, NODE_ENDFUNCTION) {
            current_function = *.cast(0);
            done_anything = true;
        } else if =(id, NODE_STRUCTURE) {
            done_anything = true;
        } else if =(id, NODE_GLOBAL) {
            variable global_data = NodeGlobalData.*cast(pointer_data);
            variable name = NodeGlobalData.>name(global_data);
            variable type = NodeGlobalData.>type(global_data);
            
            variable size = get_size_linux_x86-642(type, nodes);
            
            done_anything = true;
        } else if =(id, NODE_DEFINE) {
            variable define_data = NodeDefineData.*cast(pointer_data);
            variable define_name = NodeDefineData.>name(define_data);
            variable define_type = NodeDefineData.>type(define_data);
            
            if string_length=(define_type, "*function", 9) {
                variable define_values = &(ProgramData.>define_values(&(program_data)));
                autobuffer_array8_set(&(function_locations), whole_8.cast(hashmap_string_get(define_values, define_name)), instructions_index);
            };
            done_anything = true;
        } else if =(id, NODE_STARTIFBLOCK) {
            done_anything = true;
        } else if =(id, NODE_ENDIFBLOCK) {
            done_anything = true;
        } else if =(id, NODE_ENDSTATEMENT) {
            done_anything = true;
        } else if =(id, NODE_ENDDEFINE) {
            done_anything = true;
        } else if =(id, NODE_SKIP) {
            done_anything = true;
        } else {
            print("Unhandled ");
            print_whole_8(id);
            println("");
        };

        i = +(i, 1);
    };

    variable define_values = &(ProgramData.>define_values(&(program_data)));
    variable main_function_index = whole_8.cast(hashmap_string_get(define_values, "main"));
    variable main_index = autobuffer_array8_get(&(function_locations), main_function_index);
    set_call_value(&(instructions_buffer), main_call, InstructionIndex.cast(main_index));

    variable start_address = 4194304;

    variable i = 0;
    while <(i, push_function_index2) {
        variable push_function_instruction2 = InstructionIndex.cast(autobuffer_array8_get(&(push_functions2), i));
        variable push_function_id = whole_8.cast(autobuffer_array8_get(&(push_function_targets2), i));

        variable function_index = InstructionIndex.cast(autobuffer_array8_get(&(function_locations), push_function_id));

        variable value_new = +(function_index, 232);

        set_control_flow_value_absolute(&(instructions_buffer), +(push_function_instruction2, 1), +(start_address, value_new));
        i = +(i, 1);
    };

    variable i = 0;
    while <(i, jmp_index) {
        variable jmp_instruction2 = InstructionIndex.cast(autobuffer_array8_get(&(jmps), i));
        variable jmp_target = whole_8.cast(autobuffer_array8_get(&(jmp_targets), i));
        variable target_location = autobuffer_array8_get(&(targets), jmp_target);
        set_jmp_value(&(instructions_buffer), jmp_instruction2, InstructionIndex.cast(target_location));
        i = +(i, 1);
    };

    variable i = 0;
    while <(i, je_index) {
        variable jmp_instruction2 = InstructionIndex.cast(autobuffer_array8_get(&(jes), i));
        variable jmp_target = whole_8.cast(autobuffer_array8_get(&(je_targets), i));
        variable target_location = autobuffer_array8_get(&(targets), jmp_target);
        set_je_value(&(instructions_buffer), jmp_instruction2, InstructionIndex.cast(target_location));
        i = +(i, 1);
    };

    variable asm_output = autobuffer_new(32);
    variable asm_output_length: whole_8 = 0;
    autobuffer_legacy_push_string(&(asm_output), &(asm_output_length), output_file);

    variable i = 0;
    while <(i, data_indexes_to_adjust_index) {
        variable index = whole_8.cast(autobuffer_array8_get(&(data_indexes_to_adjust), i));
        variable value_new = +(whole_8.cast(whole_4_to_whole_8(autobuffer_get_whole_4(&(instructions_buffer), index))), +(instructions_index, 232));
        autobuffer_set_any_4(&(instructions_buffer), whole_8_to_whole_4(+(value_new, +(start_address, 4096))), index);
        i = +(i, 1);
    };

    variable i = 0;
    while <(i, bss_indexes_to_adjust_index) {
        variable index = whole_8.cast(autobuffer_array8_get(&(bss_indexes_to_adjust), i));
        variable value_new = +(whole_8.cast(whole_4_to_whole_8(autobuffer_get_whole_4(&(instructions_buffer), index))), +(+(instructions_index, 232), data_buffer_index));
        autobuffer_set_any_4(&(instructions_buffer), whole_8_to_whole_4(+(value_new, +(start_address, 8192))), index);
        i = +(i, 1);
    };

    variable i = 0;
    while <(i, data_indexes_to_adjust_relative_index) {
        variable index = whole_8.cast(autobuffer_array8_get(&(data_indexes_to_adjust_relative), i));
        variable value_new = +(whole_8.cast(whole_4_to_whole_8(autobuffer_get_whole_4(&(instructions_buffer), index))), instructions_index);
        variable actual_value = whole_8.cast(whole_4_to_whole_8(autobuffer_get_whole_4(&(instructions_buffer), index)));
        autobuffer_set_any_4(&(instructions_buffer), whole_8_to_whole_4(+(-(value_new, +(index, 4)), 4096)), index);
        i = +(i, 1);
    };

    variable i = 0;
    while <(i, bss_indexes_to_adjust_relative_index) {
        variable index = whole_8.cast(autobuffer_array8_get(&(bss_indexes_to_adjust_relative), i));
        variable value_new = +(whole_8.cast(whole_4_to_whole_8(autobuffer_get_whole_4(&(instructions_buffer), index))), +(instructions_index, data_buffer_index));
        variable actual_value = whole_8.cast(whole_4_to_whole_8(autobuffer_get_whole_4(&(instructions_buffer), index)));
        autobuffer_set_any_4(&(instructions_buffer), whole_8_to_whole_4(+(-(value_new, +(index, 4)), 8192)), index);
        i = +(i, 1);
    };

    autobuffer_set(&(output), AutoBuffer.>buffer(&(instructions_buffer)), 232, instructions_index);
    autobuffer_set(&(output), AutoBuffer.>buffer(&(data_buffer)), +(232, instructions_index), data_buffer_index);

    variable file_header = new_elf64_file_header();
    ELF64FileHeader.<format(&(file_header), 2_whole_1);
    ELF64FileHeader.<endianness(&(file_header), 1_whole_1);
    ELF64FileHeader.<abi(&(file_header), 3_whole_1);
    ELF64FileHeader.<object_file_type(&(file_header), 2_whole_2);
    ELF64FileHeader.<machine(&(file_header), 62_whole_2);
    ELF64FileHeader.<entry_point(&(file_header), 4194536);
    ELF64FileHeader.<program_header_table(&(file_header), 64);
    ELF64FileHeader.<program_header_count(&(file_header), 3_whole_2);

    variable program_header_instructions: ELF64ProgramHeader;
    ELF64ProgramHeader.<type(&(program_header_instructions), 1_whole_4);
    ELF64ProgramHeader.<location(&(program_header_instructions), 0);
    ELF64ProgramHeader.<virtual_address(&(program_header_instructions), start_address);
    ELF64ProgramHeader.<physical_address(&(program_header_instructions), start_address);
    ELF64ProgramHeader.<size_file(&(program_header_instructions), +(instructions_index, 232));
    ELF64ProgramHeader.<size_memory(&(program_header_instructions), +(instructions_index, 232));
    ELF64ProgramHeader.<flags(&(program_header_instructions), 5_whole_4);
    ELF64ProgramHeader.<alignment(&(program_header_instructions), 4096);

    variable program_header_data: ELF64ProgramHeader;
    ELF64ProgramHeader.<type(&(program_header_data), 1_whole_4);
    ELF64ProgramHeader.<location(&(program_header_data), +(instructions_index, 232));
    ELF64ProgramHeader.<virtual_address(&(program_header_data), +(232, +(instructions_index, +(start_address, 4096))));
    ELF64ProgramHeader.<physical_address(&(program_header_data), +(232, +(instructions_index, +(start_address, 4096))));
    ELF64ProgramHeader.<size_file(&(program_header_data), data_buffer_index);
    ELF64ProgramHeader.<size_memory(&(program_header_data), data_buffer_index);
    ELF64ProgramHeader.<flags(&(program_header_data), 4_whole_4);
    ELF64ProgramHeader.<alignment(&(program_header_data), 4096);

    variable program_header_bss: ELF64ProgramHeader;
    ELF64ProgramHeader.<type(&(program_header_bss), 1_whole_4);
    ELF64ProgramHeader.<location(&(program_header_bss), +(instructions_index, +(data_buffer_index, 232)));
    ELF64ProgramHeader.<virtual_address(&(program_header_bss), +(232, +(instructions_index, +(+(start_address, 8192), data_buffer_index))));
    ELF64ProgramHeader.<physical_address(&(program_header_bss), +(232, +(instructions_index, +(+(start_address, 8192), data_buffer_index))));
    ELF64ProgramHeader.<size_file(&(program_header_bss), 0);
    ELF64ProgramHeader.<size_memory(&(program_header_bss), bss_buffer_index);
    ELF64ProgramHeader.<flags(&(program_header_bss), 6_whole_4);
    ELF64ProgramHeader.<alignment(&(program_header_bss), 4096);

    autobuffer_set(&(output), &(file_header), 0, 64);
    autobuffer_set(&(output), &(program_header_instructions), 64, 56);
    autobuffer_set(&(output), &(program_header_data), 120, 56);
    autobuffer_set(&(output), &(program_header_bss), 176, 56);

    variable output_file = sys_open(AutoBuffer.>buffer(&(asm_output)), +(+(O_WRONLY, O_CREAT), O_TRUNC), 452);
    sys_write(output_file, AutoBuffer.>buffer(&(output)), AutoBuffer.>size(&(output)));
    sys_close(output_file);
};

define create_structure_internal_functions = function(program_data: *ProgramData, nodes: *Nodes, internal_function_instructions: *HashMap, internal_function_instruction_sizes: *HashMap) {
    variable structure_datas = &(ProgramData.>structure_datas(program_data));
    variable structure_count = AutoBufferStack8.>index(structure_datas);

    variable structure_member_types = &(ProgramData.>structure_member_types(program_data));

    variable define_values = &(ProgramData.>define_values(program_data));

    variable i = 0;
    while <(i, structure_count) {
        variable structure_data = NodeStructureData.*cast(autobuffer_stack8_get(structure_datas, i));
        variable structure_name = NodeStructureData.>name(structure_data);

        variable size = get_size_linux_x86-643_new(structure_name, nodes, program_data);

        // Setter for whole value
        variable internal_name = concatenate2_brk_allocate(structure_name, "<");
        variable internal_instructions = autobuffer_buffer_new(8388608);

        autobuffer_buffer_push_add_register8_whole_8(&(internal_instructions), RSP, size);
        autobuffer_buffer_push_mov_register8_pointer_offset_register8(&(internal_instructions), RSP, 0, RAX);
        autobuffer_buffer_push_sub_register8_whole_8(&(internal_instructions), RSP, size);

        variable j = 0;
        while <(j, size) {
            if >(-(size, j), 7) {
                autobuffer_buffer_push_mov_register8_pointer_offset_register8(&(internal_instructions), RSP, j, RBX);
                autobuffer_buffer_push_mov_register8_register8_pointer_offset(&(internal_instructions), RBX, RAX, j);

                j = +(j, 8);
            } else if >(-(size, j), 3) {
                autobuffer_buffer_push_mov_register8_pointer_offset_register4(&(internal_instructions), RSP, j, EBX);
                autobuffer_buffer_push_mov_register4_register8_pointer_offset(&(internal_instructions), EBX, RAX, j);

                j = +(j, 4);
            } else if >(-(size, j), 1) {
                autobuffer_buffer_push_mov_register8_pointer_offset_register2(&(internal_instructions), RSP, j, BX);
                autobuffer_buffer_push_mov_register2_register8_pointer_offset(&(internal_instructions), BX, RAX, j);

                j = +(j, 2);
            } else if >(-(size, j), 0) {
                autobuffer_buffer_push_mov_register8_pointer_offset_register1(&(internal_instructions), RSP, j, BL);
                autobuffer_buffer_push_mov_register1_register8_pointer_offset(&(internal_instructions), BL, RAX, j);

                j = +(j, 1);
            };
        };

        autobuffer_buffer_push_add_register8_whole_8(&(internal_instructions), RSP, +(size, 8));

        hashmap_string_put(internal_function_instructions, internal_name, autobuffer_buffer_get_buffer_pointer(&(internal_instructions)));
        hashmap_string_put(internal_function_instruction_sizes, internal_name, AutoBufferBuffer.>index(&(internal_instructions)));

        // Getter for whole value
        variable internal_name = concatenate2_brk_allocate(structure_name, ">");
        variable internal_instructions = autobuffer_buffer_new(8388608);

        autobuffer_buffer_push_pop_register8(&(internal_instructions), RAX);
        autobuffer_buffer_push_sub_register8_whole_8(&(internal_instructions), RSP, size);

        variable k = 0;
        while <(k, size) {
            if >(-(size, k), 7) {
                autobuffer_buffer_push_mov_register8_pointer_offset_register8(&(internal_instructions), RAX, k, RBX);
                autobuffer_buffer_push_mov_register8_register8_pointer_offset(&(internal_instructions), RBX, RSP, k);

                k = +(k, 8);
            } else if >(-(size, k), 3) {
                autobuffer_buffer_push_mov_register8_pointer_offset_register4(&(internal_instructions), RAX, k, EBX);
                autobuffer_buffer_push_mov_register4_register8_pointer_offset(&(internal_instructions), EBX, RSP, k);

                k = +(k, 4);
            } else if >(-(size, k), 1) {
                autobuffer_buffer_push_mov_register8_pointer_offset_register2(&(internal_instructions), RAX, k, BX);
                autobuffer_buffer_push_mov_register2_register8_pointer_offset(&(internal_instructions), BX, RSP, k);

                k = +(k, 2);
            } else if >(-(size, k), 0) {
                autobuffer_buffer_push_mov_register8_pointer_offset_register1(&(internal_instructions), RAX, k, BL);
                autobuffer_buffer_push_mov_register1_register8_pointer_offset(&(internal_instructions), BL, RSP, k);

                k = +(k, 1);
            };
        };

        hashmap_string_put(internal_function_instructions, internal_name, autobuffer_buffer_get_buffer_pointer(&(internal_instructions)));
        hashmap_string_put(internal_function_instruction_sizes, internal_name, AutoBufferBuffer.>index(&(internal_instructions)));

        variable internal_name = structure_name;
        variable internal_instructions = autobuffer_buffer_new(131072);

        autobuffer_buffer_push_sub_register8_whole_8(&(internal_instructions), RSP, size);

        variable k = 0;
        while <(k, size) {
            if >(-(size, k), 7) {
                autobuffer_buffer_push_mov_whole_8_register8(&(internal_instructions), RBX, 0);
                autobuffer_buffer_push_mov_register8_register8_pointer_offset(&(internal_instructions), RBX, RSP, k);

                k = +(k, 8);
            } else if >(-(size, k), 3) {
                autobuffer_buffer_push_mov_whole_4_register4(&(internal_instructions), EBX, 0_whole_4);
                autobuffer_buffer_push_mov_register4_register8_pointer_offset(&(internal_instructions), EBX, RSP, k);

                k = +(k, 4);
            } else if >(-(size, k), 1) {
                autobuffer_buffer_push_mov_whole_2_register2(&(internal_instructions), BX, 0_whole_2);
                autobuffer_buffer_push_mov_register2_register8_pointer_offset(&(internal_instructions), BX, RSP, k);

                k = +(k, 2);
            } else if >(-(size, k), 0) {
                autobuffer_buffer_push_mov_whole_1_register1(&(internal_instructions), BL, 0_whole_1);
                autobuffer_buffer_push_mov_register1_register8_pointer_offset(&(internal_instructions), BL, RSP, k);

                k = +(k, 1);
            };
        };

        hashmap_string_put(internal_function_instructions, internal_name, autobuffer_buffer_get_buffer_pointer(&(internal_instructions)));
        hashmap_string_put(internal_function_instruction_sizes, internal_name, AutoBufferBuffer.>index(&(internal_instructions)));

        variable internal_name = concatenate2_brk_allocate(structure_name, ">0");
        variable internal_instructions = autobuffer_buffer_new(131072);

        autobuffer_buffer_push_sub_register8_whole_8(&(internal_instructions), RSP, size);

        variable k = 0;
        while <(k, size) {
            if >(-(size, k), 7) {
                autobuffer_buffer_push_mov_whole_8_register8(&(internal_instructions), RBX, 0);
                autobuffer_buffer_push_mov_register8_register8_pointer_offset(&(internal_instructions), RBX, RSP, k);

                k = +(k, 8);
            } else if >(-(size, k), 3) {
                autobuffer_buffer_push_mov_whole_4_register4(&(internal_instructions), EBX, 0_whole_4);
                autobuffer_buffer_push_mov_register4_register8_pointer_offset(&(internal_instructions), EBX, RSP, k);

                k = +(k, 4);
            } else if >(-(size, k), 1) {
                autobuffer_buffer_push_mov_whole_2_register2(&(internal_instructions), BX, 0_whole_2);
                autobuffer_buffer_push_mov_register2_register8_pointer_offset(&(internal_instructions), BX, RSP, k);

                k = +(k, 2);
            } else if >(-(size, k), 0) {
                autobuffer_buffer_push_mov_whole_1_register1(&(internal_instructions), BL, 0_whole_1);
                autobuffer_buffer_push_mov_register1_register8_pointer_offset(&(internal_instructions), BL, RSP, k);

                k = +(k, 1);
            };
        };

        hashmap_string_put(internal_function_instructions, internal_name, autobuffer_buffer_get_buffer_pointer(&(internal_instructions)));
        hashmap_string_put(internal_function_instruction_sizes, internal_name, AutoBufferBuffer.>index(&(internal_instructions)));

        variable member_names = NodeStructureData.>item_names(structure_data);
        variable member_types = NodeStructureData.>item_types(structure_data);

        variable j = 0;
        while !(=(array8_get(member_names, j), 0)) {
            variable member_name = *.cast(array8_get(member_names, j));
            variable member_type = *.cast(array8_get(member_types, j));

            variable location = get_size_multiple_linux_x86-643_new(member_types, j, nodes, program_data);
            variable size = get_size_linux_x86-643_new(member_type, nodes, program_data);

            // Get pointer for individual members
            variable internal_name = concatenate4_brk_allocate("*", structure_name, ">", member_name);
            variable internal_instructions = autobuffer_buffer_new(131072);

            autobuffer_buffer_push_pop_register8(&(internal_instructions), RAX);
            autobuffer_buffer_push_add_register8_whole_8(&(internal_instructions), RAX, location);
            autobuffer_buffer_push_push_register8(&(internal_instructions), RAX);

            hashmap_string_put(internal_function_instructions, internal_name, autobuffer_buffer_get_buffer_pointer(&(internal_instructions)));
            hashmap_string_put(internal_function_instruction_sizes, internal_name, AutoBufferBuffer.>index(&(internal_instructions)));

            // Setter for individual members
            variable internal_name = concatenate3_brk_allocate(structure_name, "<", member_name);
            variable internal_instructions = autobuffer_buffer_new(8388608);

            autobuffer_buffer_push_add_register8_whole_8(&(internal_instructions), RSP, size);
            autobuffer_buffer_push_mov_register8_pointer_offset_register8(&(internal_instructions), RSP, 0, RAX);
            autobuffer_buffer_push_sub_register8_whole_8(&(internal_instructions), RSP, size);

            variable k = 0;
            while <(k, size) {
                if >(-(size, k), 7) {
                    autobuffer_buffer_push_mov_register8_pointer_offset_register8(&(internal_instructions), RSP, k, RBX);
                    autobuffer_buffer_push_mov_register8_register8_pointer_offset(&(internal_instructions), RBX, RAX, +(k, location));

                    k = +(k, 8);
                } else if >(-(size, k), 3) {
                    autobuffer_buffer_push_mov_register8_pointer_offset_register4(&(internal_instructions), RSP, k, EBX);
                    autobuffer_buffer_push_mov_register4_register8_pointer_offset(&(internal_instructions), EBX, RAX, +(k, location));

                    k = +(k, 4);
                } else if >(-(size, k), 1) {
                    autobuffer_buffer_push_mov_register8_pointer_offset_register2(&(internal_instructions), RSP, k, BX);
                    autobuffer_buffer_push_mov_register2_register8_pointer_offset(&(internal_instructions), BX, RAX, +(k, location));

                    k = +(k, 2);
                } else if >(-(size, k), 0) {
                    autobuffer_buffer_push_mov_register8_pointer_offset_register1(&(internal_instructions), RSP, k, BL);
                    autobuffer_buffer_push_mov_register1_register8_pointer_offset(&(internal_instructions), BL, RAX, +(k, location));

                    k = +(k, 1);
                };
            };

            autobuffer_buffer_push_add_register8_whole_8(&(internal_instructions), RSP, +(size, 8));

            hashmap_string_put(internal_function_instructions, internal_name, autobuffer_buffer_get_buffer_pointer(&(internal_instructions)));
            hashmap_string_put(internal_function_instruction_sizes, internal_name, AutoBufferBuffer.>index(&(internal_instructions)));

            // Getter for indivudal members
            variable internal_name = concatenate3_brk_allocate(structure_name, ">", member_name);
            variable internal_instructions = autobuffer_buffer_new(8388608);

            autobuffer_buffer_push_pop_register8(&(internal_instructions), RAX);
            autobuffer_buffer_push_sub_register8_whole_8(&(internal_instructions), RSP, size);

            variable k = 0;
            while <(k, size) {
                if >(-(size, k), 7) {
                    autobuffer_buffer_push_mov_register8_pointer_offset_register8(&(internal_instructions), RAX, +(k, location), RBX);
                    autobuffer_buffer_push_mov_register8_register8_pointer_offset(&(internal_instructions), RBX, RSP, k);

                    k = +(k, 8);
                } else if >(-(size, k), 3) {
                    autobuffer_buffer_push_mov_register8_pointer_offset_register4(&(internal_instructions), RAX, +(k, location), EBX);
                    autobuffer_buffer_push_mov_register4_register8_pointer_offset(&(internal_instructions), EBX, RSP, k);

                    k = +(k, 4);
                } else if >(-(size, k), 1) {
                    autobuffer_buffer_push_mov_register8_pointer_offset_register2(&(internal_instructions), RAX, +(k, location), BX);
                    autobuffer_buffer_push_mov_register2_register8_pointer_offset(&(internal_instructions), BX, RSP, k);

                    k = +(k, 2);
                } else if >(-(size, k), 0) {
                    autobuffer_buffer_push_mov_register8_pointer_offset_register1(&(internal_instructions), RAX, +(k, location), BL);
                    autobuffer_buffer_push_mov_register1_register8_pointer_offset(&(internal_instructions), BL, RSP, k);

                    k = +(k, 1);
                };
            };

            hashmap_string_put(internal_function_instructions, internal_name, autobuffer_buffer_get_buffer_pointer(&(internal_instructions)));
            hashmap_string_put(internal_function_instruction_sizes, internal_name, AutoBufferBuffer.>index(&(internal_instructions)));

            j = +(j, 1);
        };
        i = +(i, 1);
    };

};

define get_size_linux_x86-643 = function(type: *, nodes: *Nodes, define_values_map: *HashMap, structure_members: *AutoBuffer): whole_8 {
    variable cached_size = whole_8.cast(hashmap_string_get(&(cached_sizes_map), type));
    if !(=(cached_size, 0)) {
        return cached_size;
    };

    if string=(type, "boolean") {
        return 1;
    };
    if string_length=(type, "*", 1) {
        return 8;
    };

    if string_length=(type, "any", 3) {
        variable number = to_number(*.cast(+(type, 4)));
        hashmap_string_put(&(cached_sizes_map), type, number);

        return number;
    };

    if string_length=(type, "whole", 5) {
        variable number = to_number(*.cast(+(type, 6)));
        hashmap_string_put(&(cached_sizes_map), type, number);

        return number;
    };

    if string_length=(type, "integer", 7) {
        variable number = to_number(*.cast(+(type, 8)));
        hashmap_string_put(&(cached_sizes_map), type, number);

        return number;
    };

    variable defined_value = whole_8.cast(hashmap_string_get2(define_values_map, type));
    if !(=(defined_value, 999)) {
        variable member_types = *.cast(autobuffer_array8_get(structure_members, defined_value));

        variable size = get_size_multiple_linux_x86-643(member_types, 999, nodes, define_values_map, structure_members);
        hashmap_string_put(&(cached_sizes_map), type, size);
        return size;
    };

    if string_length=(type, "structure[", 10) {
        variable total = 0;

        variable buffer = autobuffer_new(16);
        variable buffer_index = 0;

        variable is_type = false;
        variable i = 10;
        while <(i, length(type)) {
            variable character = any_1.>(any_1.*cast(+(type, i)));

            if =(character, ASCII_COLON) {
                is_type = true;
            } else if =(character, ASCII_COMMA) {
                total = +(total, get_size_linux_x86-643(AutoBuffer.>buffer(&(buffer)), nodes, define_values_map, structure_members));
                autobuffer_reset(&(buffer));
                buffer_index = 0;
                is_type = false;
            } else if =(character, ASCII_CLOSED_BRACKET) {
                total = +(total, get_size_linux_x86-643(AutoBuffer.>buffer(&(buffer)), nodes, define_values_map, structure_members));
                break;
            } else if is_type {
                autobuffer_legacy_push_string_length(&(buffer), &(buffer_index), +(type, i), 1);
            };

            i = +(i, 1);
        };

        hashmap_string_put(&(cached_sizes_map), type, total);
        return total;
    };

    if string_length=(type, "global[", 7) {
        variable inside = brk_allocate(-(length(type), 7));
        copy(+(type, 7), inside, -(length(type), 8));

        variable size = get_size_linux_x86-643(inside, nodes, define_values_map, structure_members);

        hashmap_string_put(&(cached_sizes_map), type, size);
        return size;
    };

    print("unknown type ");
    println(type);

    return 0;
};

define get_size_linux_x86-642 = function(type: *, nodes: *Nodes): whole_8 {
    variable cached_size = whole_8.cast(hashmap_string_get(&(cached_sizes_map), type));
    if !(=(cached_size, 0)) {
        return cached_size;
    };

    if string=(type, "boolean") {
        return 1;
    };
    if string_length=(type, "*", 1) {
        return 8;
    };

    if string_length=(type, "any", 3) {
        variable number = to_number(*.cast(+(type, 4)));
        hashmap_string_put(&(cached_sizes_map), type, number);

        return number;
    };

    if string_length=(type, "whole", 5) {
        variable number = to_number(*.cast(+(type, 6)));
        hashmap_string_put(&(cached_sizes_map), type, number);

        return number;
    };

    if string_length=(type, "integer", 7) {
        variable number = to_number(*.cast(+(type, 8)));
        hashmap_string_put(&(cached_sizes_map), type, number);

        return number;
    };

    variable node_count = Nodes.>index(nodes);
    variable i = 0;
    while <(i, node_count) {
        if =(nodes_get_id(nodes, i), NODE_STRUCTURE) {
            variable pointer = NodeStructureData.*cast(nodes_get_pointer_data(nodes, i));
            variable name = NodeStructureData.>name(pointer);
            variable member_types = NodeStructureData.>item_types(pointer);
            if string=(type, name) {
                variable size = get_size_multiple_linux_x86-642(member_types, 999, nodes);
                hashmap_string_put(&(cached_sizes_map), type, size);
                return size;
            };
        };
        i = +(i, 1);
    };

    print("unknown type ");
    println(type);

    return 0;
};

define get_size_multiple_linux_x86-643 = function(array: *, count: whole_8, nodes: *Nodes, define_values_map: *HashMap, structure_members_array: *AutoBuffer): whole_8 {
    variable total = 0;

    variable i = 0;
    while <(i, count) {
        if =(array8_get(array, i), 0) {
            return total;
        };
        total = +(total, get_size_linux_x86-643(*.cast(array8_get(array, i)), nodes, define_values_map, structure_members_array));
        i = +(i, 1);
    };

    return total;
};

define get_size_multiple_linux_x86-642 = function(array: *, count: whole_8, nodes: *Nodes): whole_8 {
    variable total = 0;

    variable i = 0;
    while <(i, count) {
        if =(array8_get(array, i), 0) {
            return total;
        };
        total = +(total, get_size_linux_x86-642(*.cast(array8_get(array, i)), nodes));
        i = +(i, 1);
    };

    return total;
};

define get_size_multiple_reversed_linux_x86-643 = function(array: *, count: whole_8, nodes: *Nodes, define_values_map: *HashMap, structure_members_array: *AutoBuffer): whole_8 {
    variable i = -(array8_length(array), 1);

    variable total = 0;

    while >(i, count) {
        total = +(total, get_size_linux_x86-643(*.cast(array8_get(array, i)), nodes, define_values_map, structure_members_array));
        i = -(i, 1);
    };

    return total;
};

define get_size_multiple_reversed_linux_x86-642 = function(array: *, count: whole_8, nodes: *Nodes): whole_8 {
    variable i = -(array8_length(array), 1);

    variable total = 0;

    while >(i, count) {
        total = +(total, get_size_linux_x86-642(*.cast(array8_get(array, i)), nodes));
        i = -(i, 1);
    };

    return total;
};

define get_size_linux_x86-643_new = function(type: *, nodes: *Nodes, program_data: *ProgramData): whole_8 {
    variable cached_size = whole_8.cast(hashmap_string_get(&(cached_sizes_map), type));
    if !(=(cached_size, 0)) {
        return cached_size;
    };

    if string=(type, "boolean") {
        return 1;
    };
    if string_length=(type, "*", 1) {
        return 8;
    };

    if string_length=(type, "any", 3) {
        variable number = to_number(*.cast(+(type, 4)));
        hashmap_string_put(&(cached_sizes_map), type, number);

        return number;
    };

    if string_length=(type, "whole", 5) {
        variable number = to_number(*.cast(+(type, 6)));
        hashmap_string_put(&(cached_sizes_map), type, number);

        return number;
    };

    if string_length=(type, "integer", 7) {
        variable number = to_number(*.cast(+(type, 8)));
        hashmap_string_put(&(cached_sizes_map), type, number);

        return number;
    };

    variable define_values = &(ProgramData.>define_values(program_data));

    variable defined_value = whole_8.cast(hashmap_string_get2(define_values, type));
    if !(=(defined_value, 999)) {
        variable structure_member_types = &(ProgramData.>structure_member_types(program_data));
        variable member_types = *.cast(autobuffer_array8_get(structure_member_types, defined_value));

        variable size = get_size_multiple_linux_x86-643_new(member_types, 999, nodes, program_data);
        hashmap_string_put(&(cached_sizes_map), type, size);
        return size;
    };

    if string_length=(type, "structure[", 10) {
        variable total = 0;

        variable buffer = autobuffer_new(16);
        variable buffer_index = 0;

        variable is_type = false;
        variable i = 10;
        while <(i, length(type)) {
            variable character = any_1.>(any_1.*cast(+(type, i)));

            if =(character, ASCII_COLON) {
                is_type = true;
            } else if =(character, ASCII_COMMA) {
                total = +(total, get_size_linux_x86-643_new(AutoBuffer.>buffer(&(buffer)), nodes, program_data));
                autobuffer_reset(&(buffer));
                buffer_index = 0;
                is_type = false;
            } else if =(character, ASCII_CLOSED_BRACKET) {
                total = +(total, get_size_linux_x86-643_new(AutoBuffer.>buffer(&(buffer)), nodes, program_data));
                break;
            } else if is_type {
                autobuffer_legacy_push_string_length(&(buffer), &(buffer_index), +(type, i), 1);
            };

            i = +(i, 1);
        };

        hashmap_string_put(&(cached_sizes_map), type, total);
        return total;
    };

    if string_length=(type, "global[", 7) {
        variable inside = brk_allocate(-(length(type), 7));
        copy(+(type, 7), inside, -(length(type), 8));

        variable size = get_size_linux_x86-643_new(inside, nodes, program_data);

        hashmap_string_put(&(cached_sizes_map), type, size);
        return size;
    };

    print("unknown type ");
    println(type);

    return 0;
};

define get_size_multiple_linux_x86-643_new = function(array: *, count: whole_8, nodes: *Nodes, program_data: *ProgramData): whole_8 {
    variable total = 0;

    variable i = 0;
    while <(i, count) {
        if =(array8_get(array, i), 0) {
            return total;
        };
        total = +(total, get_size_linux_x86-643_new(*.cast(array8_get(array, i)), nodes, program_data));
        i = +(i, 1);
    };

    return total;
};

define get_size_multiple_reversed_linux_x86-643_new = function(array: *, count: whole_8, nodes: *Nodes, program_data: *ProgramData): whole_8 {
    variable i = -(array8_length(array), 1);

    variable total = 0;

    while >(i, count) {
        total = +(total, get_size_linux_x86-643_new(*.cast(array8_get(array, i)), nodes, program_data));
        i = -(i, 1);
    };

    return total;
};
