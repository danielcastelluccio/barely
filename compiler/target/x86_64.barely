define Target/X86_64 = module {
    define get_functions = function(): InstructionSetFunctions {
        declare functions = InstructionSetFunctions.>0();
        InstructionSetFunctions.<main(&(functions), .output);
        InstructionSetFunctions.<get_size(&(functions), .get_size);
        InstructionSetFunctions.<get_size_multiple(&(functions), .get_size_multiple);
        InstructionSetFunctions.<get_size_multiple_reversed(&(functions), .get_size_multiple_reversed);
        return functions;
    };

    define output = function(nodes: *Nodes, program_data: *ProgramData, target_os: *, instructions_buffer: *AutoBufferBuffer, data_buffer: *AutoBufferBuffer, function_locations: *AutoBuffer, pushed_functions: *AutoBufferStack8, pushed_function_targets: *AutoBufferStack8, jmps: *AutoBufferStack8, jmp_targets: *AutoBufferStack8, jes: *AutoBufferStack8, je_targets: *AutoBufferStack8, targets: *AutoBuffer, global_types: *AutoBuffer, global_locations: *, function_local_sizes: *, data_indexes_to_adjust: *AutoBufferStack8, bss_indexes_to_adjust: *AutoBufferStack8, bss_indexes_to_adjust_relative: *AutoBufferStack8): InstructionIndex {
        declare structure_member_types = ProgramData.>structure_member_types(program_data);
        declare structure_member_names = ProgramData.>structure_member_names(program_data);

        declare structure_datas = ProgramData.>structure_datas(program_data);

        declare function_argument_names = ProgramData.>function_argument_names(program_data);
        declare function_argument_types = ProgramData.>function_argument_types(program_data);
        declare function_return_types = ProgramData.>function_return_types(program_data);

        declare internal_function_argument_names = ProgramData.>internal_function_argument_names(program_data);
        declare internal_function_argument_types = ProgramData.>internal_function_argument_types(program_data);
        declare internal_function_return_types = ProgramData.>internal_function_return_types(program_data);
        declare internal_function_instructions = hashmap_new(1024);
        declare internal_function_instruction_sizes = hashmap_new(1024);

        declare define_types = ProgramData.>define_types(program_data);

        declare calls = autobuffer_new(512);
        declare call_targets = autobuffer_new(512);
        declare call_index = 0;

        declare node_count = Nodes.>index(nodes);

        .create_structure_internal_functions(program_data, nodes, &(internal_function_instructions), &(internal_function_instruction_sizes));

        declare main_call = .append_start_instructions(instructions_buffer, target_os);

        declare current_function_id = -(0, 1);

        declare variable_types = autobuffer_stack8_new(64);
        declare variable_indexes = autobuffer_stack8_new(64);

        declare variable_names = autobuffer_new(2048);
        declare variable_sizes = autobuffer_new(2048);
        declare variable_index = 0;

        declare declared_module_id = 0;

        declare module_stack = autobuffer_stack8_new(24);

        declare in_function = false;

        declare i = 0;
        while <(i, node_count) {
            declare id = nodes_get_id(nodes, i);
            declare pointer_data = nodes_get_pointer_data(nodes, i);

            if =(id, NODE_FUNCTION) {
                in_function = true;
                .output_function(nodes, i, function_local_sizes, &(current_function_id), &(variable_index), pointer_data, instructions_buffer);
            } else if =(id, NODE_NUMBER) .output_number(&(module_stack), pointer_data, instructions_buffer)
            else if =(id, NODE_BOOLEAN) .output_boolean(pointer_data, instructions_buffer)
            else if =(id, NODE_INVOKE) .output_invoke(nodes, i, program_data, pointer_data, &(internal_function_instructions), &(internal_function_instruction_sizes), instructions_buffer)
            else if =(id, NODE_INVOKE_INTERNAL) .output_invoke_internal(nodes, i, program_data, pointer_data, &(internal_function_instructions), &(internal_function_instruction_sizes), instructions_buffer)
            else if =(id, NODE_STRING) .output_string(data_buffer, data_indexes_to_adjust, pointer_data, instructions_buffer)
            else if =(id, NODE_DECLARE) .output_declare(nodes, program_data, in_function, &(variable_names), &(variable_sizes), &(variable_types), &(variable_index), &(module_stack), pointer_data, instructions_buffer)
            else if =(id, NODE_ASSIGN) .output_assign(nodes, i, program_data, &(variable_names), &(variable_sizes), &(variable_types), &(variable_indexes), variable_index, global_types, global_locations, bss_indexes_to_adjust_relative, &(module_stack), pointer_data, instructions_buffer)
            else if =(id, NODE_RETRIEVE) .output_retrieve(nodes, i, program_data, &(module_stack), current_function_id, &(function_argument_names), &(function_argument_types), &(variable_names), &(variable_sizes), &(variable_types), &(variable_indexes), variable_index, global_types, global_locations, bss_indexes_to_adjust, bss_indexes_to_adjust_relative, pushed_functions, pushed_function_targets, pointer_data, instructions_buffer)
            else if =(id, NODE_RETURN) .output_return(nodes,  program_data, current_function_id, &(function_argument_types), &(function_return_types), instructions_buffer)
            else if =(id, NODE_JUMP_CONDITIONAL) .output_jump_conditional(nodes,  program_data, pointer_data, jes, je_targets, instructions_buffer)
            else if =(id, NODE_JUMP) .output_jump(nodes, jmps, jmp_targets, pointer_data, instructions_buffer)
            else if =(id, NODE_TARGET) .output_target(targets, pointer_data, instructions_buffer)
            else if =(id, NODE_SCOPE) .output_scope(&(variable_types), &(variable_indexes), variable_index, instructions_buffer)
            else if =(id, NODE_ENDSCOPE) .output_end_scope(&(variable_types), &(variable_indexes))
            else if =(id, NODE_DEFINE) .output_define(program_data, function_locations, &(module_stack), pointer_data, declared_module_id, instructions_buffer)
            else if =(id, NODE_ENDDEFINE) {
                declare define_data = NodeEndDefineData.*cast(pointer_data);
                declare define_type = NodeEndDefineData.>type(define_data);

                if =(define_type, 0) {
                } else if string=(define_type, "module") {
                    declare _ = autobuffer_stack8_pop(&(module_stack));
                };
            } else if =(id, NODE_MODULE) {
                declared_module_id = +(declared_module_id, 1);
            } else if =(id, NODE_ENDFUNCTION) {
                in_function = false;
            } else if =(id, NODE_ENDMODULE) {}
            else if =(id, NODE_STRUCTURE) {}
            else if =(id, NODE_STARTIFBLOCK) {}
            else if =(id, NODE_ENDIFBLOCK) {}
            else if =(id, NODE_ENDSTATEMENT) {}
            else if =(id, NODE_MODULE) {}
            else if =(id, NODE_SKIP) {}
            else {
                print("Unhandled ");
                print_whole_8(id);
                println("");
            };

            i = +(i, 1);
        };

        return main_call;
    };

    define append_start_instructions = function(instructions_buffer: *AutoBufferBuffer, target_os: *): InstructionIndex {
        X86_64.autobuffer_buffer_push_lea_register8_offset_register8(instructions_buffer, RSP, 8, RAX);
        X86_64.autobuffer_buffer_push_pop_register8(instructions_buffer, RBX);
        X86_64.autobuffer_buffer_push_push_register8(instructions_buffer, RAX);
        X86_64.autobuffer_buffer_push_push_register8(instructions_buffer, RBX);
        declare main_call = X86_64.autobuffer_buffer_push_call_near(instructions_buffer);

        if string=(target_os, "linux") {
            Exits.linux_x86_64(instructions_buffer);
        } else if string=(target_os, "macos") {
            Exits.macos_x86_64(instructions_buffer);
        };

        return main_call;
    };

    define output_define = function(program_data: *ProgramData, function_locations: *AutoBuffer, module_stack: *AutoBufferStack8, pointer_data: *, declared_module_id: whole_8, instructions_buffer: *AutoBufferBuffer) {
        declare define_data = NodeDefineData.*cast(pointer_data);
        declare define_name = NodeDefineData.>name(define_data);
        declare define_type = NodeDefineData.>type(define_data);
        
        if string_length=(define_type, "*function", 9) {
            declare define_values = &(ProgramData.>define_values(program_data));
            autobuffer_array8_set(function_locations, whole_8.cast(hashmap_string_get(define_values, define_name)), AutoBufferBuffer.>index(instructions_buffer));
        } else if string_length=(define_type, "module", 6) {
            autobuffer_stack8_push(module_stack, declared_module_id);
        };
    };

    define output_end_scope = function(variable_types: *AutoBufferStack8, variable_indexes: *AutoBufferStack8) {
        declare _ = autobuffer_stack8_pop(variable_types);
        declare _ = autobuffer_stack8_pop(variable_indexes);
    };

    define output_scope = function(variable_types: *AutoBufferStack8, variable_indexes: *AutoBufferStack8, variable_index: whole_8, instructions_buffer: *AutoBufferBuffer) {
        declare new_hashmap = hashmap_new(512);
        declare allocated = brk_allocate(24);
        HashMap.<(HashMap.*cast(allocated), new_hashmap);
        autobuffer_stack8_push(variable_types, allocated);

        autobuffer_stack8_push(variable_indexes, variable_index);
    };

    define output_target = function(targets: *AutoBuffer, pointer_data: *, instructions_buffer: *AutoBufferBuffer) {
        declare target_data = NodeTargetData.*cast(pointer_data);
        declare target = NodeTargetData.>id(target_data);
        
        autobuffer_array8_set(targets, target, X86_64.get_instruction(instructions_buffer));
    };

    define output_jump = function(nodes: *Nodes, jmps: *AutoBufferStack8, jmp_targets: *AutoBufferStack8, pointer_data: *, instructions_buffer: *AutoBufferBuffer) {
        declare jump_data = NodeJumpData.*cast(pointer_data);
        declare target = NodeJumpData.>target_id(jump_data);

        declare jump_instruction = X86_64.autobuffer_buffer_push_jmp_near(instructions_buffer);
        autobuffer_stack8_push(jmps, jump_instruction);
        autobuffer_stack8_push(jmp_targets, target);
    };

    define output_string = function(data_buffer: *AutoBufferBuffer, data_indexes_to_adjust: *AutoBufferStack8, pointer_data: *, instructions_buffer: *AutoBufferBuffer) {
        declare string_data = NodeStringData.*cast(pointer_data);
        declare string_value = NodeStringData.>value(string_data);

        declare string_data_index = ELF_X86_64.autobuffer_buffer_push_data_string(data_buffer, string_value);

        ELF_X86_64.autobuffer_buffer_push_push_data(instructions_buffer, data_indexes_to_adjust, string_data_index);
    };

    define output_invoke_pointer = function(instructions_buffer: *AutoBufferBuffer) {
        X86_64.autobuffer_buffer_push_pop_register8(instructions_buffer, RAX);
        X86_64.autobuffer_buffer_push_call_far_register8(instructions_buffer, RAX);
    };

    define output_function = function(nodes: *Nodes, nodes_index: whole_8, function_local_sizes: *, current_function_id: *whole_8, variable_index: *whole_8, pointer_data: *, instructions_buffer: *AutoBufferBuffer) {
        declare function_data = NodeFunctionData.*cast(pointer_data);
        declare next_id = nodes_get_id(nodes, +(nodes_index, 1));

        if !(=(next_id, NODE_ENDFUNCTION)) {
            declare function_name = NodeFunctionData.>name(function_data);

            X86_64.autobuffer_buffer_push_push_register8(instructions_buffer, RBP);
            X86_64.autobuffer_buffer_push_mov_register8_register8(instructions_buffer, RSP, RBP);

            if =(function_name, 0) {
                increment_whole_8_pointer(current_function_id, 1);
                declare locals_size = whole_8.cast(array8_get(function_local_sizes, whole_8.>(current_function_id)));

                X86_64.autobuffer_buffer_push_sub_register8_whole_8(instructions_buffer, RSP, locals_size);
            };

            whole_8.<(variable_index, 0);
        };
    };

    define output_declare = function(nodes: *Nodes, program_data: *ProgramData, in_function: boolean, variable_names: *AutoBuffer, variable_sizes: *AutoBuffer, variable_types: *AutoBufferStack8, variable_index: *whole_8, module_stack: *AutoBufferStack8, pointer_data: *, instructions_buffer: *AutoBufferBuffer) {
        declare declare_data = NodeDeclareData.*cast(pointer_data);
        declare variable_name = NodeDeclareData.>name(declare_data);
        declare variable_type_names = NodeDeclareData.>type(declare_data);
        declare variable_type = expand_module_name_array(variable_type_names, 0, &(module_id_map), &(module_references_map), module_stack, create_previous_results_list());

        if in_function {
            autobuffer_array8_set(variable_names, whole_8.>(variable_index), variable_name);
            autobuffer_array8_set(variable_sizes, whole_8.>(variable_index), .get_size(variable_type, nodes, program_data));
            increment_whole_8_pointer(variable_index, 1);

            hashmap_string_put(HashMap.*cast(autobuffer_stack8_peek(variable_types)), variable_name, variable_type_names);
        };
    };

    define output_jump_conditional = function(nodes: *Nodes, program_data: *ProgramData, pointer_data: *, jes: *AutoBufferStack8, je_targets: *AutoBufferStack8, instructions_buffer: *AutoBufferBuffer) {
        declare jump_conditional_data = NodeJumpConditionalData.*cast(pointer_data);
        declare target = NodeJumpConditionalData.>target_id(jump_conditional_data);
        declare conditional = NodeJumpConditionalData.>desired_state(jump_conditional_data);

        X86_64.autobuffer_buffer_push_mov_whole_8_register8(instructions_buffer, RAX, 0);
        X86_64.autobuffer_buffer_push_mov_register8_pointer_offset_register1(instructions_buffer, RSP, 0, AL);
        X86_64.autobuffer_buffer_push_add_register8_whole_8(instructions_buffer, RSP, 1);
        X86_64.autobuffer_buffer_push_mov_whole_8_register8(instructions_buffer, RBX, 0);
        X86_64.autobuffer_buffer_push_mov_whole_8_register8(instructions_buffer, RCX, 1);

        if conditional {
            X86_64.autobuffer_buffer_push_cmp_register8_register8(instructions_buffer, RAX, RCX);
        } else {
            X86_64.autobuffer_buffer_push_cmp_register8_register8(instructions_buffer, RAX, RBX);
        };

        declare jump_instruction = X86_64.autobuffer_buffer_push_je_near(instructions_buffer);
        autobuffer_stack8_push(jes, jump_instruction);
        autobuffer_stack8_push(je_targets, target);
    };

    define output_return = function(nodes: *Nodes, program_data: *ProgramData, current_function_id: whole_8, function_argument_types: *AutoBuffer, function_return_types: *AutoBuffer, instructions_buffer: *AutoBufferBuffer) {
        declare arguments_size = .get_size_multiple_array(*.cast(autobuffer_array8_get(function_argument_types, current_function_id)), 999, nodes, program_data);
        declare returns_size = .get_size_multiple(*.cast(autobuffer_array8_get(function_return_types, current_function_id)), 999, nodes, program_data);
        declare returns_size_rounded = returns_size;
        if !(=(%(returns_size_rounded, 8), 0)) {
            returns_size_rounded = +(returns_size_rounded, -(8, %(returns_size, 8)));
        };

        declare j = 8;
        declare k = +(returns_size, 8);

        X86_64.autobuffer_buffer_push_mov_register8_pointer_offset_register8(instructions_buffer, RBP, 8, RCX);
        X86_64.autobuffer_buffer_push_mov_register8_pointer_offset_register8(instructions_buffer, RBP, 0, RDX);

        returns_size = +(returns_size, 8);

        while <(j, returns_size) {
            if >(-(returns_size, j), 7) {
                k = -(k, 8);

                X86_64.autobuffer_buffer_push_mov_register8_pointer_offset_register8(instructions_buffer, RSP, -(-(returns_size, j), 8), RAX);
                X86_64.autobuffer_buffer_push_mov_register8_register8_pointer_offset(instructions_buffer, RAX, RBP, +(+(16, +(-(arguments_size, returns_size), k)), 0));

                j = +(j, 8);
            } else if >(-(returns_size, j), 3) {
                k = -(k, 4);

                X86_64.autobuffer_buffer_push_mov_register8_pointer_offset_register4(instructions_buffer, RSP, -(-(returns_size, j), 4), EAX);
                X86_64.autobuffer_buffer_push_mov_register4_register8_pointer_offset(instructions_buffer, EAX, RBP, +(+(16, +(-(arguments_size, returns_size), k)), 0));

                j = +(j, 4);
            } else if >(-(returns_size, j), 1) {
                k = -(k, 2);

                X86_64.autobuffer_buffer_push_mov_register8_pointer_offset_register2(instructions_buffer, RSP, -(-(returns_size, j), 2), AX);
                X86_64.autobuffer_buffer_push_mov_register2_register8_pointer_offset(instructions_buffer, AX, RBP, +(+(16, +(-(arguments_size, returns_size), k)), 0));

                j = +(j, 2);
            } else if >(-(returns_size, j), 0) {
                k = -(k, 1);

                X86_64.autobuffer_buffer_push_mov_register8_pointer_offset_register1(instructions_buffer, RSP, -(-(returns_size, j), 1), AL);
                X86_64.autobuffer_buffer_push_mov_register1_register8_pointer_offset(instructions_buffer, AL, RBP, +(+(16, +(-(arguments_size, returns_size), k)), 0));

                j = +(j, 1);
            };
        };

        X86_64.autobuffer_buffer_push_mov_register8_register8(instructions_buffer, RBP, RSP);

        X86_64.autobuffer_buffer_push_add_register8_whole_8(instructions_buffer, RSP, +(+(16, +(-(arguments_size, returns_size), k)), 0));

        returns_size = -(returns_size, 8);

        X86_64.autobuffer_buffer_push_mov_register8_register8(instructions_buffer, RDX, RBP);
        X86_64.autobuffer_buffer_push_push_register8(instructions_buffer, RCX);
        X86_64.autobuffer_buffer_push_ret(instructions_buffer);
    };

    define output_retrieve = function(nodes: *Nodes, nodes_index: whole_8, program_data: *ProgramData, module_stack: *AutoBufferStack8, current_function_id: whole_8, function_argument_names: *AutoBuffer, function_argument_types: *AutoBuffer, variable_names: *AutoBuffer, variable_sizes: *AutoBuffer, variable_types: *AutoBufferStack8, variable_indexes: *AutoBufferStack8, variable_count: whole_8, global_types: *AutoBuffer, global_locations: *, bss_indexes_to_adjust: *AutoBufferStack8, bss_indexes_to_adjust_relative: *AutoBufferStack8, pushed_functions: *AutoBufferStack8, pushed_function_targets: *AutoBufferStack8, pointer_data: *, instructions_buffer: *AutoBufferBuffer) {
        declare retrieve_data = NodeRetrieveData.*cast(nodes_get_pointer_data(nodes, nodes_index));
        declare variable_names_array = NodeRetrieveData.>name(retrieve_data);
        declare variable_name_simple = *.cast(array8_get(variable_names_array, 0));

        declare variable_type, scope_index = .get_variable_linux-x86_64(variable_types, variable_name_simple);
        if !(=(variable_type, 0)) {
            variable_type = expand_module_name_array(variable_type, 0, &(module_id_map), &(module_references_map), module_stack, create_previous_results_list());
        };

        declare scope_variable_index = whole_8.cast(autobuffer_stack8_get(variable_indexes, scope_index));

        if !(=(variable_type, 0)) {
            declare size = .get_size(variable_type, nodes, program_data);

            declare location = calculate_variable_location(variable_count, variable_names, variable_sizes, variable_name_simple, scope_variable_index);

            if is_pointer(nodes, +(nodes_index, 1)) {
                X86_64.autobuffer_buffer_push_lea_register8_offset_register8(instructions_buffer, RBP, -(0, +(size, location)), RAX);
                X86_64.autobuffer_buffer_push_push_register8(instructions_buffer, RAX);
            } else {
                X86_64.autobuffer_buffer_push_sub_register8_whole_8(instructions_buffer, RSP, size);
                .output_copy_local_variable_stack(instructions_buffer, location, size);
            };
            return;
        };

        declare function_argument_names_individual = *.cast(autobuffer_array8_get(function_argument_names, current_function_id));
        declare function_argument_types_individual = *.cast(autobuffer_array8_get(function_argument_types, current_function_id));

        variable_type = stringarray_get(function_argument_names_individual, function_argument_types_individual, variable_name_simple, array8_length(function_argument_types_individual));
        if !(=(variable_type, 0)) {
            variable_type = expand_module_name_array(variable_type, 0, &(module_id_map), &(module_references_map), module_stack, create_previous_results_list());
        };

        if !(=(variable_type, 0)) {
            declare size = .get_size(variable_type, nodes, program_data);
            declare location = .get_size_multiple_reversed_array(function_argument_types_individual, stringarray_get_index(function_argument_names_individual, variable_name_simple, array8_length(function_argument_names_individual)), nodes, program_data);

            if is_pointer(nodes, +(nodes_index, 1)) {
                X86_64.autobuffer_buffer_push_lea_register8_offset_register8(instructions_buffer, RBP, +(16, location), RAX);
                X86_64.autobuffer_buffer_push_push_register8(instructions_buffer, RAX);
            } else {
                X86_64.autobuffer_buffer_push_sub_register8_whole_8(instructions_buffer, RSP, size);
                .output_copy_parameter_stack(instructions_buffer, location, size);
            };
            return;
        };

        declare define_types = &(ProgramData.>define_types(program_data));
        declare define_values = &(ProgramData.>define_values(program_data));

        declare module_expanded_name = expand_module_name_array(variable_names_array, 0, &(module_id_map), &(module_references_map), module_stack, create_previous_results_list());
        variable_type = get_define_type(define_types, define_values, module_expanded_name);

        if !(=(variable_type, 0)) {
            // TODO: Better way of handling retrieve outside of functions
            if !(string=(variable_type, "module")) {
                .output_retrieve_define(nodes, nodes_index, program_data, instructions_buffer, pushed_functions, pushed_function_targets, global_types, global_locations, bss_indexes_to_adjust, bss_indexes_to_adjust_relative, module_expanded_name, variable_type);
            };
        };
    };

    define output_retrieve_define = function(nodes: *Nodes, nodes_index: whole_8, program_data: *ProgramData, instructions_buffer: *AutoBufferBuffer, pushed_functions: *AutoBufferStack8, pushed_function_targets: *AutoBufferStack8, global_types: *AutoBuffer, global_locations: *, bss_indexes_to_adjust: *AutoBufferStack8, bss_indexes_to_adjust_relative: *AutoBufferStack8, variable_name: *, variable_type_in: *) {
        declare variable_type = variable_type_in;
        declare define_types = &(ProgramData.>define_types(program_data));
        declare define_values = &(ProgramData.>define_values(program_data));
        declare define_or_declares = &(ProgramData.>define_or_declares(program_data));
        declare define_or_declare = *.cast(hashmap_string_get(define_or_declares, variable_name));
        declare define_value = get_value_of_define(define_types, define_values, variable_name);

        if string=(variable_type, "define") {
            declare value = *.cast(get_value_of_define(define_types, define_values, variable_name));
            declare i = 0;
            while <(i, array8_length(value)) {
                i = +(i, 1);
            };

            declare value2 = *.cast(array8_get(value, 0));
            variable_type = *.cast(get_define_retrieve_type(define_types, define_values, value2));
            define_value = *.cast(get_value_of_define(define_types, define_values, value2));

            if |(string=(variable_type, "module"), string=(variable_type, "define")) {
                return;
            };
        };

        if string_length=(variable_type, "*function", 9) {
            declare push_function_instruction = X86_64.autobuffer_buffer_push_push_instruction_pointer(instructions_buffer);
            autobuffer_stack8_push(pushed_functions, any_8.cast(push_function_instruction));
            autobuffer_stack8_push(pushed_function_targets, define_value);
        } else if string_length=(variable_type, "structure", 9) {
        } else if string_length=(variable_type, "global[", 7) {
            declare define_value = hashmap_string_get2(define_values, variable_name);
            declare variable_type = *.cast(autobuffer_array8_get(global_types, whole_8.cast(define_value)));

            declare size = .get_size(variable_type, nodes, program_data);

            declare define_value = whole_8.cast(hashmap_string_get2(define_values, variable_name));
            declare global_index = BssIndex.cast(array8_get(global_locations, define_value));

            if is_pointer(nodes, +(nodes_index, 1)) {
                ELF_X86_64.autobuffer_buffer_push_push_bss(instructions_buffer, bss_indexes_to_adjust, global_index);
            } else {
                X86_64.autobuffer_buffer_push_sub_register8_whole_8(instructions_buffer, RSP, size);
                .output_copy_global_stack(instructions_buffer, bss_indexes_to_adjust_relative, global_index, size);
            };
        } else if string=(define_or_declare, "declare") {
            declare variable_type = *.cast(hashmap_string_get(define_types, variable_name));

            declare size = .get_size(variable_type, nodes, program_data);

            declare define_value = whole_8.cast(hashmap_string_get2(define_values, variable_name));
            declare global_index = BssIndex.cast(array8_get(global_locations, define_value));

            if is_pointer(nodes, +(nodes_index, 1)) {
                ELF_X86_64.autobuffer_buffer_push_push_bss(instructions_buffer, bss_indexes_to_adjust, global_index);
            } else {
                X86_64.autobuffer_buffer_push_sub_register8_whole_8(instructions_buffer, RSP, size);
                .output_copy_global_stack(instructions_buffer, bss_indexes_to_adjust_relative, global_index, size);
            };
        } else {
            declare size = .get_size(variable_type, nodes, program_data);
            if =(size, 8) {
                X86_64.autobuffer_buffer_push_mov_whole_8_register8(instructions_buffer, RAX, whole_8.cast(define_value));
                X86_64.autobuffer_buffer_push_sub_register8_whole_8(instructions_buffer, RSP, 8);
                X86_64.autobuffer_buffer_push_mov_register8_register8_pointer_offset(instructions_buffer, RAX, RSP, 0);
            } else if =(size, 1) {
                X86_64.autobuffer_buffer_push_mov_whole_1_register1(instructions_buffer, AL, whole_8_to_whole_1(whole_8.cast(define_value)));
                X86_64.autobuffer_buffer_push_sub_register8_whole_8(instructions_buffer, RSP, 1);
                X86_64.autobuffer_buffer_push_mov_register1_register8_pointer_offset(instructions_buffer, AL, RSP, 0);
            } else {
                print("no size for ");
                println(variable_type);
            };
        };
    };

    define output_copy_local_variable_stack = function(instructions_buffer: *AutoBufferBuffer, location: whole_8, size: whole_8) {
        declare j = 0;
        while <(j, size) {
            if >(-(size, j), 7) {
                X86_64.autobuffer_buffer_push_mov_register8_pointer_offset_register8(instructions_buffer, RBP, -(0, -(+(size, location), j)), RAX);
                X86_64.autobuffer_buffer_push_mov_register8_register8_pointer_offset(instructions_buffer, RAX, RSP, j);
                j = +(j, 8);
            } else if >(-(size, j), 3) {
                X86_64.autobuffer_buffer_push_mov_register8_pointer_offset_register4(instructions_buffer, RBP, -(0, -(+(size, location), j)), EAX);
                X86_64.autobuffer_buffer_push_mov_register4_register8_pointer_offset(instructions_buffer, EAX, RSP, j);
                j = +(j, 4);
            } else if >(-(size, j), 1) {
                X86_64.autobuffer_buffer_push_mov_register8_pointer_offset_register2(instructions_buffer, RBP, -(0, -(+(size, location), j)), AX);
                X86_64.autobuffer_buffer_push_mov_register2_register8_pointer_offset(instructions_buffer, AX, RSP, j);

                j = +(j, 2);
            } else if >(-(size, j), 0) {
                X86_64.autobuffer_buffer_push_mov_register8_pointer_offset_register1(instructions_buffer, RBP, -(0, -(+(size, location), j)), AL);
                X86_64.autobuffer_buffer_push_mov_register1_register8_pointer_offset(instructions_buffer, AL, RSP, j);

                j = +(j, 1);
            };
        };
    };

    define output_copy_parameter_stack = function(instructions_buffer: *AutoBufferBuffer, location: whole_8, size: whole_8) {
        declare j = 0;
        while <(j, size) {
            if >(-(size, j), 7) {
                X86_64.autobuffer_buffer_push_mov_register8_pointer_offset_register8(instructions_buffer, RBP, +(+(16, location), j), RAX);
                X86_64.autobuffer_buffer_push_mov_register8_register8_pointer_offset(instructions_buffer, RAX, RSP, j);
                j = +(j, 8);
            } else if >(-(size, j), 3) {
                X86_64.autobuffer_buffer_push_mov_register8_pointer_offset_register4(instructions_buffer, RBP, +(+(16, location), j), EAX);
                X86_64.autobuffer_buffer_push_mov_register4_register8_pointer_offset(instructions_buffer, EAX, RSP, j);
                j = +(j, 4);
            } else if >(-(size, j), 1) {
                X86_64.autobuffer_buffer_push_mov_register8_pointer_offset_register2(instructions_buffer, RBP, +(+(16, location), j), AX);
                X86_64.autobuffer_buffer_push_mov_register2_register8_pointer_offset(instructions_buffer, AX, RSP, j);
                j = +(j, 2);
            } else if >(-(size, j), 0) {
                X86_64.autobuffer_buffer_push_mov_register8_pointer_offset_register1(instructions_buffer, RBP, +(+(16, location), j), AL);
                X86_64.autobuffer_buffer_push_mov_register1_register8_pointer_offset(instructions_buffer, AL, RSP, j);
                j = +(j, 1);
            };
        };
    };

    define output_copy_global_stack = function(instructions_buffer: *AutoBufferBuffer, bss_indexes_to_adjust_relative: *AutoBufferStack8, global_index: BssIndex, size: whole_8) {
        declare j = 0;
        while <(j, size) {
            if >(-(size, j), 7) {
                ELF_X86_64.autobuffer_buffer_push_mov_bss_offset_pointer_register8(instructions_buffer, bss_indexes_to_adjust_relative, global_index, j, RAX);
                X86_64.autobuffer_buffer_push_mov_register8_register8_pointer_offset(instructions_buffer, RAX, RSP, j);
                j = +(j, 8);
            } else if >(-(size, j), 3) {
                ELF_X86_64.autobuffer_buffer_push_mov_bss_offset_pointer_register4(instructions_buffer, bss_indexes_to_adjust_relative, global_index, j, EAX);
                X86_64.autobuffer_buffer_push_mov_register4_register8_pointer_offset(instructions_buffer, EAX, RSP, j);
                j = +(j, 4);
            } else if >(-(size, j), 1) {
                ELF_X86_64.autobuffer_buffer_push_mov_bss_offset_pointer_register2(instructions_buffer, bss_indexes_to_adjust_relative, global_index, j, AX);
                X86_64.autobuffer_buffer_push_mov_register2_register8_pointer_offset(instructions_buffer, AX, RSP, j);
                j = +(j, 2);
            } else if >(-(size, j), 0) {
                ELF_X86_64.autobuffer_buffer_push_mov_bss_offset_pointer_register1(instructions_buffer, bss_indexes_to_adjust_relative, global_index, j, AL);
                X86_64.autobuffer_buffer_push_mov_register1_register8_pointer_offset(instructions_buffer, AL, RSP, j);
                j = +(j, 1);
            };
        };
    };

    define output_assign = function(nodes: *Nodes, nodes_index: whole_8, program_data: *ProgramData, variable_names: *AutoBuffer, variable_sizes: *AutoBuffer, variable_types: *AutoBufferStack8, variable_indexes: *AutoBufferStack8, variable_count: whole_8, global_types: *AutoBuffer, global_locations: *, bss_indexes_to_adjust_relative: *AutoBufferStack8, module_stack: *AutoBufferStack8, pointer_data: *, instructions_buffer: *AutoBufferBuffer) {
        declare assign_data = NodeAssignData.*cast(pointer_data);
        declare variable_name = NodeAssignData.>name(assign_data);
        variable_name = expand_module_name_array(variable_name, 0, &(module_id_map), &(module_references_map), module_stack, create_previous_results_list());

        declare variable_type, scope_index = .get_variable_linux-x86_64(variable_types, variable_name);
        if !(=(variable_type, 0)) {
            variable_type = expand_module_name_array(variable_type, 0, &(module_id_map), &(module_references_map), module_stack, create_previous_results_list());
        };
        
        declare scope_variable_index = whole_8.cast(autobuffer_stack8_get(variable_indexes, scope_index));

        if !(=(variable_type, 0)) {
            declare size = .get_size(variable_type, nodes, program_data);
            declare location = calculate_variable_location(variable_count, variable_names, variable_sizes, variable_name, scope_variable_index);

            declare j = 0;
            while <(j, size) {
                if >(-(size, j), 7) {
                    X86_64.autobuffer_buffer_push_mov_register8_pointer_offset_register8(instructions_buffer, RSP, j, RAX);
                    X86_64.autobuffer_buffer_push_mov_register8_register8_pointer_offset(instructions_buffer, RAX, RBP, -(0, -(+(size, location), j)));

                    j = +(j, 8);
                } else if >(-(size, j), 3) {
                    X86_64.autobuffer_buffer_push_mov_register8_pointer_offset_register4(instructions_buffer, RSP, j, EAX);
                    X86_64.autobuffer_buffer_push_mov_register4_register8_pointer_offset(instructions_buffer, EAX, RBP, -(0, -(+(size, location), j)));

                    j = +(j, 4);
                } else if >(-(size, j), 1) {
                    X86_64.autobuffer_buffer_push_mov_register8_pointer_offset_register2(instructions_buffer, RSP, j, AX);
                    X86_64.autobuffer_buffer_push_mov_register2_register8_pointer_offset(instructions_buffer, AX, RBP, -(0, -(+(size, location), j)));

                    j = +(j, 2);
                } else if >(-(size, j), 0) {
                    X86_64.autobuffer_buffer_push_mov_register8_pointer_offset_register1(instructions_buffer, RSP, j, AL);
                    X86_64.autobuffer_buffer_push_mov_register1_register8_pointer_offset(instructions_buffer, AL, RBP, -(0, -(+(size, location), j)));

                    j = +(j, 1);
                };
            };
            
            X86_64.autobuffer_buffer_push_add_register8_whole_8(instructions_buffer, RSP, size);
        } else {
            declare define_values = &(ProgramData.>define_values(program_data));

            declare global_index = whole_8.cast(hashmap_string_get(define_values, variable_name));
            variable_type = *.cast(autobuffer_array8_get(global_types, global_index));
            declare global_location = BssIndex.cast(array8_get(global_locations, global_index));

            declare size = .get_size(variable_type, nodes, program_data);

            declare j = 0;
            while <(j, size) {
                if >(-(size, j), 7) {
                    X86_64.autobuffer_buffer_push_mov_register8_pointer_offset_register8(instructions_buffer, RSP, j, RAX);
                    ELF_X86_64.autobuffer_buffer_push_mov_register8_bss_pointer_offset(instructions_buffer, bss_indexes_to_adjust_relative, RAX, global_location, j);

                    j = +(j, 8);
                } else if >(-(size, j), 3) {
                    X86_64.autobuffer_buffer_push_mov_register8_pointer_offset_register4(instructions_buffer, RSP, j, EAX);
                    ELF_X86_64.autobuffer_buffer_push_mov_register4_bss_pointer_offset(instructions_buffer, bss_indexes_to_adjust_relative, EAX, global_location, j);

                    j = +(j, 4);
                } else if >(-(size, j), 1) {
                    X86_64.autobuffer_buffer_push_mov_register8_pointer_offset_register2(instructions_buffer, RSP, j, AX);
                    ELF_X86_64.autobuffer_buffer_push_mov_register2_bss_pointer_offset(instructions_buffer, bss_indexes_to_adjust_relative, AX, global_location, j);

                    j = +(j, 2);
                } else if >(-(size, j), 0) {
                    X86_64.autobuffer_buffer_push_mov_register8_pointer_offset_register1(instructions_buffer, RSP, j, AL);
                    ELF_X86_64.autobuffer_buffer_push_mov_register1_bss_pointer_offset(instructions_buffer, bss_indexes_to_adjust_relative, AL, global_location, j);

                    j = +(j, 1);
                };
            };

            X86_64.autobuffer_buffer_push_add_register8_whole_8(instructions_buffer, RSP, size);
        };
    };

    define get_variable_linux-x86_64 = function(variable_types: *AutoBufferStack8, variable_name: *): *, whole_8 {
        declare scope_count = AutoBufferStack8.>index(variable_types);
        declare scope_index = -(scope_count, 1);
        declare variable_type = *.cast(0);
        while &&(=(variable_type, 0), <(scope_index, scope_count)) {
            variable_type = *.cast(hashmap_string_get(HashMap.*cast(autobuffer_stack8_get(variable_types, scope_index)), variable_name));
            scope_index = -(scope_index, 1);
        };

        return variable_type, +(scope_index, 1);
    };

    define output_invoke = function(nodes: *Nodes, nodes_index: whole_8, program_data: *ProgramData, pointer_data: *, internal_function_instructions: *HashMap, internal_function_instruction_sizes: *HashMap, instructions_buffer: *AutoBufferBuffer) {
        .output_invoke_pointer(instructions_buffer);
        return;
    };

    define output_invoke_internal = function(nodes: *Nodes, nodes_index: whole_8, program_data: *ProgramData, pointer_data: *, internal_function_instructions: *HashMap, internal_function_instruction_sizes: *HashMap, instructions_buffer: *AutoBufferBuffer) {
        declare retrieve_data = NodeRetrieveData.*cast(nodes_get_pointer_data(nodes, -(nodes_index, 1)));
        declare function_name_array = NodeRetrieveData.>name(retrieve_data);
        declare function_name = *.cast(array8_get(function_name_array, 0));

        declare memory_function = *.cast(hashmap_string_get(internal_function_instructions, function_name));
        if !(=(memory_function, 0)) {
            declare memory_function_size = whole_8.cast(hashmap_string_get(internal_function_instruction_sizes, function_name));
            autobuffer_buffer_push_pointer(instructions_buffer, memory_function, memory_function_size);
        }
        else if string_length=(function_name, "=_", 2) .output_equals_internal(nodes, program_data, +(function_name, 2), instructions_buffer)
        else if string_length=(function_name, ">_", 2) .output_greater_internal(nodes, program_data, +(function_name, 2), instructions_buffer)
        else if string_length=(function_name, "<_", 2) .output_less_internal(nodes, program_data, +(function_name, 2), instructions_buffer)
        else if string_length=(function_name, "+_", 2) .output_add_internal(nodes, program_data, +(function_name, 2), instructions_buffer)
        else if string_length=(function_name, "-_", 2) .output_subtract_internal(nodes, program_data, +(function_name, 2), instructions_buffer)
        else if string_length=(function_name, "*_", 2) .output_multiply_internal(nodes, program_data, +(function_name, 2), instructions_buffer)
        else if string_length=(function_name, "/_", 2) .output_divide_internal(nodes, program_data, +(function_name, 2), instructions_buffer)
        else if string_length=(function_name, "%_", 2) .output_modulo_internal(nodes, program_data, +(function_name, 2), instructions_buffer)
        else if string=(function_name, "!") .output_not_internal(instructions_buffer)
        else if string=(function_name, "|") .output_or_internal(instructions_buffer)
        else if string=(function_name, "&&") .output_and_internal(instructions_buffer)
        else if string=(function_name, "@syscall0") .output_syscall0_internal(instructions_buffer)
        else if string=(function_name, "@syscall1") .output_syscall1_internal(instructions_buffer)
        else if string=(function_name, "@syscall2") .output_syscall2_internal(instructions_buffer)
        else if string=(function_name, "@syscall3") .output_syscall3_internal(instructions_buffer)
        else if string=(function_name, "@syscall4") .output_syscall4_internal(instructions_buffer)
        else if string=(function_name, "@syscall5") .output_syscall5_internal(instructions_buffer)
        else if string=(function_name, "@syscall6") .output_syscall6_internal(instructions_buffer);
    };

    define output_syscall0_internal = function(instructions_buffer: *AutoBufferBuffer) {
        X86_64.autobuffer_buffer_push_pop_register8(instructions_buffer, RAX);
        X86_64.autobuffer_buffer_push_syscall(instructions_buffer);
        X86_64.autobuffer_buffer_push_push_register8(instructions_buffer, RAX);
    };

    define output_syscall1_internal = function(instructions_buffer: *AutoBufferBuffer) {
        X86_64.autobuffer_buffer_push_pop_register8(instructions_buffer, RDI);
        .output_syscall0_internal(instructions_buffer);
    };

    define output_syscall2_internal = function(instructions_buffer: *AutoBufferBuffer) {
        X86_64.autobuffer_buffer_push_pop_register8(instructions_buffer, RSI);
        .output_syscall1_internal(instructions_buffer);
    };

    define output_syscall3_internal = function(instructions_buffer: *AutoBufferBuffer) {
        X86_64.autobuffer_buffer_push_pop_register8(instructions_buffer, RDX);
        .output_syscall2_internal(instructions_buffer);
    };

    define output_syscall4_internal = function(instructions_buffer: *AutoBufferBuffer) {
        X86_64.autobuffer_buffer_push_pop_register8(instructions_buffer, R10);
        .output_syscall3_internal(instructions_buffer);
    };

    define output_syscall5_internal = function(instructions_buffer: *AutoBufferBuffer) {
        X86_64.autobuffer_buffer_push_pop_register8(instructions_buffer, R8);
        .output_syscall4_internal(instructions_buffer);
    };

    define output_syscall6_internal = function(instructions_buffer: *AutoBufferBuffer) {
        X86_64.autobuffer_buffer_push_pop_register8(instructions_buffer, R9);
        .output_syscall5_internal(instructions_buffer);
    };

    define output_equals_internal = function(nodes: *Nodes, program_data: *ProgramData, type: *, instructions_buffer: *AutoBufferBuffer) {
        declare size = .get_size(type, nodes, program_data);

        .output_compare(instructions_buffer, size);

        X86_64.autobuffer_buffer_push_mov_whole_8_register8(instructions_buffer, RCX, 0);
        X86_64.autobuffer_buffer_push_mov_whole_8_register8(instructions_buffer, RBX, 1);
        X86_64.autobuffer_buffer_push_cmove_register8_register8(instructions_buffer, RCX, RBX);
        X86_64.autobuffer_buffer_push_sub_register8_whole_8(instructions_buffer, RSP, 1);
        X86_64.autobuffer_buffer_push_mov_register1_register8_pointer_offset(instructions_buffer, CL, RSP, 0);
    };

    define output_greater_internal = function(nodes: *Nodes, program_data: *ProgramData, type: *, instructions_buffer: *AutoBufferBuffer) {
        declare size = .get_size(type, nodes, program_data);
        declare signed = =(is_signed(type, nodes), 1);

        .output_compare(instructions_buffer, size);

        X86_64.autobuffer_buffer_push_mov_whole_8_register8(instructions_buffer, RCX, 0);
        X86_64.autobuffer_buffer_push_mov_whole_8_register8(instructions_buffer, RBX, 1);
        if signed {
            X86_64.autobuffer_buffer_push_cmovl_register8_register8(instructions_buffer, RCX, RBX);
        } else {
            X86_64.autobuffer_buffer_push_cmovb_register8_register8(instructions_buffer, RCX, RBX);
        };
        X86_64.autobuffer_buffer_push_sub_register8_whole_8(instructions_buffer, RSP, 1);
        X86_64.autobuffer_buffer_push_mov_register1_register8_pointer_offset(instructions_buffer, CL, RSP, 0);
    };

    define output_less_internal = function(nodes: *Nodes, program_data: *ProgramData, type: *, instructions_buffer: *AutoBufferBuffer) {
        declare size = .get_size(type, nodes, program_data);
        declare signed = =(is_signed(type, nodes), 1);

        .output_compare(instructions_buffer, size);

        X86_64.autobuffer_buffer_push_mov_whole_8_register8(instructions_buffer, RCX, 0);
        X86_64.autobuffer_buffer_push_mov_whole_8_register8(instructions_buffer, RBX, 1);
        if signed {
            X86_64.autobuffer_buffer_push_cmovg_register8_register8(instructions_buffer, RCX, RBX);
        } else {
            X86_64.autobuffer_buffer_push_cmova_register8_register8(instructions_buffer, RCX, RBX);
        };
        X86_64.autobuffer_buffer_push_sub_register8_whole_8(instructions_buffer, RSP, 1);
        X86_64.autobuffer_buffer_push_mov_register1_register8_pointer_offset(instructions_buffer, CL, RSP, 0);
    };

    define output_not_internal = function(instructions_buffer: *AutoBufferBuffer) {
        X86_64.autobuffer_buffer_push_mov_whole_8_register8(instructions_buffer, RAX, 0);
        X86_64.autobuffer_buffer_push_mov_register8_pointer_offset_register1(instructions_buffer, RSP, 0, AL);
        X86_64.autobuffer_buffer_push_add_register8_whole_8(instructions_buffer, RSP, 1);
        //TODO compare directly with whole_8
        X86_64.autobuffer_buffer_push_mov_whole_8_register8(instructions_buffer, RBX, 0);
        X86_64.autobuffer_buffer_push_cmp_register8_register8(instructions_buffer, RAX, RBX);
        X86_64.autobuffer_buffer_push_mov_whole_8_register8(instructions_buffer, RCX, 0);
        X86_64.autobuffer_buffer_push_mov_whole_8_register8(instructions_buffer, RBX, 1);
        X86_64.autobuffer_buffer_push_cmove_register8_register8(instructions_buffer, RCX, RBX);
        X86_64.autobuffer_buffer_push_sub_register8_whole_8(instructions_buffer, RSP, 1);
        X86_64.autobuffer_buffer_push_mov_register1_register8_pointer_offset(instructions_buffer, CL, RSP, 0);
    };

    define output_or_internal = function(instructions_buffer: *AutoBufferBuffer) {
        X86_64.autobuffer_buffer_push_mov_register8_pointer_offset_register1(instructions_buffer, RSP, 0, AL);
        X86_64.autobuffer_buffer_push_add_register8_whole_8(instructions_buffer, RSP, 1);
        X86_64.autobuffer_buffer_push_mov_register8_pointer_offset_register1(instructions_buffer, RSP, 0, BL);
        X86_64.autobuffer_buffer_push_add_register8_whole_8(instructions_buffer, RSP, 1);
        X86_64.autobuffer_buffer_push_sub_register8_whole_8(instructions_buffer, RSP, 1);
        X86_64.autobuffer_buffer_push_or_register1_register1(instructions_buffer, AL, BL);
        X86_64.autobuffer_buffer_push_mov_register1_register8_pointer_offset(instructions_buffer, AL, RSP, 0);
    };

    define output_and_internal = function(instructions_buffer: *AutoBufferBuffer) {
        X86_64.autobuffer_buffer_push_mov_register8_pointer_offset_register1(instructions_buffer, RSP, 0, AL);
        X86_64.autobuffer_buffer_push_add_register8_whole_8(instructions_buffer, RSP, 1);
        X86_64.autobuffer_buffer_push_mov_register8_pointer_offset_register1(instructions_buffer, RSP, 0, BL);
        X86_64.autobuffer_buffer_push_add_register8_whole_8(instructions_buffer, RSP, 1);
        X86_64.autobuffer_buffer_push_sub_register8_whole_8(instructions_buffer, RSP, 1);
        X86_64.autobuffer_buffer_push_and_register1_register1(instructions_buffer, AL, BL);
        X86_64.autobuffer_buffer_push_mov_register1_register8_pointer_offset(instructions_buffer, AL, RSP, 0);
    };

    define output_add_internal = function(nodes: *Nodes, program_data: *ProgramData, type: *, instructions_buffer: *AutoBufferBuffer) {
        declare size = .get_size(type, nodes, program_data);

        if =(size, 8) {
            .output_2pop8(instructions_buffer, RAX, RBX);
            X86_64.autobuffer_buffer_push_add_register8_register8(instructions_buffer, RAX, RBX);
            .output_push8(instructions_buffer, RAX);
        } else if =(size, 4) {
            .output_2pop4(instructions_buffer, EAX, EBX);
            X86_64.autobuffer_buffer_push_add_register8_register8(instructions_buffer, RAX, RBX);
            X86_64.autobuffer_buffer_push_add_register4_register4(instructions_buffer, EAX, EBX);
            .output_push4(instructions_buffer, EAX);
        } else if =(size, 2) {
            .output_2pop2(instructions_buffer, AX, BX);
            X86_64.autobuffer_buffer_push_add_register2_register2(instructions_buffer, AX, BX);
            .output_push2(instructions_buffer, AX);
        } else if =(size, 1) {
            .output_2pop1(instructions_buffer, AL, BL);
            X86_64.autobuffer_buffer_push_add_register1_register1(instructions_buffer, AL, BL);
            .output_push1(instructions_buffer, AL);
        };
    };

    define output_subtract_internal = function(nodes: *Nodes, program_data: *ProgramData, type: *, instructions_buffer: *AutoBufferBuffer) {
        declare size = .get_size(type, nodes, program_data);

        if =(size, 8) {
            .output_2pop8(instructions_buffer, RAX, RBX);
            X86_64.autobuffer_buffer_push_sub_register8_register8(instructions_buffer, RBX, RAX);
            .output_push8(instructions_buffer, RBX);
        } else if =(size, 4) {
            .output_2pop4(instructions_buffer, EAX, EBX);
            X86_64.autobuffer_buffer_push_sub_register4_register4(instructions_buffer, EBX, EAX);
            .output_push4(instructions_buffer, EBX);
        } else if =(size, 2) {
            .output_2pop2(instructions_buffer, AX, BX);
            X86_64.autobuffer_buffer_push_sub_register2_register2(instructions_buffer, BX, AX);
            .output_push2(instructions_buffer, BX);
        } else if =(size, 1) {
            .output_2pop1(instructions_buffer, AL, BL);
            X86_64.autobuffer_buffer_push_sub_register1_register1(instructions_buffer, BL, AL);
            .output_push1(instructions_buffer, BL);
        };
    };

    define output_multiply_internal = function(nodes: *Nodes, program_data: *ProgramData, type: *, instructions_buffer: *AutoBufferBuffer) {
        declare size = .get_size(type, nodes, program_data);
        declare signed = =(is_signed(type, nodes), 1);

        if =(size, 8) {
            .output_2pop8(instructions_buffer, RAX, RBX);
            if signed {
                X86_64.autobuffer_buffer_push_imul_register8(instructions_buffer, RBX);
            } else {
                X86_64.autobuffer_buffer_push_mul_register8(instructions_buffer, RBX);
            };
            .output_push8(instructions_buffer, RAX);
        } else if =(size, 4) {
            .output_2pop4(instructions_buffer, EAX, EBX);
            if signed {
                X86_64.autobuffer_buffer_push_imul_register4(instructions_buffer, EBX);
            } else {
                X86_64.autobuffer_buffer_push_mul_register4(instructions_buffer, EBX);
            };
            .output_push4(instructions_buffer, EAX);
        } else if =(size, 2) {
            .output_2pop2(instructions_buffer, AX, BX);
            if signed {
                X86_64.autobuffer_buffer_push_imul_register2(instructions_buffer, BX);
            } else {
                X86_64.autobuffer_buffer_push_mul_register2(instructions_buffer, BX);
            };
            .output_push2(instructions_buffer, AX);
        } else if =(size, 1) {
            .output_2pop1(instructions_buffer, AL, BL);
            if signed {
                X86_64.autobuffer_buffer_push_imul_register1(instructions_buffer, BL);
            } else {
                X86_64.autobuffer_buffer_push_mul_register1(instructions_buffer, BL);
            };
            .output_push1(instructions_buffer, AL);
        };
    };

    define output_divide_internal = function(nodes: *Nodes, program_data: *ProgramData, type: *, instructions_buffer: *AutoBufferBuffer) {
        declare size = .get_size(type, nodes, program_data);
        declare signed = =(is_signed(type, nodes), 1);

        if =(size, 8) {
            .output_2pop8(instructions_buffer, RBX, RAX);
            if signed {
                X86_64.autobuffer_buffer_push_cqo(instructions_buffer);
                X86_64.autobuffer_buffer_push_idiv_register8(instructions_buffer, RBX);
            } else {
                X86_64.autobuffer_buffer_push_mov_whole_8_register8(instructions_buffer, RDX, 0);
                X86_64.autobuffer_buffer_push_div_register8(instructions_buffer, RBX);
            };
            .output_push8(instructions_buffer, RAX);
        } else if =(size, 4) {
            .output_2pop4(instructions_buffer, EBX, EAX);
            if signed {
                X86_64.autobuffer_buffer_push_cdq(instructions_buffer);
                X86_64.autobuffer_buffer_push_idiv_register4(instructions_buffer, EBX);
            } else {
                X86_64.autobuffer_buffer_push_mov_whole_4_register4(instructions_buffer, EDX, 0:whole_4);
                X86_64.autobuffer_buffer_push_div_register4(instructions_buffer, EBX);
            };
            .output_push4(instructions_buffer, EAX);
        } else if =(size, 2) {
            .output_2pop2(instructions_buffer, BX, AX);
            if signed {
                X86_64.autobuffer_buffer_push_cwd(instructions_buffer);
                X86_64.autobuffer_buffer_push_idiv_register2(instructions_buffer, BX);
            } else {
                X86_64.autobuffer_buffer_push_mov_whole_2_register2(instructions_buffer, DX, 0:whole_2);
                X86_64.autobuffer_buffer_push_div_register2(instructions_buffer, BX);
            };
            .output_push2(instructions_buffer, AX);
        } else if =(size, 1) {
            .output_2pop1(instructions_buffer, BL, AL);
            if signed {
                X86_64.autobuffer_buffer_push_cbw(instructions_buffer);
                X86_64.autobuffer_buffer_push_idiv_register1(instructions_buffer, BL);
            } else {
                X86_64.autobuffer_buffer_push_mov_whole_1_register1(instructions_buffer, DL, 0:whole_1);
                X86_64.autobuffer_buffer_push_div_register1(instructions_buffer, BL);
            };
            .output_push1(instructions_buffer, AL);
        };
    };

    define output_modulo_internal = function(nodes: *Nodes, program_data: *ProgramData, type: *, instructions_buffer: *AutoBufferBuffer) {
        declare size = .get_size(type, nodes, program_data);
        declare signed = =(is_signed(type, nodes), 1);

        if =(size, 8) {
            .output_2pop8(instructions_buffer, RBX, RAX);
            if signed {
                X86_64.autobuffer_buffer_push_cqo(instructions_buffer);
                X86_64.autobuffer_buffer_push_idiv_register8(instructions_buffer, RBX);
            } else {
                X86_64.autobuffer_buffer_push_mov_whole_8_register8(instructions_buffer, RDX, 0);
                X86_64.autobuffer_buffer_push_div_register8(instructions_buffer, RBX);
            };
            .output_push8(instructions_buffer, RDX);
        } else if =(size, 4) {
            .output_2pop4(instructions_buffer, EBX, EAX);
            if signed {
                X86_64.autobuffer_buffer_push_cdq(instructions_buffer);
                X86_64.autobuffer_buffer_push_idiv_register4(instructions_buffer, EBX);
            } else {
                X86_64.autobuffer_buffer_push_mov_whole_4_register4(instructions_buffer, EDX, 0:whole_4);
                X86_64.autobuffer_buffer_push_div_register4(instructions_buffer, EBX);
            };
            .output_push4(instructions_buffer, EDX);
        } else if =(size, 2) {
            .output_2pop2(instructions_buffer, BX, AX);
            if signed {
                X86_64.autobuffer_buffer_push_cwd(instructions_buffer);
                X86_64.autobuffer_buffer_push_idiv_register2(instructions_buffer, BX);
            } else {
                X86_64.autobuffer_buffer_push_mov_whole_2_register2(instructions_buffer, DX, 0:whole_2);
                X86_64.autobuffer_buffer_push_div_register2(instructions_buffer, BX);
            };
            .output_push2(instructions_buffer, DX);
        } else if =(size, 1) {
            .output_2pop1(instructions_buffer, BL, AL);
            if signed {
                X86_64.autobuffer_buffer_push_cbw(instructions_buffer);
                X86_64.autobuffer_buffer_push_idiv_register1(instructions_buffer, BL);
            } else {
                X86_64.autobuffer_buffer_push_mov_whole_1_register1(instructions_buffer, DL, 0:whole_1);
                X86_64.autobuffer_buffer_push_div_register1(instructions_buffer, BL);
            };
            .output_push1(instructions_buffer, DL);
        };
    };

    define output_push8 = function(instructions_buffer: *AutoBufferBuffer, register: Register8) {
        X86_64.autobuffer_buffer_push_push_register8(instructions_buffer, register);
    };

    define output_push4 = function(instructions_buffer: *AutoBufferBuffer, register: Register4) {
        X86_64.autobuffer_buffer_push_sub_register8_whole_8(instructions_buffer, RSP, 4);
        X86_64.autobuffer_buffer_push_mov_register4_register8_pointer_offset(instructions_buffer, register, RSP, 0);
    };

    define output_push2 = function(instructions_buffer: *AutoBufferBuffer, register: Register2) {
        X86_64.autobuffer_buffer_push_sub_register8_whole_8(instructions_buffer, RSP, 2);
        X86_64.autobuffer_buffer_push_mov_register2_register8_pointer_offset(instructions_buffer, register, RSP, 0);
    };

    define output_push1 = function(instructions_buffer: *AutoBufferBuffer, register: Register1) {
        X86_64.autobuffer_buffer_push_sub_register8_whole_8(instructions_buffer, RSP, 1);
        X86_64.autobuffer_buffer_push_mov_register1_register8_pointer_offset(instructions_buffer, register, RSP, 0);
    };

    define output_2pop8 = function(instructions_buffer: *AutoBufferBuffer, register1: Register8, register2: Register8) {
        X86_64.autobuffer_buffer_push_pop_register8(instructions_buffer, register1);
        X86_64.autobuffer_buffer_push_pop_register8(instructions_buffer, register2);
    };

    define output_2pop4 = function(instructions_buffer: *AutoBufferBuffer, register1: Register4, register2: Register4) {
        X86_64.autobuffer_buffer_push_mov_register8_pointer_offset_register4(instructions_buffer, RSP, 0, register1);
        X86_64.autobuffer_buffer_push_mov_register8_pointer_offset_register4(instructions_buffer, RSP, 4, register2);
        X86_64.autobuffer_buffer_push_add_register8_whole_8(instructions_buffer, RSP, 8);
    };

    define output_2pop2 = function(instructions_buffer: *AutoBufferBuffer, register1: Register2, register2: Register2) {
        X86_64.autobuffer_buffer_push_mov_register8_pointer_offset_register2(instructions_buffer, RSP, 0, register1);
        X86_64.autobuffer_buffer_push_mov_register8_pointer_offset_register2(instructions_buffer, RSP, 2, register2);
        X86_64.autobuffer_buffer_push_add_register8_whole_8(instructions_buffer, RSP, 4);
    };

    define output_2pop1 = function(instructions_buffer: *AutoBufferBuffer, register1: Register1, register2: Register1) {
        X86_64.autobuffer_buffer_push_mov_register8_pointer_offset_register1(instructions_buffer, RSP, 0, register1);
        X86_64.autobuffer_buffer_push_mov_register8_pointer_offset_register1(instructions_buffer, RSP, 1, register2);
        X86_64.autobuffer_buffer_push_add_register8_whole_8(instructions_buffer, RSP, 2);
    };

    define output_compare = function(instructions_buffer: *AutoBufferBuffer, size: whole_8) {
        if =(size, 8) {
            X86_64.autobuffer_buffer_push_pop_register8(instructions_buffer, RAX);
            X86_64.autobuffer_buffer_push_pop_register8(instructions_buffer, RBX);
            X86_64.autobuffer_buffer_push_cmp_register8_register8(instructions_buffer, RAX, RBX);
        } else if =(size, 4) {
            X86_64.autobuffer_buffer_push_mov_register8_pointer_offset_register4(instructions_buffer, RSP, 0, EAX);
            X86_64.autobuffer_buffer_push_mov_register8_pointer_offset_register4(instructions_buffer, RSP, 4, EBX);
            X86_64.autobuffer_buffer_push_add_register8_whole_8(instructions_buffer, RSP, 8);
            X86_64.autobuffer_buffer_push_cmp_register4_register4(instructions_buffer, EAX, EBX);
        } else if =(size, 2) {
            X86_64.autobuffer_buffer_push_mov_register8_pointer_offset_register2(instructions_buffer, RSP, 0, AX);
            X86_64.autobuffer_buffer_push_mov_register8_pointer_offset_register2(instructions_buffer, RSP, 2, BX);
            X86_64.autobuffer_buffer_push_add_register8_whole_8(instructions_buffer, RSP, 4);
            X86_64.autobuffer_buffer_push_cmp_register2_register2(instructions_buffer, AX, BX);
        } else if =(size, 1) {
            X86_64.autobuffer_buffer_push_mov_register8_pointer_offset_register1(instructions_buffer, RSP, 0, AL);
            X86_64.autobuffer_buffer_push_mov_register8_pointer_offset_register1(instructions_buffer, RSP, 1, BL);
            X86_64.autobuffer_buffer_push_add_register8_whole_8(instructions_buffer, RSP, 2);
            X86_64.autobuffer_buffer_push_cmp_register1_register1(instructions_buffer, AL, BL);
        };
    };

    define output_boolean = function(pointer_data: *, instructions_buffer: *AutoBufferBuffer) {
        declare boolean_data = NodeBooleanData.*cast(pointer_data);
        declare value_boolean = NodeBooleanData.>value(boolean_data);

        X86_64.autobuffer_buffer_push_sub_register8_whole_8(instructions_buffer, RSP, 1);

        if value_boolean {
            X86_64.autobuffer_buffer_push_mov_whole_8_register8(instructions_buffer, RAX, 1);
        } else {
            X86_64.autobuffer_buffer_push_mov_whole_8_register8(instructions_buffer, RAX, 0);
        };

        X86_64.autobuffer_buffer_push_mov_register1_register8_pointer_offset(instructions_buffer, AL, RSP, 0);
    };

    define output_number = function(module_stack: *AutoBufferStack8, pointer_data: *, instructions_buffer: *AutoBufferBuffer) {
        declare number_data = NodeNumberData.*cast(pointer_data);
        declare value_whole_8 = NodeNumberData.>value(number_data);
        declare coersion = NodeNumberData.>coersion(number_data);
        if =(coersion, 0) {
            coersion = "whole_8";
        } else {
            coersion = expand_module_name_array(coersion, 0, &(module_id_map), &(module_references_map), module_stack, create_previous_results_list());
        };

        declare size = if string_length=(coersion, "whole_", 6) {
            string_to_whole_8(+(coersion, 6))
        } else {
            string_to_whole_8(+(coersion, 8))
        };

        X86_64.autobuffer_buffer_push_sub_register8_whole_8(instructions_buffer, RSP, size);
        if =(size, 8) {
            X86_64.autobuffer_buffer_push_mov_whole_8_register8(instructions_buffer, RAX, value_whole_8);
            X86_64.autobuffer_buffer_push_mov_register8_register8_pointer_offset(instructions_buffer, RAX, RSP, 0);
        } else if =(size, 4) {
            X86_64.autobuffer_buffer_push_mov_whole_4_register4(instructions_buffer, EAX, whole_8_to_whole_4(value_whole_8));
            X86_64.autobuffer_buffer_push_mov_register4_register8_pointer_offset(instructions_buffer, EAX, RSP, 0);
        } else if =(size, 2) {
            X86_64.autobuffer_buffer_push_mov_whole_2_register2(instructions_buffer, AX, whole_8_to_whole_2(value_whole_8));
            X86_64.autobuffer_buffer_push_mov_register2_register8_pointer_offset(instructions_buffer, AX, RSP, 0);
        } else if =(size, 1) {
            X86_64.autobuffer_buffer_push_mov_whole_1_register1(instructions_buffer, AL, whole_1.cast(whole_8_to_whole_1(value_whole_8)));
            X86_64.autobuffer_buffer_push_mov_register1_register8_pointer_offset(instructions_buffer, AL, RSP, 0);
        };
    };

    define create_structure_internal_functions = function(program_data: *ProgramData, nodes: *Nodes, internal_function_instructions: *HashMap, internal_function_instruction_sizes: *HashMap) {
        declare structure_datas = &(ProgramData.>structure_datas(program_data));
        declare structure_count = AutoBufferStack8.>index(structure_datas);

        declare structure_member_types = &(ProgramData.>structure_member_types(program_data));

        declare define_values = &(ProgramData.>define_values(program_data));

        declare i = 0;
        while <(i, structure_count) {
            declare structure_data = NodeStructureData.*cast(autobuffer_stack8_get(structure_datas, i));
            declare structure_name = NodeStructureData.>name(structure_data);

            declare size = .get_size(structure_name, nodes, program_data);

            // Setter for whole value
            declare internal_name = concatenate2_brk_allocate(structure_name, "<");
            declare internal_instructions = autobuffer_buffer_new(8192);

            X86_64.autobuffer_buffer_push_add_register8_whole_8(&(internal_instructions), RSP, size);
            X86_64.autobuffer_buffer_push_mov_register8_pointer_offset_register8(&(internal_instructions), RSP, 0, RAX);
            X86_64.autobuffer_buffer_push_sub_register8_whole_8(&(internal_instructions), RSP, size);

            declare j = 0;
            while <(j, size) {
                if >(-(size, j), 7) {
                    X86_64.autobuffer_buffer_push_mov_register8_pointer_offset_register8(&(internal_instructions), RSP, j, RBX);
                    X86_64.autobuffer_buffer_push_mov_register8_register8_pointer_offset(&(internal_instructions), RBX, RAX, j);

                    j = +(j, 8);
                } else if >(-(size, j), 3) {
                    X86_64.autobuffer_buffer_push_mov_register8_pointer_offset_register4(&(internal_instructions), RSP, j, EBX);
                    X86_64.autobuffer_buffer_push_mov_register4_register8_pointer_offset(&(internal_instructions), EBX, RAX, j);

                    j = +(j, 4);
                } else if >(-(size, j), 1) {
                    X86_64.autobuffer_buffer_push_mov_register8_pointer_offset_register2(&(internal_instructions), RSP, j, BX);
                    X86_64.autobuffer_buffer_push_mov_register2_register8_pointer_offset(&(internal_instructions), BX, RAX, j);

                    j = +(j, 2);
                } else if >(-(size, j), 0) {
                    X86_64.autobuffer_buffer_push_mov_register8_pointer_offset_register1(&(internal_instructions), RSP, j, BL);
                    X86_64.autobuffer_buffer_push_mov_register1_register8_pointer_offset(&(internal_instructions), BL, RAX, j);

                    j = +(j, 1);
                };
            };

            X86_64.autobuffer_buffer_push_add_register8_whole_8(&(internal_instructions), RSP, +(size, 8));

            hashmap_string_put(internal_function_instructions, internal_name, autobuffer_buffer_get_buffer_pointer(&(internal_instructions)));
            hashmap_string_put(internal_function_instruction_sizes, internal_name, AutoBufferBuffer.>index(&(internal_instructions)));

            // Getter for whole value
            declare internal_name = concatenate2_brk_allocate(structure_name, ">");
            declare internal_instructions = autobuffer_buffer_new(8192);

            X86_64.autobuffer_buffer_push_pop_register8(&(internal_instructions), RAX);
            X86_64.autobuffer_buffer_push_sub_register8_whole_8(&(internal_instructions), RSP, size);

            declare k = 0;
            while <(k, size) {
                if >(-(size, k), 7) {
                    X86_64.autobuffer_buffer_push_mov_register8_pointer_offset_register8(&(internal_instructions), RAX, k, RBX);
                    X86_64.autobuffer_buffer_push_mov_register8_register8_pointer_offset(&(internal_instructions), RBX, RSP, k);

                    k = +(k, 8);
                } else if >(-(size, k), 3) {
                    X86_64.autobuffer_buffer_push_mov_register8_pointer_offset_register4(&(internal_instructions), RAX, k, EBX);
                    X86_64.autobuffer_buffer_push_mov_register4_register8_pointer_offset(&(internal_instructions), EBX, RSP, k);

                    k = +(k, 4);
                } else if >(-(size, k), 1) {
                    X86_64.autobuffer_buffer_push_mov_register8_pointer_offset_register2(&(internal_instructions), RAX, k, BX);
                    X86_64.autobuffer_buffer_push_mov_register2_register8_pointer_offset(&(internal_instructions), BX, RSP, k);

                    k = +(k, 2);
                } else if >(-(size, k), 0) {
                    X86_64.autobuffer_buffer_push_mov_register8_pointer_offset_register1(&(internal_instructions), RAX, k, BL);
                    X86_64.autobuffer_buffer_push_mov_register1_register8_pointer_offset(&(internal_instructions), BL, RSP, k);

                    k = +(k, 1);
                };
            };

            hashmap_string_put(internal_function_instructions, internal_name, autobuffer_buffer_get_buffer_pointer(&(internal_instructions)));
            hashmap_string_put(internal_function_instruction_sizes, internal_name, AutoBufferBuffer.>index(&(internal_instructions)));

            declare internal_name = structure_name;
            declare internal_instructions = autobuffer_buffer_new(8192);

            X86_64.autobuffer_buffer_push_sub_register8_whole_8(&(internal_instructions), RSP, size);

            declare k = 0;
            while <(k, size) {
                if >(-(size, k), 7) {
                    X86_64.autobuffer_buffer_push_mov_whole_8_register8(&(internal_instructions), RBX, 0);
                    X86_64.autobuffer_buffer_push_mov_register8_register8_pointer_offset(&(internal_instructions), RBX, RSP, k);

                    k = +(k, 8);
                } else if >(-(size, k), 3) {
                    X86_64.autobuffer_buffer_push_mov_whole_4_register4(&(internal_instructions), EBX, 0:whole_4);
                    X86_64.autobuffer_buffer_push_mov_register4_register8_pointer_offset(&(internal_instructions), EBX, RSP, k);

                    k = +(k, 4);
                } else if >(-(size, k), 1) {
                    X86_64.autobuffer_buffer_push_mov_whole_2_register2(&(internal_instructions), BX, 0:whole_2);
                    X86_64.autobuffer_buffer_push_mov_register2_register8_pointer_offset(&(internal_instructions), BX, RSP, k);

                    k = +(k, 2);
                } else if >(-(size, k), 0) {
                    X86_64.autobuffer_buffer_push_mov_whole_1_register1(&(internal_instructions), BL, 0:whole_1);
                    X86_64.autobuffer_buffer_push_mov_register1_register8_pointer_offset(&(internal_instructions), BL, RSP, k);

                    k = +(k, 1);
                };
            };

            hashmap_string_put(internal_function_instructions, internal_name, autobuffer_buffer_get_buffer_pointer(&(internal_instructions)));
            hashmap_string_put(internal_function_instruction_sizes, internal_name, AutoBufferBuffer.>index(&(internal_instructions)));

            // Zero initializer for the whole value
            declare internal_name = concatenate2_brk_allocate(structure_name, ">0");
            declare internal_instructions = autobuffer_buffer_new(8192);

            X86_64.autobuffer_buffer_push_sub_register8_whole_8(&(internal_instructions), RSP, size);

            declare k = 0;
            while <(k, size) {
                if >(-(size, k), 7) {
                    X86_64.autobuffer_buffer_push_mov_whole_8_register8(&(internal_instructions), RBX, 0);
                    X86_64.autobuffer_buffer_push_mov_register8_register8_pointer_offset(&(internal_instructions), RBX, RSP, k);

                    k = +(k, 8);
                } else if >(-(size, k), 3) {
                    X86_64.autobuffer_buffer_push_mov_whole_4_register4(&(internal_instructions), EBX, 0:whole_4);
                    X86_64.autobuffer_buffer_push_mov_register4_register8_pointer_offset(&(internal_instructions), EBX, RSP, k);

                    k = +(k, 4);
                } else if >(-(size, k), 1) {
                    X86_64.autobuffer_buffer_push_mov_whole_2_register2(&(internal_instructions), BX, 0:whole_2);
                    X86_64.autobuffer_buffer_push_mov_register2_register8_pointer_offset(&(internal_instructions), BX, RSP, k);

                    k = +(k, 2);
                } else if >(-(size, k), 0) {
                    X86_64.autobuffer_buffer_push_mov_whole_1_register1(&(internal_instructions), BL, 0:whole_1);
                    X86_64.autobuffer_buffer_push_mov_register1_register8_pointer_offset(&(internal_instructions), BL, RSP, k);

                    k = +(k, 1);
                };
            };

            hashmap_string_put(internal_function_instructions, internal_name, autobuffer_buffer_get_buffer_pointer(&(internal_instructions)));
            hashmap_string_put(internal_function_instruction_sizes, internal_name, AutoBufferBuffer.>index(&(internal_instructions)));

            // Size getter for the whole value
            declare internal_name = concatenate2_brk_allocate(structure_name, "size");
            declare internal_instructions = autobuffer_buffer_new(8192);

            X86_64.autobuffer_buffer_push_mov_whole_8_register8(&(internal_instructions), RAX, size);
            X86_64.autobuffer_buffer_push_push_register8(&(internal_instructions), RAX);

            hashmap_string_put(internal_function_instructions, internal_name, autobuffer_buffer_get_buffer_pointer(&(internal_instructions)));
            hashmap_string_put(internal_function_instruction_sizes, internal_name, AutoBufferBuffer.>index(&(internal_instructions)));

            declare member_names = NodeStructureData.>item_names(structure_data);
            declare member_types = NodeStructureData.>item_types(structure_data);

            declare j = 0;
            while !(=(array8_get(member_names, j), 0)) {
                declare member_name = *.cast(array8_get(member_names, j));
                declare member_type = *.cast(array8_get(member_types, j));

                declare location = .get_size_multiple(member_types, j, nodes, program_data);
                declare size = .get_size(member_type, nodes, program_data);

                // Get pointer for individual members
                declare internal_name = concatenate3_brk_allocate(structure_name, "*>", member_name);
                declare internal_instructions = autobuffer_buffer_new(8192);

                X86_64.autobuffer_buffer_push_pop_register8(&(internal_instructions), RAX);
                X86_64.autobuffer_buffer_push_add_register8_whole_8(&(internal_instructions), RAX, location);
                X86_64.autobuffer_buffer_push_push_register8(&(internal_instructions), RAX);

                hashmap_string_put(internal_function_instructions, internal_name, autobuffer_buffer_get_buffer_pointer(&(internal_instructions)));
                hashmap_string_put(internal_function_instruction_sizes, internal_name, AutoBufferBuffer.>index(&(internal_instructions)));

                // Setter for individual members
                declare internal_name = concatenate3_brk_allocate(structure_name, "<", member_name);
                declare internal_instructions = autobuffer_buffer_new(8192);

                X86_64.autobuffer_buffer_push_add_register8_whole_8(&(internal_instructions), RSP, size);
                X86_64.autobuffer_buffer_push_mov_register8_pointer_offset_register8(&(internal_instructions), RSP, 0, RAX);
                X86_64.autobuffer_buffer_push_sub_register8_whole_8(&(internal_instructions), RSP, size);

                declare k = 0;
                while <(k, size) {
                    if >(-(size, k), 7) {
                        X86_64.autobuffer_buffer_push_mov_register8_pointer_offset_register8(&(internal_instructions), RSP, k, RBX);
                        X86_64.autobuffer_buffer_push_mov_register8_register8_pointer_offset(&(internal_instructions), RBX, RAX, +(k, location));

                        k = +(k, 8);
                    } else if >(-(size, k), 3) {
                        X86_64.autobuffer_buffer_push_mov_register8_pointer_offset_register4(&(internal_instructions), RSP, k, EBX);
                        X86_64.autobuffer_buffer_push_mov_register4_register8_pointer_offset(&(internal_instructions), EBX, RAX, +(k, location));

                        k = +(k, 4);
                    } else if >(-(size, k), 1) {
                        X86_64.autobuffer_buffer_push_mov_register8_pointer_offset_register2(&(internal_instructions), RSP, k, BX);
                        X86_64.autobuffer_buffer_push_mov_register2_register8_pointer_offset(&(internal_instructions), BX, RAX, +(k, location));

                        k = +(k, 2);
                    } else if >(-(size, k), 0) {
                        X86_64.autobuffer_buffer_push_mov_register8_pointer_offset_register1(&(internal_instructions), RSP, k, BL);
                        X86_64.autobuffer_buffer_push_mov_register1_register8_pointer_offset(&(internal_instructions), BL, RAX, +(k, location));

                        k = +(k, 1);
                    };
                };

                X86_64.autobuffer_buffer_push_add_register8_whole_8(&(internal_instructions), RSP, +(size, 8));

                hashmap_string_put(internal_function_instructions, internal_name, autobuffer_buffer_get_buffer_pointer(&(internal_instructions)));
                hashmap_string_put(internal_function_instruction_sizes, internal_name, AutoBufferBuffer.>index(&(internal_instructions)));

                // Getter for indivudal members
                declare internal_name = concatenate3_brk_allocate(structure_name, ">", member_name);
                declare internal_instructions = autobuffer_buffer_new(8192);

                X86_64.autobuffer_buffer_push_pop_register8(&(internal_instructions), RAX);
                X86_64.autobuffer_buffer_push_sub_register8_whole_8(&(internal_instructions), RSP, size);

                declare k = 0;
                while <(k, size) {
                    if >(-(size, k), 7) {
                        X86_64.autobuffer_buffer_push_mov_register8_pointer_offset_register8(&(internal_instructions), RAX, +(k, location), RBX);
                        X86_64.autobuffer_buffer_push_mov_register8_register8_pointer_offset(&(internal_instructions), RBX, RSP, k);

                        k = +(k, 8);
                    } else if >(-(size, k), 3) {
                        X86_64.autobuffer_buffer_push_mov_register8_pointer_offset_register4(&(internal_instructions), RAX, +(k, location), EBX);
                        X86_64.autobuffer_buffer_push_mov_register4_register8_pointer_offset(&(internal_instructions), EBX, RSP, k);

                        k = +(k, 4);
                    } else if >(-(size, k), 1) {
                        X86_64.autobuffer_buffer_push_mov_register8_pointer_offset_register2(&(internal_instructions), RAX, +(k, location), BX);
                        X86_64.autobuffer_buffer_push_mov_register2_register8_pointer_offset(&(internal_instructions), BX, RSP, k);

                        k = +(k, 2);
                    } else if >(-(size, k), 0) {
                        X86_64.autobuffer_buffer_push_mov_register8_pointer_offset_register1(&(internal_instructions), RAX, +(k, location), BL);
                        X86_64.autobuffer_buffer_push_mov_register1_register8_pointer_offset(&(internal_instructions), BL, RSP, k);

                        k = +(k, 1);
                    };
                };

                hashmap_string_put(internal_function_instructions, internal_name, autobuffer_buffer_get_buffer_pointer(&(internal_instructions)));
                hashmap_string_put(internal_function_instruction_sizes, internal_name, AutoBufferBuffer.>index(&(internal_instructions)));

                j = +(j, 1);
            };
            i = +(i, 1);
        };

    };

    define get_size = function(type: *, nodes: *Nodes, program_data: *ProgramData): whole_8 {
        if string_length=(type, "*", 1) {
            return 8;
        };

        if string=(type, "boolean") {
            return 1;
        };

        declare cached_size = whole_8.cast(hashmap_string_get(&(cached_sizes_map), type));
        if !(=(cached_size, 0)) {
            return cached_size;
        };

        if string_length=(type, "any_", 4) {
            declare number = string_to_whole_8(*.cast(+(type, 4)));
            hashmap_string_put(&(cached_sizes_map), type, number);

            return number;
        };

        if string_length=(type, "whole_", 6) {
            declare number = string_to_whole_8(*.cast(+(type, 6)));
            hashmap_string_put(&(cached_sizes_map), type, number);

            return number;
        };

        if string_length=(type, "integer_", 8) {
            declare number = string_to_whole_8(*.cast(+(type, 8)));
            hashmap_string_put(&(cached_sizes_map), type, number);

            return number;
        };

        declare define_types = &(ProgramData.>define_types(program_data));
        declare define_values = &(ProgramData.>define_values(program_data));

        if is_define(type) {
            declare defined_value = whole_8.cast(get_value_of_define(define_types, define_values, type));
            if !(=(defined_value, 999)) {
                declare structure_member_types = &(ProgramData.>structure_member_types(program_data));
                declare member_types = *.cast(autobuffer_array8_get(structure_member_types, defined_value));

                declare size = .get_size_multiple(member_types, 999, nodes, program_data);
                hashmap_string_put(&(cached_sizes_map), type, size);
                return size;
            };
        };

        print("unknown type ");
        println(type);
        exit(1);

        return 0;
    };

    define get_size_multiple = function(array: *, count: whole_8, nodes: *Nodes, program_data: *ProgramData): whole_8 {
        declare total = 0;

        declare i = 0;
        while <(i, count) {
            if =(array8_get(array, i), 0) {
                return total;
            };
            total = +(total, .get_size(*.cast(array8_get(array, i)), nodes, program_data));
            i = +(i, 1);
        };

        return total;
    };

    define get_size_multiple_array = function(array: *, count: whole_8, nodes: *Nodes, program_data: *ProgramData): whole_8 {
        declare total = 0;

        declare empty_module_stack = autobuffer_stack8_new(8);

        declare i = 0;
        while <(i, count) {
            if =(array8_get(array, i), 0) {
                return total;
            };
            declare variable_type = expand_module_name_array(*.cast(array8_get(array, i)), 0, &(module_id_map), &(module_references_map), &(empty_module_stack), create_previous_results_list());
            total = +(total, .get_size(variable_type, nodes, program_data));
            i = +(i, 1);
        };

        return total;
    };

    define get_size_multiple_reversed = function(array: *, count: whole_8, nodes: *Nodes, program_data: *ProgramData): whole_8 {
        declare total = 0;

        declare i = -(array8_length(array), 1);
        while >(i, count) {
            total = +(total, .get_size(*.cast(array8_get(array, i)), nodes, program_data));
            i = -(i, 1);
        };

        return total;
    };

    define get_size_multiple_reversed_array = function(array: *, count: whole_8, nodes: *Nodes, program_data: *ProgramData): whole_8 {
        declare total = 0;

        declare empty_module_stack = autobuffer_stack8_new(8);

        declare i = -(array8_length(array), 1);
        while >(i, count) {
            declare variable_type = expand_module_name_array(*.cast(array8_get(array, i)), 0, &(module_id_map), &(module_references_map), &(empty_module_stack), create_previous_results_list());
            total = +(total, .get_size(variable_type, nodes, program_data));
            i = -(i, 1);
        };

        return total;
    };
};
