define Register1 = structure {
    value: whole_1;
};

define Register2 = structure {
    value: whole_1;
};

define Register4 = structure {
    value: whole_1;
};

define Register8 = structure {
    value: whole_1;
};

define AL: Register1 = 0;
define CL: Register1 = 1;
define DL: Register1 = 2;
define BL: Register1 = 3;
define AH: Register1 = 4;

define AX: Register2 = 0;
define CX: Register2 = 1;
define DX: Register2 = 2;
define BX: Register2 = 3;
define SPX: Register2 = 4;
define BPX: Register2 = 5;

define EAX: Register4 = 0;
define ECX: Register4 = 1;
define EDX: Register4 = 2;
define EBX: Register4 = 3;
define ESP: Register4 = 4;
define EBP: Register4 = 5;

define RAX: Register8 = 0;
define RCX: Register8 = 1;
define RDX: Register8 = 2;
define RBX: Register8 = 3;
define RSP: Register8 = 4;
define RBP: Register8 = 5;
define RSI: Register8 = 6;
define RDI: Register8 = 7;
define R8: Register8 = 8;
define R9: Register8 = 9;
define R10: Register8 = 10;
define R11: Register8 = 11;
define R12: Register8 = 12;
define R13: Register8 = 13;
define R14: Register8 = 14;
define R15: Register8 = 15;

define X86_64 = module {
    define autobuffer_buffer_push_jmp_near = function(instructions: *AutoBufferBuffer): InstructionIndex {
        declare current_instruction = instructions.index;

        autobuffer_buffer_push_whole_1(instructions, 233:whole_1);

        autobuffer_buffer_push_whole_4(instructions, 0:whole_4);

        return cast(InstructionIndex, current_instruction);
    };

    define autobuffer_buffer_push_je_near = function(instructions: *AutoBufferBuffer): InstructionIndex {
        declare current_instruction = instructions.index;

        autobuffer_buffer_push_whole_1(instructions, 15:whole_1);
        autobuffer_buffer_push_whole_1(instructions, 132:whole_1);

        autobuffer_buffer_push_whole_4(instructions, 0:whole_4);

        return cast(InstructionIndex, current_instruction);
    };

    define autobuffer_buffer_push_jne_near = function(instructions: *AutoBufferBuffer): InstructionIndex {
        declare current_instruction = instructions.index;

        autobuffer_buffer_push_whole_1(instructions, 15:whole_1);
        autobuffer_buffer_push_whole_1(instructions, 133:whole_1);

        autobuffer_buffer_push_whole_4(instructions, 0:whole_4);

        return cast(InstructionIndex, current_instruction);
    };

    define set_jmp = function(instructions: *AutoBuffer, instruction_index_pointer: *whole_8, jump: InstructionIndex) {
        declare offset = whole_8_to_whole_4(instruction_index_pointer.*) - whole_8_to_whole_4(cast(whole_8, jump + 5));
        autobuffer_set_any_4(instructions, offset, cast(whole_8, jump + 1));
    };

    define set_jmp_value = function(instructions: *AutoBufferBuffer, jump: InstructionIndex, value: InstructionIndex) {
        declare offset = whole_8_to_whole_4(cast(whole_8, value)) - whole_8_to_whole_4(cast(whole_8, jump + 5));
        autobuffer_set_any_4(&instructions.autobuffer, offset, cast(whole_8, jump + 1));
    };

    define set_bss_relative_value = function(instructions: *AutoBufferBuffer, location: InstructionIndex, offset: whole_8) {
        declare index = cast(whole_8, location);
        declare value = cast(whole_8, whole_4_to_whole_8(autobuffer_get_whole_4(&instructions.autobuffer, index)) + offset);
        autobuffer_set_any_4(&instructions.autobuffer, whole_8_to_whole_4((value - (index + 4))), index);
    };

    define set_value8_offset = function(instructions: *AutoBufferBuffer, location: InstructionIndex, offset: whole_8) {
        declare previous_value = whole_4_to_whole_8(autobuffer_get_whole_4(&instructions.autobuffer, cast(whole_8, location)));
        declare new_value = previous_value + offset;
        autobuffer_set_any_8(&instructions.autobuffer, new_value, cast(whole_8, location));
    };

    define autobuffer_buffer_push_call_far_register8 = function(instructions: *AutoBufferBuffer, register: Register8) {
        autobuffer_buffer_push_whole_1(instructions, 255:whole_1);
        autobuffer_buffer_push_whole_1(instructions, 208:whole_1 + register);
    };

    define autobuffer_buffer_push_call_near = function(instructions: *AutoBufferBuffer): InstructionIndex {
        autobuffer_buffer_push_whole_1(instructions, 232:whole_1);
        declare current_instruction = instructions.index;
        autobuffer_buffer_push_whole_4(instructions, 0:whole_4);
        return cast(InstructionIndex, current_instruction);
    };

    define autobuffer_buffer_push_ret = function(instructions: *AutoBufferBuffer) {
        autobuffer_buffer_push_whole_1(instructions, 195:whole_1);
    };

    define set_call = function(instructions: *AutoBuffer, instruction_index_pointer: *whole_8, call: InstructionIndex) {
        declare offset = whole_8_to_whole_4(instruction_index_pointer.*) - whole_8_to_whole_4(cast(whole_8, call + 5));
        autobuffer_set_any_4(instructions, offset, cast(whole_8, call + 1));
    };

    define set_call_value = function(instructions: *AutoBufferBuffer, call: InstructionIndex, value: InstructionIndex) {
        declare offset = whole_8_to_whole_4(cast(whole_8, value)) - whole_8_to_whole_4(cast(whole_8, call + 4));
        autobuffer_set_any_4(&instructions.autobuffer, offset, cast(whole_8, call));
    };

    define set_je = function(instructions: *AutoBuffer, instruction_index_pointer: *whole_8, je: InstructionIndex) {
        declare offset = whole_8_to_whole_4(instruction_index_pointer.*) - whole_8_to_whole_4(cast(whole_8, je + 6));
        autobuffer_set_any_4(instructions, offset, cast(whole_8, je + 2));
    };

    define set_je_value = function(instructions: *AutoBufferBuffer, je: InstructionIndex, value: InstructionIndex) {
        declare offset = whole_8_to_whole_4(cast(whole_8, value)) - whole_8_to_whole_4(cast(whole_8, je + 6));
        autobuffer_set_any_4(&instructions.autobuffer, offset, cast(whole_8, je + 2));
    };

    define set_jne = function(instructions: *AutoBuffer, instruction_index_pointer: *whole_8, jne: InstructionIndex) {
        declare offset = whole_8_to_whole_4(instruction_index_pointer.*) - whole_8_to_whole_4(cast(whole_8, jne + 6));
        autobuffer_set_any_4(instructions, offset, cast(whole_8, jne + 2));
    };

    define get_instruction = function(instructions: *AutoBufferBuffer): InstructionIndex {
        declare index = instructions.index;

        return cast(InstructionIndex, index);
    };

    define autobuffer_buffer_push_push_instruction_pointer = function(buffer: *AutoBufferBuffer): InstructionIndex {
        declare instruction_index = buffer.index;
        X86_64'autobuffer_buffer_push_mov_whole_8_register8(buffer, RAX, 0);
        X86_64'autobuffer_buffer_push_push_register8(buffer, RAX);

        return cast(InstructionIndex, instruction_index);
    };

    define autobuffer_buffer_push_mov_whole_8_register8 = function(buffer: *AutoBufferBuffer, register: Register8, value: whole_8) {
        if register > 7:whole_1 {
            autobuffer_buffer_push_whole_1(buffer, 73:whole_1);
            autobuffer_buffer_push_whole_1(buffer, 176:whole_1 + register);
            autobuffer_buffer_push_whole_8(buffer, value);
            return;
        };
        autobuffer_buffer_push_whole_1(buffer, 72:whole_1);
        autobuffer_buffer_push_whole_1(buffer, 184:whole_1 + register);
        autobuffer_buffer_push_whole_8(buffer, value);
    };

    define autobuffer_buffer_push_mov_whole_4_register4 = function(buffer: *AutoBufferBuffer, register: Register4, value: whole_4) {
        if register > 7:whole_1 {
            autobuffer_buffer_push_whole_1(buffer, 65:whole_1);
            autobuffer_buffer_push_whole_1(buffer, 176:whole_1 + register);
            autobuffer_buffer_push_whole_4(buffer, value);
            return;
        };
        autobuffer_buffer_push_whole_1(buffer, 184:whole_1 + register);
        autobuffer_buffer_push_whole_4(buffer, value);
    };

    define autobuffer_buffer_push_mov_whole_2_register2 = function(buffer: *AutoBufferBuffer, register: Register2, value: whole_2) {
        if register > 7:whole_1 {
            autobuffer_buffer_push_whole_1(buffer, 65:whole_1);
            autobuffer_buffer_push_whole_1(buffer, 102:whole_1);
            autobuffer_buffer_push_whole_1(buffer, 176:whole_1 + register);
            autobuffer_buffer_push_whole_2(buffer, value);
            return;
        };
        autobuffer_buffer_push_whole_1(buffer, 102:whole_1);
        autobuffer_buffer_push_whole_1(buffer, 184:whole_1 + register);
        autobuffer_buffer_push_whole_2(buffer, value);
    };

    define autobuffer_buffer_push_mov_whole_1_register1 = function(buffer: *AutoBufferBuffer, register: Register1, value: whole_1) {
        if register > 7:whole_1 {
            autobuffer_buffer_push_whole_1(buffer, 65:whole_1);
            autobuffer_buffer_push_whole_1(buffer, 168:whole_1 + register);
            autobuffer_buffer_push_whole_1(buffer, value);
            return;
        };
        autobuffer_buffer_push_whole_1(buffer, 176:whole_1 + register);
        autobuffer_buffer_push_whole_1(buffer, value);
    };

    define autobuffer_buffer_push_lea_register8_offset_register8 = function(buffer: *AutoBufferBuffer, register_from: Register8, offset: whole_8, register_to: Register8) {
        declare instruction = 72:whole_1;

        if register_to > 7:whole_1 {
            instruction = instruction + 4:whole_1;
        };

        if register_from > 7:whole_1 {
            instruction = instruction + 1:whole_1;
        };

        autobuffer_buffer_push_whole_1(buffer, instruction);
        autobuffer_buffer_push_whole_1(buffer, 141:whole_1);

        declare value = 0:whole_1;

        if register_to > 7:whole_1 {
            value = value + ((register_to - 8:whole_1) * 8:whole_1);
        } else {
            value = value + (register_to * 8:whole_1);
        };

        if register_from > 7:whole_1 {
            value = value + (register_from - 8:whole_1);
        } else {
            value = value + register_from;
        };

        autobuffer_buffer_push_whole_1(buffer, 128:whole_1 + value);

        if register_from == RSP {
            autobuffer_buffer_push_whole_1(buffer, 36:whole_1);
        };

        autobuffer_buffer_push_whole_4(buffer, whole_8_to_whole_4(offset));
    };

    define autobuffer_buffer_push_mov_register8_register8 = function(buffer: *AutoBufferBuffer, register_from: Register8, register_to: Register8) {
        declare instruction = 72:whole_1;

        if register_to > 7:whole_1 {
            instruction = instruction + 1:whole_1;
        };

        if register_from > 7:whole_1 {
            instruction = instruction + 4:whole_1;
        };

        autobuffer_buffer_push_whole_1(buffer, instruction);
        autobuffer_buffer_push_whole_1(buffer, 137:whole_1);

        declare value = 0:whole_1;

        if register_to > 7:whole_1 {
            value = value + (register_to - 8:whole_1);
        } else {
            value = value + register_to;
        };

        if register_from > 7:whole_1 {
            value = value + ((register_from - 8:whole_1) * 8:whole_1);
        } else {
            value = value + (register_from * 8:whole_1);
        };

        autobuffer_buffer_push_whole_1(buffer, value + 192:whole_1);
    };

    define autobuffer_buffer_push_cmp_register8_register8 = function(buffer: *AutoBufferBuffer, register1: Register8, register2: Register8) {
        declare instruction = 72:whole_1;

        if register1 > 7:whole_1 {
            instruction = instruction + 1:whole_1;
        };

        if register2 > 7:whole_1 {
            instruction = instruction + 4:whole_1;
        };

        autobuffer_buffer_push_whole_1(buffer, instruction);
        autobuffer_buffer_push_whole_1(buffer, 57:whole_1);

        declare value = 0:whole_1;

        if register1 > 7:whole_1 {
            value = value + (register1 - 8:whole_1);
        } else {
            value = value + register1;
        };

        if register2 > 7:whole_1 {
            value = value + ((register2 - 8:whole_1) * 8:whole_1);
        } else {
            value = value + (register2 * 8:whole_1);
        };

        autobuffer_buffer_push_whole_1(buffer, value + 192:whole_1);
    };

    define autobuffer_buffer_push_cmp_register4_register4 = function(buffer: *AutoBufferBuffer, register1: Register4, register2: Register4) {
        declare instruction = 64:whole_1;

        if register1 > 7:whole_1 {
            instruction = instruction + 1:whole_1;
        };

        if register2 > 7:whole_1 {
            instruction = instruction + 4:whole_1;
        };

        if !(instruction == 64:whole_1) {
            autobuffer_buffer_push_whole_1(buffer, instruction);
        };
        autobuffer_buffer_push_whole_1(buffer, 57:whole_1);

        declare value = 0:whole_1;

        if register1 > 7:whole_1 {
            value = value + (register1 - 8:whole_1);
        } else {
            value = value + register1;
        };

        if register2 > 7:whole_1 {
            value = value + ((register2 - 8:whole_1) * 8:whole_1);
        } else {
            value = value + (register2 * 8:whole_1);
        };

        autobuffer_buffer_push_whole_1(buffer, value + 192:whole_1);
    };

    define autobuffer_buffer_push_cmp_register2_register2 = function(buffer: *AutoBufferBuffer, register1: Register2, register2: Register2) {
        declare instruction = 64:whole_1;

        if register1 > 7:whole_1 {
            instruction = instruction + 1:whole_1;
        };

        if register2 > 7:whole_1 {
            instruction = instruction + 4:whole_1;
        };

        if !(instruction == 64:whole_1) {
            autobuffer_buffer_push_whole_1(buffer, instruction);
        };
        autobuffer_buffer_push_whole_1(buffer, 102:whole_1);
        autobuffer_buffer_push_whole_1(buffer, 57:whole_1);

        declare value = 0:whole_1;

        if register1 > 7:whole_1 {
            value = value + (register1 - 8:whole_1);
        } else {
            value = value + register1;
        };

        if register2 > 7:whole_1 {
            value = value + ((register2 - 8:whole_1) * 8:whole_1);
        } else {
            value = value + (register2 * 8:whole_1);
        };

        autobuffer_buffer_push_whole_1(buffer, value + 192:whole_1);
    };

    define autobuffer_buffer_push_cmp_register1_register1 = function(buffer: *AutoBufferBuffer, register1: Register1, register2: Register1) {
        declare instruction = 64:whole_1;

        if register1 > 7:whole_1 {
            instruction = instruction + 1:whole_1;
        };

        if register2 > 7:whole_1 {
            instruction = instruction + 4:whole_1;
        };

        if !(instruction == 64:whole_1) {
            autobuffer_buffer_push_whole_1(buffer, instruction);
        };
        autobuffer_buffer_push_whole_1(buffer, 56:whole_1);

        declare value = 0:whole_1;

        if register1 > 7:whole_1 {
            value = value + (register1 - 8:whole_1);
        } else {
            value = value + register1;
        };

        if register2 > 7:whole_1 {
            value = value + ((register2 - 8:whole_1) * 8:whole_1);
        } else {
            value = value + (register2 * 8:whole_1);
        };

        autobuffer_buffer_push_whole_1(buffer, value + 192:whole_1);
    };

    define autobuffer_buffer_push_cmove_register8_register8 = function(buffer: *AutoBufferBuffer, register1: Register8, register2: Register8) {
        declare instruction = 72:whole_1;

        if register1 > 7:whole_1 {
            instruction = instruction + 4:whole_1;
        };

        if register2 > 7:whole_1 {
            instruction = instruction + 1:whole_1;
        };

        autobuffer_buffer_push_whole_1(buffer, instruction);
        autobuffer_buffer_push_whole_1(buffer, 15:whole_1);
        autobuffer_buffer_push_whole_1(buffer, 68:whole_1);

        declare value = 0:whole_1;

        if register1 > 7:whole_1 {
            value = value + ((register1 - 8:whole_1) * 8:whole_1);
        } else {
            value = value + (register1 * 8:whole_1);
        };

        if register2 > 7:whole_1 {
            value = value + (register2 - 8:whole_1);
        } else {
            value = value + register2;
        };

        autobuffer_buffer_push_whole_1(buffer, value + 192:whole_1);
    };

    define autobuffer_buffer_push_cmova_register8_register8 = function(buffer: *AutoBufferBuffer, register1: Register8, register2: Register8) {
        declare instruction = 72:whole_1;

        if register1 > 7:whole_1 {
            instruction = instruction + 4:whole_1;
        };

        if register2 > 7:whole_1 {
            instruction = instruction + 1:whole_1;
        };

        autobuffer_buffer_push_whole_1(buffer, instruction);
        autobuffer_buffer_push_whole_1(buffer, 15:whole_1);
        autobuffer_buffer_push_whole_1(buffer, 71:whole_1);

        declare value = 0:whole_1;

        if register1 > 7:whole_1 {
            value = value + ((register1 - 8:whole_1) * 8:whole_1);
        } else {
            value = value + (register1 * 8:whole_1);
        };

        if register2 > 7:whole_1 {
            value = value + (register2 - 8:whole_1);
        } else {
            value = value + register2;
        };

        autobuffer_buffer_push_whole_1(buffer, value + 192:whole_1);
    };

    define autobuffer_buffer_push_cmovg_register8_register8 = function(buffer: *AutoBufferBuffer, register1: Register8, register2: Register8) {
        declare instruction = 72:whole_1;

        if register1 > 7:whole_1 {
            instruction = instruction + 4:whole_1;
        };

        if register2 > 7:whole_1 {
            instruction = instruction + 1:whole_1;
        };

        autobuffer_buffer_push_whole_1(buffer, instruction);
        autobuffer_buffer_push_whole_1(buffer, 15:whole_1);
        autobuffer_buffer_push_whole_1(buffer, 79:whole_1);

        declare value = 0:whole_1;

        if register1 > 7:whole_1 {
            value = value + ((register1 - 8:whole_1) * 8:whole_1);
        } else {
            value = value + (register1 * 8:whole_1);
        };

        if register2 > 7:whole_1 {
            value = value + (register2 - 8:whole_1);
        } else {
            value = value + register2;
        };

        autobuffer_buffer_push_whole_1(buffer, value + 192:whole_1);
    };

    define autobuffer_buffer_push_cmovb_register8_register8 = function(buffer: *AutoBufferBuffer, register1: Register8, register2: Register8) {
        declare instruction = 72:whole_1;

        if register1 > 7:whole_1 {
            instruction = instruction + 4:whole_1;
        };

        if register2 > 7:whole_1 {
            instruction = instruction + 1:whole_1;
        };

        autobuffer_buffer_push_whole_1(buffer, instruction);
        autobuffer_buffer_push_whole_1(buffer, 15:whole_1);
        autobuffer_buffer_push_whole_1(buffer, 66:whole_1);

        declare value = 0:whole_1;

        if register1 > 7:whole_1 {
            value = value + ((register1 - 8:whole_1) * 8:whole_1);
        } else {
            value = value + (register1 * 8:whole_1);
        };

        if register2 > 7:whole_1 {
            value = value + (register2 - 8:whole_1);
        } else {
            value = value + register2;
        };

        autobuffer_buffer_push_whole_1(buffer, value + 192:whole_1);
    };

    define autobuffer_buffer_push_cmovl_register8_register8 = function(buffer: *AutoBufferBuffer, register1: Register8, register2: Register8) {
        declare instruction = 72:whole_1;

        if register1 > 7:whole_1 {
            instruction = instruction + 4:whole_1;
        };

        if register2 > 7:whole_1 {
            instruction = instruction + 1:whole_1;
        };

        autobuffer_buffer_push_whole_1(buffer, instruction);
        autobuffer_buffer_push_whole_1(buffer, 15:whole_1);
        autobuffer_buffer_push_whole_1(buffer, 76:whole_1);

        declare value = 0:whole_1;

        if register1 > 7:whole_1 {
            value = value + ((register1 - 8:whole_1) * 8:whole_1);
        } else {
            value = value + (register1 * 8:whole_1);
        };

        if register2 > 7:whole_1 {
            value = value + (register2 - 8:whole_1);
        } else {
            value = value + register2;
        };

        autobuffer_buffer_push_whole_1(buffer, value + 192:whole_1);
    };

    define autobuffer_buffer_push_mov_register8_pointer_offset_register8 = function(buffer: *AutoBufferBuffer, register_from: Register8, offset: whole_8, register_to: Register8) {
        declare instruction = 72:whole_1;

        if register_to > 7:whole_1 {
            instruction = instruction + 4:whole_1;
        };

        if register_from > 7:whole_1 {
            instruction = instruction + 1:whole_1;
        };

        autobuffer_buffer_push_whole_1(buffer, instruction);
        autobuffer_buffer_push_whole_1(buffer, 139:whole_1);

        declare value = 0:whole_1;

        if register_to > 7:whole_1 {
            value = value + ((register_to - 8:whole_1) * 8:whole_1);
        } else {
            value = value + (register_to * 8:whole_1);
        };

        if register_from > 7:whole_1 {
            value = value + (register_from - 8:whole_1);
        } else {
            value = value + register_from;
        };

        autobuffer_buffer_push_whole_1(buffer, value + 128:whole_1);

        if register_from == RSP {
            autobuffer_buffer_push_whole_1(buffer, 36:whole_1);
        };

        autobuffer_buffer_push_whole_4(buffer, whole_8_to_whole_4(offset));
    };

    define autobuffer_buffer_push_mov_register8_pointer_offset_register4 = function(buffer: *AutoBufferBuffer, register_from: Register8, offset: whole_8, register_to: Register4) {
        declare instruction = 64:whole_1;

        if register_to > 7:whole_1 {
            instruction = instruction + 4:whole_1;
        };

        if register_from > 7:whole_1 {
            instruction = instruction + 1:whole_1;
        };

        if !(instruction == 64:whole_1) {
            autobuffer_buffer_push_whole_1(buffer, instruction);
        };
        autobuffer_buffer_push_whole_1(buffer, 139:whole_1);

        declare value = 0:whole_1;

        if register_to > 7:whole_1 {
            value = value + ((register_to - 8:whole_1) * 8:whole_1);
        } else {
            value = value + (register_to * 8:whole_1);
        };

        if register_from > 7:whole_1 {
            value = value + (register_from - 8:whole_1);
        } else {
            value = value + register_from;
        };

        autobuffer_buffer_push_whole_1(buffer, value + 128:whole_1);

        if register_from == RSP {
            autobuffer_buffer_push_whole_1(buffer, 36:whole_1);
        };

        autobuffer_buffer_push_whole_4(buffer, whole_8_to_whole_4(offset));
    };

    define autobuffer_buffer_push_mov_register8_pointer_offset_register2 = function(buffer: *AutoBufferBuffer, register_from: Register8, offset: whole_8, register_to: Register2) {
        declare instruction = 64:whole_1;

        if register_to > 7:whole_1 {
            instruction = instruction + 4:whole_1;
        };

        if register_from > 7:whole_1 {
            instruction = instruction + 1:whole_1;
        };

        autobuffer_buffer_push_whole_1(buffer, 102:whole_1);
        if !(instruction == 64:whole_1) {
            autobuffer_buffer_push_whole_1(buffer, instruction);
        };
        autobuffer_buffer_push_whole_1(buffer, 139:whole_1);

        declare value = 0:whole_1;

        if register_to > 7:whole_1 {
            value = value + ((register_to - 8:whole_1) * 8:whole_1);
        } else {
            value = value + (register_to * 8:whole_1);
        };

        if register_from > 7:whole_1 {
            value = value + (register_from - 8:whole_1);
        } else {
            value = value + register_from;
        };

        autobuffer_buffer_push_whole_1(buffer, value + 128:whole_1);

        if register_from == RSP {
            autobuffer_buffer_push_whole_1(buffer, 36:whole_1);
        };

        autobuffer_buffer_push_whole_4(buffer, whole_8_to_whole_4(offset));
    };

    define autobuffer_buffer_push_mov_register8_pointer_offset_register1 = function(buffer: *AutoBufferBuffer, register_from: Register8, offset: whole_8, register_to: Register1) {
        declare instruction = 64:whole_1;
        declare instruction2 = 138:whole_1;

        if register_to > 7:whole_1 {
            instruction = instruction + 4:whole_1;
            instruction2 = instruction2 + 1:whole_1;
        };

        if register_from > 7:whole_1 {
            instruction = instruction + 1:whole_1;
            instruction2 = instruction2 + 1:whole_1;
        };

        if !(instruction == 64:whole_1) {
            autobuffer_buffer_push_whole_1(buffer, instruction);
        };
        autobuffer_buffer_push_whole_1(buffer, instruction2);

        declare value = 0:whole_1;

        if register_to > 7:whole_1 {
            value = value + ((register_to - 8:whole_1) * 8:whole_1);
        } else {
            value = value + (register_to * 8:whole_1);
        };

        if register_from > 7:whole_1 {
            value = value + (register_from - 8:whole_1);
        } else {
            value = value + register_from;
        };

        autobuffer_buffer_push_whole_1(buffer, 128:whole_1 + value);

        if register_from == RSP {
            autobuffer_buffer_push_whole_1(buffer, 36:whole_1);
        };

        autobuffer_buffer_push_whole_4(buffer, whole_8_to_whole_4(offset));
    };

    define autobuffer_buffer_push_mov_register1_register8_pointer_offset = function(buffer: *AutoBufferBuffer, register_from: Register1, register_to: Register8, offset: whole_8) {
        declare instruction = 64:whole_1;

        if register_to > 7:whole_1 {
            instruction = instruction + 1:whole_1;
        };

        if register_from > 7:whole_1 {
            instruction = instruction + 4:whole_1;
        };

        if !(instruction == 64:whole_1) {
            autobuffer_buffer_push_whole_1(buffer, instruction);
        };
        autobuffer_buffer_push_whole_1(buffer, 136:whole_1);

        declare value = 0:whole_1;

        if register_from > 7:whole_1 {
            value = value + ((register_from - 8:whole_1) * 8:whole_1);
        } else {
            value = value + (register_from * 8:whole_1);
        };

        if register_to > 7:whole_1 {
            value = value + (register_to - 8:whole_1);
        } else {
            value = value + register_to;
        };

        autobuffer_buffer_push_whole_1(buffer, value + 128:whole_1);

        if register_to == RSP {
            autobuffer_buffer_push_whole_1(buffer, 36:whole_1);
        };

        autobuffer_buffer_push_whole_4(buffer, whole_8_to_whole_4(offset));
    };

    define autobuffer_buffer_push_mov_register2_register8_pointer_offset = function(buffer: *AutoBufferBuffer, register_from: Register2,  register_to: Register8, offset: whole_8) {
        declare instruction = 64:whole_1;

        if register_to > 7:whole_1 {
            instruction = instruction + 1:whole_1;
        };

        if register_from > 7:whole_1 {
            instruction = instruction + 4:whole_1;
        };

        autobuffer_buffer_push_whole_1(buffer, 102:whole_1);
        if !(instruction == 64:whole_1) {
            autobuffer_buffer_push_whole_1(buffer, instruction);
        };
        autobuffer_buffer_push_whole_1(buffer, 137:whole_1);

        declare value = 0:whole_1;

        if register_to > 7:whole_1 {
            value = value + (register_to - 8:whole_1);
        } else {
            value = value + register_to;
        };

        if register_from > 7:whole_1 {
            value = value + ((register_from - 8:whole_1) * 8:whole_1);
        } else {
            value = value + (register_from * 8:whole_1);
        };

        autobuffer_buffer_push_whole_1(buffer, value + 128:whole_1);

        if register_to == RSP {
            autobuffer_buffer_push_whole_1(buffer, 36:whole_1);
        };

        autobuffer_buffer_push_whole_4(buffer, whole_8_to_whole_4(offset));
    };

    define autobuffer_buffer_push_mov_register4_register8_pointer_offset = function(buffer: *AutoBufferBuffer, register_from: Register4,  register_to: Register8, offset: whole_8) {
        declare instruction = 64:whole_1;

        if register_to > 7:whole_1 {
            instruction = instruction + 1:whole_1;
        };

        if register_from > 7:whole_1 {
            instruction = instruction + 4:whole_1;
        };

        if !(instruction == 64:whole_1) {
            autobuffer_buffer_push_whole_1(buffer, instruction);
        };
        autobuffer_buffer_push_whole_1(buffer, 137:whole_1);

        declare value = 0:whole_1;

        if register_to > 7:whole_1 {
            value = value + (register_to - 8:whole_1);
        } else {
            value = value + register_to;
        };

        if register_from > 7:whole_1 {
            value = value + ((register_from - 8:whole_1) * 8:whole_1);
        } else {
            value = value + (register_from * 8:whole_1);
        };

        autobuffer_buffer_push_whole_1(buffer, value + 128:whole_1);

        if register_to == RSP {
            autobuffer_buffer_push_whole_1(buffer, 36:whole_1);
        };

        autobuffer_buffer_push_whole_4(buffer, whole_8_to_whole_4(offset));
    };

    define autobuffer_buffer_push_mov_register8_register8_pointer_offset = function(buffer: *AutoBufferBuffer, register_from: Register8,  register_to: Register8, offset: whole_8) {
        declare instruction = 72:whole_1;

        if register_to > 7:whole_1 {
            instruction = instruction + 1:whole_1;
        };

        if register_from > 7:whole_1 {
            instruction = instruction + 4:whole_1;
        };

        autobuffer_buffer_push_whole_1(buffer, instruction);
        autobuffer_buffer_push_whole_1(buffer, 137:whole_1);

        declare value = 0:whole_1;

        if register_to > 7:whole_1 {
            value = value + (register_to - 8:whole_1);
        } else {
            value = value + register_to;
        };

        if register_from > 7:whole_1 {
            value = value + ((register_from - 8:whole_1) * 8:whole_1);
        } else {
            value = value + (register_from * 8:whole_1);
        };

        autobuffer_buffer_push_whole_1(buffer, value + 128:whole_1);

        if register_to == RSP {
            autobuffer_buffer_push_whole_1(buffer, 36:whole_1);
        };

        autobuffer_buffer_push_whole_4(buffer, whole_8_to_whole_4(offset));
    };

    define autobuffer_buffer_push_add_register8_whole_8 = function(buffer: *AutoBufferBuffer, register: Register8, value: whole_8) {
        autobuffer_buffer_push_whole_1(buffer, 72:whole_1);
        autobuffer_buffer_push_whole_1(buffer, 129:whole_1);
        autobuffer_buffer_push_whole_1(buffer, 192:whole_1 + register);
        autobuffer_buffer_push_whole_4(buffer, whole_8_to_whole_4(value));
    };

    define autobuffer_buffer_push_mul_register8 = function(buffer: *AutoBufferBuffer, register: Register8) {
        declare instruction = 72:whole_1;
        if register > 7:whole_1 {
            instruction = 73:whole_1;
        };
        autobuffer_buffer_push_whole_1(buffer, instruction);
        autobuffer_buffer_push_whole_1(buffer, 247:whole_1);
        if register > 7:whole_1 {
            autobuffer_buffer_push_whole_1(buffer, 216:whole_1 + register);
        } else {
            autobuffer_buffer_push_whole_1(buffer, 224:whole_1 + register);
        };
    };

    define autobuffer_buffer_push_mul_register4 = function(buffer: *AutoBufferBuffer, register: Register4) {
        declare instruction = 64:whole_1;
        if register > 7:whole_1 {
            instruction = 65:whole_1;
        };

        if !(instruction == 64:whole_1) {
            autobuffer_buffer_push_whole_1(buffer, instruction);
        };
        autobuffer_buffer_push_whole_1(buffer, 247:whole_1);

        if register > 7:whole_1 {
            autobuffer_buffer_push_whole_1(buffer, 216:whole_1 + register);
        } else {
            autobuffer_buffer_push_whole_1(buffer, 224:whole_1 + register);
        };
    };

    define autobuffer_buffer_push_mul_register2 = function(buffer: *AutoBufferBuffer, register: Register2) {
        declare instruction = 64:whole_1;
        if register > 7:whole_1 {
            instruction = 65:whole_1;
        };

        if !(instruction == 64:whole_1) {
            autobuffer_buffer_push_whole_1(buffer, instruction);
        };
        autobuffer_buffer_push_whole_1(buffer, 102:whole_1);
        autobuffer_buffer_push_whole_1(buffer, 247:whole_1);

        if register > 7:whole_1 {
            autobuffer_buffer_push_whole_1(buffer, 216:whole_1 + register);
        } else {
            autobuffer_buffer_push_whole_1(buffer, 224:whole_1 + register);
        };
    };

    define autobuffer_buffer_push_mul_register1 = function(buffer: *AutoBufferBuffer, register: Register1) {
        declare instruction = 64:whole_1;
        if register > 7:whole_1 {
            instruction = 65:whole_1;
        };

        if !(instruction == 64:whole_1) {
            autobuffer_buffer_push_whole_1(buffer, instruction);
        };
        autobuffer_buffer_push_whole_1(buffer, 246:whole_1);

        if register > 7:whole_1 {
            autobuffer_buffer_push_whole_1(buffer, 216:whole_1 + register);
        } else {
            autobuffer_buffer_push_whole_1(buffer, 224:whole_1 + register);
        };
    };

    define autobuffer_buffer_push_imul_register8 = function(buffer: *AutoBufferBuffer, register: Register8) {
        declare instruction = 72:whole_1;
        if register > 7:whole_1 {
            instruction = 73:whole_1;
        };
        autobuffer_buffer_push_whole_1(buffer, instruction);
        autobuffer_buffer_push_whole_1(buffer, 247:whole_1);
        if register > 7:whole_1 {
            autobuffer_buffer_push_whole_1(buffer, 224:whole_1 + register);
        } else {
            autobuffer_buffer_push_whole_1(buffer, 232:whole_1 + register);
        };
    };

    define autobuffer_buffer_push_imul_register4 = function(buffer: *AutoBufferBuffer, register: Register4) {
        declare instruction = 64:whole_1;
        if register > 7:whole_1 {
            instruction = 65:whole_1;
        };

        if !(instruction == 64:whole_1) {
            autobuffer_buffer_push_whole_1(buffer, instruction);
        };
        autobuffer_buffer_push_whole_1(buffer, 247:whole_1);

        if register > 7:whole_1 {
            autobuffer_buffer_push_whole_1(buffer, 224:whole_1 + register);
        } else {
            autobuffer_buffer_push_whole_1(buffer, 232:whole_1 + register);
        };
    };

    define autobuffer_buffer_push_imul_register2 = function(buffer: *AutoBufferBuffer, register: Register2) {
        declare instruction = 64:whole_1;
        if register > 7:whole_1 {
            instruction = 65:whole_1;
        };

        if !(instruction == 64:whole_1) {
            autobuffer_buffer_push_whole_1(buffer, instruction);
        };
        autobuffer_buffer_push_whole_1(buffer, 102:whole_1);
        autobuffer_buffer_push_whole_1(buffer, 247:whole_1);

        if register > 7:whole_1 {
            autobuffer_buffer_push_whole_1(buffer, 224:whole_1 + register);
        } else {
            autobuffer_buffer_push_whole_1(buffer, 232:whole_1 + register);
        };
    };

    define autobuffer_buffer_push_imul_register1 = function(buffer: *AutoBufferBuffer, register: Register1) {
        declare instruction = 64:whole_1;
        if register > 7:whole_1 {
            instruction = 65:whole_1;
        };

        if !(instruction == 64:whole_1) {
            autobuffer_buffer_push_whole_1(buffer, instruction);
        };
        autobuffer_buffer_push_whole_1(buffer, 246:whole_1);

        if register > 7:whole_1 {
            autobuffer_buffer_push_whole_1(buffer, 224:whole_1 + register);
        } else {
            autobuffer_buffer_push_whole_1(buffer, 232:whole_1 + register);
        };
    };

    define autobuffer_buffer_push_div_register8 = function(buffer: *AutoBufferBuffer, register: Register8) {
        declare instruction = 72:whole_1;
        if register > 7:whole_1 {
            instruction = 73:whole_1;
        };
        autobuffer_buffer_push_whole_1(buffer, instruction);
        autobuffer_buffer_push_whole_1(buffer, 247:whole_1);
        if register > 7:whole_1 {
            autobuffer_buffer_push_whole_1(buffer, 232:whole_1 + register);
        } else {
            autobuffer_buffer_push_whole_1(buffer, 240:whole_1 + register);
        };
    };

    define autobuffer_buffer_push_div_register4 = function(buffer: *AutoBufferBuffer, register: Register4) {
        declare instruction = 64:whole_1;
        if register > 7:whole_1 {
            instruction = 65:whole_1;
        };

        if !(instruction == 64:whole_1) {
            autobuffer_buffer_push_whole_1(buffer, instruction);
        };
        autobuffer_buffer_push_whole_1(buffer, 247:whole_1);

        if register > 7:whole_1 {
            autobuffer_buffer_push_whole_1(buffer, 232:whole_1 + register);
        } else {
            autobuffer_buffer_push_whole_1(buffer, 240:whole_1 + register);
        };
    };

    define autobuffer_buffer_push_div_register2 = function(buffer: *AutoBufferBuffer, register: Register2) {
        declare instruction = 64:whole_1;
        if register > 7:whole_1 {
            instruction = 65:whole_1;
        };

        if !(instruction == 64:whole_1) {
            autobuffer_buffer_push_whole_1(buffer, instruction);
        };
        autobuffer_buffer_push_whole_1(buffer, 102:whole_1);
        autobuffer_buffer_push_whole_1(buffer, 247:whole_1);

        if register > 7:whole_1 {
            autobuffer_buffer_push_whole_1(buffer, 232:whole_1 + register);
        } else {
            autobuffer_buffer_push_whole_1(buffer, 240:whole_1 + register);
        };
    };

    define autobuffer_buffer_push_div_register1 = function(buffer: *AutoBufferBuffer, register: Register1) {
        declare instruction = 64:whole_1;
        if register > 7:whole_1 {
            instruction = 65:whole_1;
        };

        if !(instruction == 64:whole_1) {
            autobuffer_buffer_push_whole_1(buffer, instruction);
        };
        autobuffer_buffer_push_whole_1(buffer, 246:whole_1);

        if register > 7:whole_1 {
            autobuffer_buffer_push_whole_1(buffer, 232:whole_1 + register);
        } else {
            autobuffer_buffer_push_whole_1(buffer, 240:whole_1 + register);
        };
    };

    define autobuffer_buffer_push_idiv_register8 = function(buffer: *AutoBufferBuffer, register: Register8) {
        declare instruction = 72:whole_1;
        if register > 7:whole_1 {
            instruction = 73:whole_1;
        };
        autobuffer_buffer_push_whole_1(buffer, instruction);
        autobuffer_buffer_push_whole_1(buffer, 247:whole_1);
        if register > 7:whole_1 {
            autobuffer_buffer_push_whole_1(buffer, 240:whole_1 + register);
        } else {
            autobuffer_buffer_push_whole_1(buffer, 248:whole_1 + register);
        };
    };

    define autobuffer_buffer_push_idiv_register4 = function(buffer: *AutoBufferBuffer, register: Register4) {
        declare instruction = 64:whole_1;
        if register > 7:whole_1 {
            instruction = 65:whole_1;
        };

        if !(instruction == 64:whole_1) {
            autobuffer_buffer_push_whole_1(buffer, instruction);
        };
        autobuffer_buffer_push_whole_1(buffer, 247:whole_1);

        if register > 7:whole_1 {
            autobuffer_buffer_push_whole_1(buffer, 240:whole_1 + register);
        } else {
            autobuffer_buffer_push_whole_1(buffer, 248:whole_1 + register);
        };
    };

    define autobuffer_buffer_push_idiv_register2 = function(buffer: *AutoBufferBuffer, register: Register2) {
        declare instruction = 64:whole_1;
        if register > 7:whole_1 {
            instruction = 65:whole_1;
        };

        if !(instruction == 64:whole_1) {
            autobuffer_buffer_push_whole_1(buffer, instruction);
        };
        autobuffer_buffer_push_whole_1(buffer, 102:whole_1);
        autobuffer_buffer_push_whole_1(buffer, 247:whole_1);

        if register > 7:whole_1 {
            autobuffer_buffer_push_whole_1(buffer, 240:whole_1 + register);
        } else {
            autobuffer_buffer_push_whole_1(buffer, 248:whole_1 + register);
        };
    };

    define autobuffer_buffer_push_idiv_register1 = function(buffer: *AutoBufferBuffer, register: Register1) {
        declare instruction = 64:whole_1;
        if register > 7:whole_1 {
            instruction = 65:whole_1;
        };

        if !(instruction == 64:whole_1) {
            autobuffer_buffer_push_whole_1(buffer, instruction);
        };
        autobuffer_buffer_push_whole_1(buffer, 246:whole_1);

        if register > 7:whole_1 {
            autobuffer_buffer_push_whole_1(buffer, 240:whole_1 + register);
        } else {
            autobuffer_buffer_push_whole_1(buffer, 248:whole_1 + register);
        };
    };

    define autobuffer_buffer_push_cqo = function(buffer: *AutoBufferBuffer) {
        autobuffer_buffer_push_whole_1(buffer, 72:whole_1);
        autobuffer_buffer_push_whole_1(buffer, 153:whole_1);
    };

    define autobuffer_buffer_push_cdq = function(buffer: *AutoBufferBuffer) {
        autobuffer_buffer_push_whole_1(buffer, 153:whole_1);
    };

    define autobuffer_buffer_push_cwd = function(buffer: *AutoBufferBuffer) {
        autobuffer_buffer_push_whole_1(buffer, 102:whole_1);
        autobuffer_buffer_push_whole_1(buffer, 153:whole_1);
    };

    define autobuffer_buffer_push_cbw = function(buffer: *AutoBufferBuffer) {
        autobuffer_buffer_push_whole_1(buffer, 102:whole_1);
        autobuffer_buffer_push_whole_1(buffer, 152:whole_1);
    };

    define autobuffer_buffer_push_add_register8_register8 = function(buffer: *AutoBufferBuffer, register1: Register8, register2: Register8) {
        declare instruction = 72:whole_1;

        if register1 > 7:whole_1 {
            instruction = instruction + 1:whole_1;
        };

        if register2 > 7:whole_1 {
            instruction = instruction + 4:whole_1;
        };

        autobuffer_buffer_push_whole_1(buffer, instruction);
        autobuffer_buffer_push_whole_1(buffer, 1:whole_1);

        declare value = 0:whole_1;

        if register1 > 7:whole_1 {
            value = value + (register1 - 8:whole_1);
        } else {
            value = value + register1;
        };

        if register2 > 7:whole_1 {
            value = value + ((register2 - 8:whole_1) * 8:whole_1);
        } else {
            value = value + (register2 * 8:whole_1);
        };

        autobuffer_buffer_push_whole_1(buffer, value + 192:whole_1);
    };

    define autobuffer_buffer_push_add_register4_register4 = function(buffer: *AutoBufferBuffer, register1: Register4, register2: Register4) {
        declare instruction = 64:whole_1;

        if register1 > 7:whole_1 {
            instruction = instruction + 1:whole_1;
        };

        if register2 > 7:whole_1 {
            instruction = instruction + 4:whole_1;
        };

        if !(instruction == 64:whole_1) {
            autobuffer_buffer_push_whole_1(buffer, instruction);
        };
        autobuffer_buffer_push_whole_1(buffer, 1:whole_1);

        declare value = 0:whole_1;

        if register1 > 7:whole_1 {
            value = value + (register1 - 8:whole_1);
        } else {
            value = value + register1;
        };

        if register2 > 7:whole_1 {
            value = value + ((register2 - 8:whole_1) * 8:whole_1);
        } else {
            value = value + (register2 * 8:whole_1);
        };

        autobuffer_buffer_push_whole_1(buffer, value + 192:whole_1);
    };

    define autobuffer_buffer_push_add_register2_register2 = function(buffer: *AutoBufferBuffer, register1: Register2, register2: Register2) {
        declare instruction = 64:whole_1;

        if register1 > 7:whole_1 {
            instruction = instruction + 1:whole_1;
        };

        if register2 > 7:whole_1 {
            instruction = instruction + 4:whole_1;
        };

        if !(instruction == 64:whole_1) {
            autobuffer_buffer_push_whole_1(buffer, instruction);
        };
        autobuffer_buffer_push_whole_1(buffer, 102:whole_1);
        autobuffer_buffer_push_whole_1(buffer, 1:whole_1);

        declare value = 0:whole_1;

        if register1 > 7:whole_1 {
            value = value + (register1 - 8:whole_1);
        } else {
            value = value + register1;
        };

        if register2 > 7:whole_1 {
            value = value + ((register2 - 8:whole_1) * 8:whole_1);
        } else {
            value = value + (register2 * 8:whole_1);
        };

        autobuffer_buffer_push_whole_1(buffer, value + 192:whole_1);
    };

    define autobuffer_buffer_push_add_register1_register1 = function(buffer: *AutoBufferBuffer, register1: Register1, register2: Register1) {
        declare instruction = 64:whole_1;

        if register1 > 7:whole_1 {
            instruction = instruction + 1:whole_1;
        };

        if register2 > 7:whole_1 {
            instruction = instruction + 4:whole_1;
        };

        if !(instruction == 64:whole_1) {
            autobuffer_buffer_push_whole_1(buffer, instruction);
        };
        autobuffer_buffer_push_whole_1(buffer, 0:whole_1);

        declare value = 0:whole_1;

        if register1 > 7:whole_1 {
            value = value + (register1 - 8:whole_1);
        } else {
            value = value + register1;
        };

        if register2 > 7:whole_1 {
            value = value + ((register2 - 8:whole_1) * 8:whole_1);
        } else {
            value = value + (register2 * 8:whole_1);
        };

        autobuffer_buffer_push_whole_1(buffer, value + 192:whole_1);
    };

    define autobuffer_buffer_push_or_register1_register1 = function(buffer: *AutoBufferBuffer, register1: Register1, register2: Register1) {
        declare instruction = 64:whole_1;

        if register1 > 7:whole_1 {
            instruction = instruction + 1:whole_1;
        };

        if register2 > 7:whole_1 {
            instruction = instruction + 4:whole_1;
        };

        if !(instruction == 64:whole_1) {
            autobuffer_buffer_push_whole_1(buffer, instruction);
        };
        autobuffer_buffer_push_whole_1(buffer, 8:whole_1);

        declare value = 0:whole_1;

        if register1 > 7:whole_1 {
            value = value + (register1 - 8:whole_1);
        } else {
            value = value + register1;
        };

        if register2 > 7:whole_1 {
            value = value + ((register2 - 8:whole_1) * 8:whole_1);
        } else {
            value = value + (register2 * 8:whole_1);
        };

        autobuffer_buffer_push_whole_1(buffer, value + 192:whole_1);
    };

    define autobuffer_buffer_push_and_register1_register1 = function(buffer: *AutoBufferBuffer, register1: Register1, register2: Register1) {
        declare instruction = 64:whole_1;

        if register1 > 7:whole_1 {
            instruction = instruction + 1:whole_1;
        };

        if register2 > 7:whole_1 {
            instruction = instruction + 4:whole_1;
        };

        if !(instruction == 64:whole_1) {
            autobuffer_buffer_push_whole_1(buffer, instruction);
        };
        autobuffer_buffer_push_whole_1(buffer, 32:whole_1);

        declare value = 0:whole_1;

        if register1 > 7:whole_1 {
            value = value + (register1 - 8:whole_1);
        } else {
            value = value + register1;
        };

        if register2 > 7:whole_1 {
            value = value + ((register2 - 8:whole_1) * 8:whole_1);
        } else {
            value = value + (register2 * 8:whole_1);
        };

        autobuffer_buffer_push_whole_1(buffer, value + 192:whole_1);
    };

    define autobuffer_buffer_push_sub_register8_register8 = function(buffer: *AutoBufferBuffer, register1: Register8, register2: Register8) {
        declare instruction = 72:whole_1;

        if register1 > 7:whole_1 {
            instruction = instruction + 1:whole_1;
        };

        if register2 > 7:whole_1 {
            instruction = instruction + 4:whole_1;
        };

        autobuffer_buffer_push_whole_1(buffer, instruction);
        autobuffer_buffer_push_whole_1(buffer, 41:whole_1);

        declare value = 0:whole_1;

        if register1 > 7:whole_1 {
            value = value + (register1 - 8:whole_1);
        } else {
            value = value + register1;
        };

        if register2 > 7:whole_1 {
            value = value + ((register2 - 8:whole_1) * 8:whole_1);
        } else {
            value = value + (register2 * 8:whole_1);
        };

        autobuffer_buffer_push_whole_1(buffer, value + 192:whole_1);
    };

    define autobuffer_buffer_push_sub_register4_register4 = function(buffer: *AutoBufferBuffer, register1: Register4, register2: Register4) {
        declare instruction = 64:whole_1;

        if register1 > 7:whole_1 {
            instruction = instruction + 1:whole_1;
        };

        if register2 > 7:whole_1 {
            instruction = instruction + 4:whole_1;
        };

        if !(instruction == 64:whole_1) {
            autobuffer_buffer_push_whole_1(buffer, instruction);
        };
        autobuffer_buffer_push_whole_1(buffer, 41:whole_1);

        declare value = 0:whole_1;

        if register1 > 7:whole_1 {
            value = value + (register1 - 8:whole_1);
        } else {
            value = value + register1;
        };

        if register2 > 7:whole_1 {
            value = value + ((register2 - 8:whole_1) * 8:whole_1);
        } else {
            value = value + (register2 * 8:whole_1);
        };

        autobuffer_buffer_push_whole_1(buffer, value + 192:whole_1);
    };

    define autobuffer_buffer_push_sub_register2_register2 = function(buffer: *AutoBufferBuffer, register1: Register2, register2: Register2) {
        declare instruction = 64:whole_1;

        if register1 > 7:whole_1 {
            instruction = instruction + 1:whole_1;
        };

        if register2 > 7:whole_1 {
            instruction = instruction + 4:whole_1;
        };

        if !(instruction == 64:whole_1) {
            autobuffer_buffer_push_whole_1(buffer, instruction);
        };
        autobuffer_buffer_push_whole_1(buffer, 102:whole_1);
        autobuffer_buffer_push_whole_1(buffer, 41:whole_1);

        declare value = 0:whole_1;

        if register1 > 7:whole_1 {
            value = value + (register1 - 8:whole_1);
        } else {
            value = value + register1;
        };

        if register2 > 7:whole_1 {
            value = value + ((register2 - 8:whole_1) * 8:whole_1);
        } else {
            value = value + (register2 * 8:whole_1);
        };

        autobuffer_buffer_push_whole_1(buffer, value + 192:whole_1);
    };

    define autobuffer_buffer_push_sub_register1_register1 = function(buffer: *AutoBufferBuffer, register1: Register1, register2: Register1) {
        declare instruction = 64:whole_1;

        if register1 > 7:whole_1 {
            instruction = instruction + 1:whole_1;
        };

        if register2 > 7:whole_1 {
            instruction = instruction + 4:whole_1;
        };

        if !(instruction == 64:whole_1) {
            autobuffer_buffer_push_whole_1(buffer, instruction);
        };
        autobuffer_buffer_push_whole_1(buffer, 40:whole_1);

        declare value = 0:whole_1;

        if register1 > 7:whole_1 {
            value = value + (register1 - 8:whole_1);
        } else {
            value = value + register1;
        };

        if register2 > 7:whole_1 {
            value = value + ((register2 - 8:whole_1) * 8:whole_1);
        } else {
            value = value + (register2 * 8:whole_1);
        };

        autobuffer_buffer_push_whole_1(buffer, value + 192:whole_1);
    };

    define autobuffer_buffer_push_sub_register8_whole_8 = function(buffer: *AutoBufferBuffer, register: Register8, value: whole_8) {
        autobuffer_buffer_push_whole_1(buffer, 72:whole_1);
        autobuffer_buffer_push_whole_1(buffer, 129:whole_1);
        autobuffer_buffer_push_whole_1(buffer, 232:whole_1 + register);
        autobuffer_buffer_push_whole_4(buffer, whole_8_to_whole_4(value));
    };

    define autobuffer_buffer_push_pop_register8 = function(buffer: *AutoBufferBuffer, register: Register8) {
        if register > 7:whole_1 {
            autobuffer_buffer_push_whole_1(buffer, 65:whole_1);
            autobuffer_buffer_push_whole_1(buffer, 80:whole_1 + register);
        } else {
            autobuffer_buffer_push_whole_1(buffer, 88:whole_1 + register);
        };
    };

    define autobuffer_buffer_push_push_register8 = function(buffer: *AutoBufferBuffer, register: Register8) {
        if register > 7:whole_1 {
            autobuffer_buffer_push_whole_1(buffer, 65:whole_1);
            autobuffer_buffer_push_whole_1(buffer, 72:whole_1 + register);
        } else {
            autobuffer_buffer_push_whole_1(buffer, 80:whole_1 + register);
        };
    };

    define autobuffer_buffer_push_syscall = function(buffer: *AutoBufferBuffer) {
        autobuffer_buffer_push_whole_1(buffer, 15:whole_1);
        autobuffer_buffer_push_whole_1(buffer, 5:whole_1);
    };
};
