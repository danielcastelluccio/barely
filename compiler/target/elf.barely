define Target/Elf = module {
    define output = function(nodes: *Nodes, program_data: ProgramData, target_os: *, output_file: *, output_instruction_set: InstructionSetFunctions) {
        variable output = autobuffer_new(1048576);

        variable instructions_buffer = autobuffer_buffer_new(524288);

        variable data_buffer = autobuffer_buffer_new(32768);

        variable function_locations = autobuffer_new(1024);

        variable pushed_functions = autobuffer_stack8_new(512);
        variable pushed_function_targets = autobuffer_stack8_new(512);

        variable jmps = autobuffer_stack8_new(512);
        variable jmp_targets = autobuffer_stack8_new(512);

        variable jes = autobuffer_stack8_new(512);
        variable je_targets = autobuffer_stack8_new(512);

        variable targets = autobuffer_new(512);

        variable data_indexes_to_adjust = autobuffer_stack8_new(512);
        variable bss_indexes_to_adjust = autobuffer_stack8_new(512);
        variable bss_indexes_to_adjust_relative = autobuffer_stack8_new(512);

        variable instruction_set_get_size_fn = InstructionSetFunctions.>get_size(&(output_instruction_set));

        variable global_types = ProgramData.>global_types(&(program_data));
        variable global_count = autobuffer_array8_length(&(global_types));
        variable global_locations, bss_index = calculate_global_locations(nodes, &(program_data), instruction_set_get_size_fn, &(global_types), global_count);

        variable function_argument_names = ProgramData.>function_argument_names(&(program_data));
        variable function_node_locations = ProgramData.>function_locations(&(program_data));
        variable function_count = autobuffer_array8_length(&(function_argument_names));
        variable function_local_sizes = calculate_function_local_sizes(nodes, &(program_data), instruction_set_get_size_fn, &(function_node_locations), function_count);

        variable main_function = InstructionSetFunctions.>main(&(output_instruction_set));
        variable main_call = main_function(nodes, &(program_data), target_os, &(instructions_buffer), &(data_buffer), &(function_locations), &(pushed_functions), &(pushed_function_targets), &(jmps), &(jmp_targets), &(jes), &(je_targets), &(targets), &(global_types), global_locations, function_local_sizes, &(data_indexes_to_adjust), &(bss_indexes_to_adjust), &(bss_indexes_to_adjust_relative));

        variable instructions_index = AutoBufferBuffer.>index(&(instructions_buffer));
        variable data_index = AutoBufferBuffer.>index(&(data_buffer));

        variable define_values = &(ProgramData.>define_values(&(program_data)));
        variable main_function_index = whole_8.cast(hashmap_string_get(define_values, "main"));
        variable main_index = autobuffer_array8_get(&(function_locations), main_function_index);
        X86_64.set_call_value(&(instructions_buffer), main_call, InstructionIndex.cast(main_index));

        variable start_address = 4194304;

        .adjust_function_calls(start_address, &(pushed_functions), &(pushed_function_targets), &(function_locations), &(instructions_buffer));

        .adjust_jumps(&(jmps), &(jmp_targets), &(targets), X86_64.set_jmp_value, &(instructions_buffer));
        .adjust_jumps(&(jes), &(je_targets), &(targets), X86_64.set_je_value, &(instructions_buffer));

        variable output_location = autobuffer_buffer_new(32);
        autobuffer_buffer_push_string(&(output_location), output_file);

        variable instructions_autobuffer = &(AutoBufferBuffer.>autobuffer(&(instructions_buffer)));

        variable data_location = +(start_address, +(4096, +(instructions_index, 232)));
        adjust_indexes(instructions_autobuffer, &(data_indexes_to_adjust), data_location);
        variable bss_location = +(4096, +(data_location, data_index));
        adjust_indexes(instructions_autobuffer, &(bss_indexes_to_adjust), bss_location);

        variable i = 0;
        while <(i, AutoBufferStack8.>index(&(bss_indexes_to_adjust_relative))) {
            variable index = whole_8.cast(autobuffer_stack8_get(&(bss_indexes_to_adjust_relative), i));
            variable value_new = +(whole_8.cast(whole_4_to_whole_8(autobuffer_get_whole_4(&(AutoBufferBuffer.>autobuffer(&(instructions_buffer))), index))), +(instructions_index, data_index));
            variable actual_value = whole_8.cast(whole_4_to_whole_8(autobuffer_get_whole_4(&(AutoBufferBuffer.>autobuffer(&(instructions_buffer))), index)));
            autobuffer_set_any_4(instructions_autobuffer, whole_8_to_whole_4(+(-(value_new, +(index, 4)), 8192)), index);
            i = +(i, 1);
        };

        autobuffer_set(&(output), autobuffer_buffer_get_buffer_pointer(&(instructions_buffer)), 232, instructions_index);
        autobuffer_set(&(output), autobuffer_buffer_get_buffer_pointer(&(data_buffer)), +(232, instructions_index), data_index);

        variable file_header, program_header_instructions, program_header_data, program_header_bss = .create_headers(start_address, instructions_index, data_index, bss_index);

        autobuffer_set(&(output), &(file_header), 0, 64);
        autobuffer_set(&(output), &(program_header_instructions), 64, 56);
        autobuffer_set(&(output), &(program_header_data), 120, 56);
        autobuffer_set(&(output), &(program_header_bss), 176, 56);

        create_and_write_file(autobuffer_buffer_get_buffer_pointer(&(output_location)), AutoBuffer.>buffer(&(output)), AutoBuffer.>size(&(output)));
    };

    define adjust_function_calls = function(start_address: whole_8, pushed_functions: *AutoBufferStack8, pushed_function_targets: *AutoBufferStack8, function_locations: *AutoBuffer, instructions_buffer: *AutoBufferBuffer) {
        variable pushed_function_count = AutoBufferStack8.>index(pushed_functions);
        variable i = 0;
        while <(i, pushed_function_count) {
            variable pushed_function_instruction_specific = InstructionIndex.cast(autobuffer_stack8_get(pushed_functions, i));
            variable pushed_function_target = whole_8.cast(autobuffer_stack8_get(pushed_function_targets, i));

            variable function_index = InstructionIndex.cast(autobuffer_array8_get(function_locations, pushed_function_target));

            variable value_new = +(function_index, 232);

            X86_64.set_control_flow_value_absolute(instructions_buffer, +(pushed_function_instruction_specific, 2), +(start_address, value_new));
            i = +(i, 1);
        };
    };

    define adjust_jumps = function(jumps: *AutoBufferStack8, jump_targets: *AutoBufferStack8, targets: *AutoBuffer, setter: *function[*AutoBufferBuffer,InstructionIndex,InstructionIndex:], instructions_buffer: *AutoBufferBuffer) {
        variable jump_count = AutoBufferStack8.>index(jumps);

        variable i = 0;
        while <(i, jump_count) {
            variable jmp_instruction2 = InstructionIndex.cast(autobuffer_stack8_get(jumps, i));
            variable jmp_target = whole_8.cast(autobuffer_stack8_get(jump_targets, i));
            variable target_location = autobuffer_array8_get(targets, jmp_target);
            setter(instructions_buffer, jmp_instruction2, InstructionIndex.cast(target_location));
            i = +(i, 1);
        };
    };

    define output_executable = function(location: *, buffer: *, size: whole_8) {
        create_and_write_file(location, buffer, size);
    };

    define create_headers = function(start_address: whole_8, instructions_index: whole_8, data_index: whole_8, bss_index: whole_8): ELF64FileHeader, ELF64ProgramHeader, ELF64ProgramHeader, ELF64ProgramHeader {
        variable file_header = new_elf64_file_header();
        ELF64FileHeader.<format(&(file_header), 2_whole_1);
        ELF64FileHeader.<endianness(&(file_header), 1_whole_1);
        ELF64FileHeader.<abi(&(file_header), 3_whole_1);
        ELF64FileHeader.<object_file_type(&(file_header), 2_whole_2);
        ELF64FileHeader.<machine(&(file_header), 62_whole_2);
        ELF64FileHeader.<entry_point(&(file_header), 4194536);
        ELF64FileHeader.<program_header_table(&(file_header), 64);
        ELF64FileHeader.<program_header_count(&(file_header), 3_whole_2);

        variable program_header_instructions: ELF64ProgramHeader;
        ELF64ProgramHeader.<type(&(program_header_instructions), 1_whole_4);
        ELF64ProgramHeader.<location(&(program_header_instructions), 0);
        ELF64ProgramHeader.<virtual_address(&(program_header_instructions), start_address);
        ELF64ProgramHeader.<physical_address(&(program_header_instructions), start_address);
        ELF64ProgramHeader.<size_file(&(program_header_instructions), +(instructions_index, 232));
        ELF64ProgramHeader.<size_memory(&(program_header_instructions), +(instructions_index, 232));
        ELF64ProgramHeader.<flags(&(program_header_instructions), 5_whole_4);
        ELF64ProgramHeader.<alignment(&(program_header_instructions), 4096);

        variable program_header_data: ELF64ProgramHeader;
        ELF64ProgramHeader.<type(&(program_header_data), 1_whole_4);
        ELF64ProgramHeader.<location(&(program_header_data), +(instructions_index, 232));
        ELF64ProgramHeader.<virtual_address(&(program_header_data), +(232, +(instructions_index, +(start_address, 4096))));
        ELF64ProgramHeader.<physical_address(&(program_header_data), +(232, +(instructions_index, +(start_address, 4096))));
        ELF64ProgramHeader.<size_file(&(program_header_data), data_index);
        ELF64ProgramHeader.<size_memory(&(program_header_data), data_index);
        ELF64ProgramHeader.<flags(&(program_header_data), 4_whole_4);
        ELF64ProgramHeader.<alignment(&(program_header_data), 4096);

        variable program_header_bss: ELF64ProgramHeader;
        ELF64ProgramHeader.<type(&(program_header_bss), 1_whole_4);
        ELF64ProgramHeader.<location(&(program_header_bss), +(instructions_index, +(data_index, 232)));
        ELF64ProgramHeader.<virtual_address(&(program_header_bss), +(232, +(instructions_index, +(+(start_address, 8192), data_index))));
        ELF64ProgramHeader.<physical_address(&(program_header_bss), +(232, +(instructions_index, +(+(start_address, 8192), data_index))));
        ELF64ProgramHeader.<size_file(&(program_header_bss), 0);
        ELF64ProgramHeader.<size_memory(&(program_header_bss), bss_index);
        ELF64ProgramHeader.<flags(&(program_header_bss), 6_whole_4);
        ELF64ProgramHeader.<alignment(&(program_header_bss), 4096);

        return file_header, program_header_instructions, program_header_data, program_header_bss;
    };
};
