define InstructionSetFunctions = structure {
    main: *function[*Nodes.Data,*ProgramData,*,*AutoBufferBuffer,*AutoBufferBuffer,*AutoBuffer,*AutoBufferStack8,*AutoBufferStack8,*AutoBufferStack8,*AutoBufferStack8,*AutoBufferStack8,*AutoBufferStack8,*AutoBuffer,*AutoBuffer,*,*,*AutoBufferStack8,*AutoBufferStack8,*AutoBufferStack8:InstructionIndex,*function[*AutoBufferBuffer,InstructionIndex,InstructionIndex:],*function[*AutoBufferBuffer,InstructionIndex,whole_8:],*function[*AutoBufferBuffer,InstructionIndex,InstructionIndex:],*function[*AutoBufferBuffer,InstructionIndex,InstructionIndex:],*function[*AutoBufferBuffer,InstructionIndex,whole_8:],*function[*AutoBufferBuffer,InstructionIndex,whole_8:],*function[*AutoBufferBuffer,InstructionIndex,whole_8:]];
    get_size: *function[*,*Nodes.Data,*ProgramData:whole_8];
    get_size_multiple: *function[*,whole_8,*Nodes.Data,*ProgramData:whole_8];
    get_size_multiple_reversed: *function[*,whole_8,*Nodes.Data,*ProgramData:whole_8];
};

define calculate_global_locations = function(nodes: *Nodes.Data, program_data: *ProgramData, function_size: *function[*,*Nodes.Data,*ProgramData:whole_8], global_types: *AutoBuffer, global_count: whole_8): *, whole_8 {
    declare global_locations = autobuffer_new(512);
    declare bss_index = 0;

    declare i = 0;
    while i < global_count {
        declare global_type = *.cast(autobuffer_array8_get(global_types, i));

        autobuffer_array8_set(&global_locations, i, bss_index);

        declare size = function_size(global_type, nodes, program_data);
        bss_index = bss_index + size;
        i = i + 1;
    };

    return global_locations.buffer, bss_index;
};

define calculate_function_local_sizes = function(nodes: *Nodes.Data, program_data: *ProgramData, function_size: *function[*,*Nodes.Data,*ProgramData:whole_8], function_node_locations: *AutoBuffer, function_count: whole_8): * {
    declare function_local_sizes = autobuffer_new(1024);
    declare empty_module_stack = autobuffer_stack8_new(8);

    declare i = 0;
    while i < function_count {
        declare total = 0;
        declare j = whole_8.cast(autobuffer_array8_get(function_node_locations, i));
        while !(Nodes.get_id(nodes, j) == Node.ENDFUNCTION) {
            declare id = Nodes.get_id(nodes, j);
            declare pointer_data = Nodes.get_pointer_data(nodes, j);
            
            if id == Node.DECLARE {
                declare declare_data = *Node.DeclareData.cast(pointer_data);
                declare declare_name = declare_data.name;
                declare declare_type = declare_data.type;
                total = total + function_size(declare_type, nodes, program_data);
            };

            j = j + 1;
        };

        autobuffer_array8_set(&function_local_sizes, i, total);
        i = i + 1;
    };

    return function_local_sizes.buffer;
};

define calculate_variable_location = function(variable_count: whole_8, variable_names: *AutoBuffer, variable_sizes: *AutoBuffer, variable_name: *, scope_variable_index: whole_8): whole_8 {
    declare location = 0;
    declare j = 0;
    while true {
        if !(j < variable_count) {
            break;
        } else if !((!string=(variable_name, *.cast(autobuffer_array8_get(variable_names, j)))) || (j < scope_variable_index)) {
            break;
        } else {
            location = location + autobuffer_array8_get(variable_sizes, j);
            j = j + 1;
        };
    };

    return location;
};

define adjust_indexes = function(instructions_autobuffer: *AutoBufferBuffer, setter: *function[*AutoBufferBuffer,InstructionIndex,whole_8:], indexes_to_adjust: *AutoBufferStack8, offset: whole_8) {
    declare index_count = indexes_to_adjust.index;
    declare i = 0;
    while i < index_count {
        declare index = InstructionIndex.cast(autobuffer_stack8_get(indexes_to_adjust, i));

        setter(instructions_autobuffer, index, offset);
        i = i + 1;
    };
};

define adjust_jumps = function(jumps: *AutoBufferStack8, jump_targets: *AutoBufferStack8, targets: *AutoBuffer, setter: *function[*AutoBufferBuffer,InstructionIndex,InstructionIndex:], instructions_buffer: *AutoBufferBuffer) {
    declare jump_count = jumps.index;

    declare i = 0;
    while i < jump_count {
        declare jmp_instruction = InstructionIndex.cast(autobuffer_stack8_get(jumps, i));
        declare jmp_target = whole_8.cast(autobuffer_stack8_get(jump_targets, i));
        declare target_location = autobuffer_array8_get(targets, jmp_target);
        setter(instructions_buffer, jmp_instruction, InstructionIndex.cast(target_location));
        i = i + 1;
    };
};

define adjust_function_calls = function(set_function_value: *function[*AutoBufferBuffer,InstructionIndex,whole_8:], pushed_functions: *AutoBufferStack8, pushed_function_targets: *AutoBufferStack8, function_locations: *AutoBuffer, instructions_buffer: *AutoBufferBuffer, offset: whole_8) {
    declare pushed_function_count = pushed_functions.index;
    declare i = 0;
    while i < pushed_function_count {
        declare pushed_function_instruction_specific = InstructionIndex.cast(autobuffer_stack8_get(pushed_functions, i));
        declare pushed_function_target = whole_8.cast(autobuffer_stack8_get(pushed_function_targets, i));

        declare function_index = InstructionIndex.cast(autobuffer_array8_get(function_locations, pushed_function_target));

        set_function_value(instructions_buffer, pushed_function_instruction_specific, whole_8.cast(function_index + offset));
        i = i + 1;
    };
};
