include "core.barely";
include "lib/syscall_linux.barely";
include "lib/autobuffer.barely";
include "compiler/parser.barely";
include "compiler/typechecker.barely";
include "compiler/linux-x86_64.barely";

global empty: any_8;

global cached_types: AutoBuffer;
global cached_sizes: AutoBuffer;
global cached_index: whole_8;

function main(arguments: **, argument_count: whole_8) {
    variable i = 1;

    variable main_name: *;

    println("Parsing...");

    variable nodes = autobuffer_new(131072);
    variable nodes_index = 0;

    append_structure(&(nodes), &(nodes_index), "whole_8");
    append_structure(&(nodes), &(nodes_index), "whole_4");
    append_structure(&(nodes), &(nodes_index), "whole_2");
    append_structure(&(nodes), &(nodes_index), "whole_1");
    append_structure(&(nodes), &(nodes_index), "*");
    append_structure(&(nodes), &(nodes_index), "any_1");
    append_structure(&(nodes), &(nodes_index), "any_2");
    append_structure(&(nodes), &(nodes_index), "any_4");
    append_structure(&(nodes), &(nodes_index), "any_8");

    cached_types = autobuffer_new(131072);
    cached_sizes = autobuffer_new(131072);

    variable already_included = autobuffer_new(64);
    variable already_included_index = 0;

    while <(i, argument_count) {
        variable pointer = @cast_*(*8(@cast_*(+(arguments, *(8, i)))));

        if =(i, 1) {
            main_name = pointer;
        };

        include_file(pointer, &(nodes), &(nodes_index), &(already_included), &(already_included_index));

        i = +(i, 1);

    };

    variable nodes_index_saved = nodes_index;
    variable i = 0;
    while <(i, nodes_index_saved) {
        if =(nodes_get_id(&(nodes), i), NODE_STRUCTURE) {
            variable pointer = @cast_*NodeStructureData(nodes_get_pointer_data(&(nodes), i));
            variable name = NodeStructureData->name(pointer);

            // Setter for whole value
            variable allocated = brk_allocate(+(length(name), 3));
            copy(name, allocated, length(name));
            copy("<-", @cast_*(+(allocated, length(name))), 2);

            variable allocated_pointer = brk_allocate(+(length(name), 2));
            copy("*", allocated_pointer, 1);
            copy(name, @cast_*(+(allocated_pointer, 1)), length(name));

            variable allocated_arguments = brk_allocate(24);
            array8_set(allocated_arguments, 0, allocated_pointer);
            array8_set(allocated_arguments, 1, name);

            variable allocated_returns = brk_allocate(8);

            variable pointer_store_node = @cast_*NodeFunctionData(append_node_data(&(nodes), &(nodes_index), NODE_FUNCTION));
            NodeFunctionData<-name(pointer_store_node, allocated);
            NodeFunctionData<-argument_names(pointer_store_node, @cast_*(0));
            NodeFunctionData<-argument_types(pointer_store_node, allocated_arguments);
            NodeFunctionData<-returns(pointer_store_node, allocated_returns);

            variable end_node = append_node(&(nodes), &(nodes_index), NODE_ENDFUNCTION);

            // Getter for whole value
            variable allocated = brk_allocate(+(length(name), 3));
            copy(name, allocated, length(name));
            copy("->", @cast_*(+(allocated, length(name))), 2);

            variable allocated_arguments = brk_allocate(16);
            array8_set(allocated_arguments, 0, allocated_pointer);

            variable allocated_returns = brk_allocate(16);
            array8_set(allocated_returns, 0, name);

            variable pointer_store_node = @cast_*NodeFunctionData(append_node_data(&(nodes), &(nodes_index), NODE_FUNCTION));
            NodeFunctionData<-name(pointer_store_node, allocated);
            NodeFunctionData<-argument_names(pointer_store_node, @cast_*(0));
            NodeFunctionData<-argument_types(pointer_store_node, allocated_arguments);
            NodeFunctionData<-returns(pointer_store_node, allocated_returns);

            variable end_node = append_node(&(nodes), &(nodes_index), NODE_ENDFUNCTION);

            variable member_names = *->(@cast_**(+(nodes_get_pointer(&(nodes), i), 16)));
            variable member_types = *->(@cast_**(+(nodes_get_pointer(&(nodes), i), 24)));

            variable j = 0;
            while !(=(array8_get(member_names, j), 0)) {
                variable member_name = @cast_*(array8_get(member_names, j));
                variable member_type = @cast_*(array8_get(member_types, j));

                // Setter for individual members
                variable allocated = brk_allocate(+(length(name), +(length(member_name), 3)));
                copy(name, allocated, length(name));
                copy("<-", @cast_*(+(allocated, length(name))), 2);
                copy(member_name, @cast_*(+(allocated, +(length(name), 2))), length(member_name));

                variable allocated_arguments = brk_allocate(24);
                array8_set(allocated_arguments, 0, allocated_pointer);
                array8_set(allocated_arguments, 1, member_type);

                variable allocated_returns = brk_allocate(8);

                variable member_store_node = @cast_*NodeFunctionData(append_node_data(&(nodes), &(nodes_index), NODE_FUNCTION));
                NodeFunctionData<-name(member_store_node, allocated);
                NodeFunctionData<-argument_names(member_store_node, @cast_*(0));
                NodeFunctionData<-argument_types(member_store_node, allocated_arguments);
                NodeFunctionData<-returns(member_store_node, allocated_returns);

                variable end_node = append_node(&(nodes), &(nodes_index), NODE_ENDFUNCTION);

                // Getter for individual members
                variable allocated = brk_allocate(+(length(name), +(length(member_name), 3)));
                copy(name, allocated, length(name));
                copy("->", @cast_*(+(allocated, length(name))), 2);
                copy(member_name, @cast_*(+(allocated, +(length(name), 2))), length(member_name));

                variable allocated_arguments = brk_allocate(16);
                array8_set(allocated_arguments, 0, allocated_pointer);

                variable allocated_returns = brk_allocate(16);
                array8_set(allocated_returns, 0, member_type);

                variable member_store_node = @cast_*NodeFunctionData(append_node_data(&(nodes), &(nodes_index), NODE_FUNCTION));
                NodeFunctionData<-name(member_store_node, allocated);
                NodeFunctionData<-argument_names(member_store_node, @cast_*(0));
                NodeFunctionData<-argument_types(member_store_node, allocated_arguments);
                NodeFunctionData<-returns(member_store_node, allocated_returns);

                variable end_node = append_node(&(nodes), &(nodes_index), NODE_ENDFUNCTION);

                j = +(j, 1);
            };
        };
        i = +(i, 1);
    };

    println("Checking...");
    type_check(&(nodes), nodes_index);

    println("Outputting...");
    output_linux_x86-64_elf(&(nodes), nodes_index, main_name);
};

function include_file(file_name: *, nodes: *AutoBuffer, nodes_index: *whole_8, already_included: *AutoBuffer, already_included_index: *whole_8) {
    variable tokens = autobuffer_new(131072);
    variable tokens_index = 0;

    variable contents = get_contents(file_name);

    tokenize(contents, &(tokens), &(tokens_index));

    variable previous_index = whole_8->(nodes_index);

    parse(&(tokens), tokens_index, nodes, nodes_index);

    autostack8_push(already_included, already_included_index, file_name);

    variable i = 0;
    while <(i, whole_8->(nodes_index)) {
        variable id = nodes_get_id(nodes, i);

        if =(id, NODE_INCLUDE) {
            variable include_data = @cast_*NodeIncludeData(nodes_get_pointer_data(nodes, i));
            variable path = NodeIncludeData->path(include_data);

            variable included = false;
            variable j = 0;
            while <(j, whole_8->(already_included_index)) {
                if string=(@cast_*(autoarray8_get(already_included, j)), path) {
                    included = true;
                };
                j = +(j, 1);
            };

            if !(included) {
                include_file(path, nodes, nodes_index, already_included, already_included_index);
            };
        };

        i = +(i, 1);
    };
};

function is_number(string: *): boolean {
    variable length = length(string);

    variable i = 0;
    while <(i, length) {
        variable character = whole_1->(@cast_*whole_1(+(string, i)));

        if =(character, 95_whole_1) {
            i = 999;
            character = 48_whole_1;
        };

        if <(character, 48_whole_1) {
            return false;
        };

        if >(character, 57_whole_1) {
            return false;
        };
        i = +(i, 1);
    };

    return true;
};

function to_number(string: *): whole_8 {
    variable length = length(string);

    variable whole_8 = 0;

    variable i = 0;
    while <(i, length) {
        variable character = whole_1->(@cast_*whole_1(+(string, i)));

        if =(character, 95_whole_1) {
            i = 999;
        } else {
            whole_8 = *(whole_8, 10);
            whole_8 = +(whole_8, whole_1_to_whole_8(-(character, 48_whole_1)));
            i = +(i, 1);
        };
    };

    return whole_8;
};

function whole_8_to_string(whole_8: whole_8, buffer: *) {
    variable whole_82 = whole_8;

    if =(whole_8, 0) {
        any_1<-(@cast_*any_1(buffer), 48_whole_1);
    };

    variable length = 0;
    while !(=(whole_82, 0)) {
        whole_82 = /(whole_82, 10);
        length = +(length, 1);
    };

    whole_82 = whole_8;

    variable i = 0;
    while !(=(whole_82, 0)) {
        variable number = whole_8_to_whole_1(%(whole_82, 10));
        any_1<-(@cast_*any_1(+(buffer, -(-(length, 1), i))), +(number, 48_whole_1));
        whole_82 = /(whole_82, 10);
        i = +(i, 1);
    };
};

function increment_whole_8_pointer(pointer: *whole_8, amount: whole_8) {
    whole_8<-(pointer, +(whole_8->(pointer), amount));
};

function decrement_whole_8_pointer(pointer: *whole_8, amount: whole_8) {
    whole_8<-(pointer, -(whole_8->(pointer), amount));
};

function stringarraymap_get(keys: *, values: *, wanted: *, size: whole_8): * {
    variable j = 0;
    while <(j, size) {
        if string=(@cast_*(array8_get(keys, j)), wanted) {
            return @cast_*(array8_get(values, j));
        };
        j = +(j, 1);
    };

    return @cast_*(0);
};

function stringarraymap_get_index(keys: *, wanted: *, size: whole_8): whole_8 {
    variable j = 0;
    while <(j, size) {
        if string=(@cast_*(array8_get(keys, j)), wanted) {
            return j;
        };
        j = +(j, 1);
    };

    return 999;
};

function autopush_string_with_newline(buffer: *AutoBuffer, buffer_index_pointer: *whole_8, string: *) {
    autopush_string(buffer, buffer_index_pointer, string);
    variable new_line = 10;
    autopush_string(buffer, buffer_index_pointer, &(new_line));
};

function autopush_character(buffer: *AutoBuffer, buffer_index_pointer: *whole_8, character: any_1) {
    variable temp: any_2;
    any_1<-(@cast_*any_1(&(temp)), character);
    autopush_string(buffer, buffer_index_pointer, &(temp));
};

function autopush_whole_8(buffer: *AutoBuffer, buffer_index_pointer: *whole_8, whole_8: whole_8) {
    variable whole_8_buffer: any_24;
    whole_8_to_string(whole_8, &(whole_8_buffer));
    autopush_string(buffer, buffer_index_pointer, &(whole_8_buffer));
};

function indexof(string: *, character: any_1, start: whole_8): whole_8 {
    variable length = length(string);

    variable i = start;
    while <(i, length) {
        if =(any_1->(@cast_*any_1(+(string, i))), character) {
            return i;
        };
        i = +(i, 1);
    };

    return 999;
};

function print(string: *) {
    sys_write(STDOUT, string, length(string));
};

function println(string: *) {
    print(string);

    variable new_line: whole_8 = 10;
    sys_write(STDOUT, &(new_line), 1);
};

function get_contents(name: *): * {
    variable descriptor = sys_open(name, O_RDONLY, 0);

    variable stat: Stat;
    sys_fstat(descriptor, &(stat));

    variable contents = brk_allocate(+(Stat->size(&(stat)), 1));

    sys_read(descriptor, contents, Stat->size(&(stat)));

    return contents;
};

function exit(code: whole_8) {
    sys_exit(code);
};

function array8_set(array: *, index: whole_8, value: any_8) {
    variable index_pointer = @cast_*any_8(+(array, *(index, 8)));
    any_8<-(index_pointer, value);
};

function array8_get(array: *, index: whole_8): any_8 {
    variable index_pointer = @cast_*any_8(+(array, *(index, 8)));
    return any_8->(index_pointer);
};

function array8_length(array: *): whole_8 {
    variable k = 0;
    while !(=(array8_get(array, k), 0)) {
        k = +(k, 1);
    };
    return k;
};

function stack8_push(stack: *, stack_pointer: *whole_8, value: any_8) {
    variable index_pointer = @cast_*any_8(+(stack, *(whole_8->(stack_pointer), 8)));
    any_8<-(index_pointer, value);
    increment_whole_8_pointer(stack_pointer, 1);
};

function stack8_pop(stack: *, stack_pointer: *whole_8): any_8 {
    decrement_whole_8_pointer(stack_pointer, 1);
    variable index_pointer = @cast_*any_8(+(stack, *(whole_8->(stack_pointer), 8)));
    return any_8->(index_pointer);
};

function autostack8_push(buffer: *AutoBuffer, stack_pointer: *whole_8, value: any_8) {
    autobuffer_set_whole_8(buffer, @cast_whole_8(value), *(whole_8->(stack_pointer), 8));
    increment_whole_8_pointer(stack_pointer, 1);
};

function autostack8_pop(buffer: *AutoBuffer, stack_pointer: *whole_8): any_8 {
    decrement_whole_8_pointer(stack_pointer, 1);
    variable index_pointer = @cast_*any_8(autobuffer_get(buffer, *(whole_8->(stack_pointer), 8)));
    return any_8->(index_pointer);
};

function autostringarraymap_get(keys: *AutoBuffer, values: *AutoBuffer, wanted: *, size: whole_8): * {
    variable j = 0;
    while <(j, size) {
        if string=(@cast_*(autoarray8_get(keys, j)), wanted) {
            return @cast_*(autoarray8_get(values, j));
        };
        j = +(j, 1);
    };

    return @cast_*(0);
};

function autostringarraymap_get_index(keys: *AutoBuffer, wanted: *, size: whole_8): whole_8 {
    variable j = 0;
    while <(j, size) {
        if string=(@cast_*(autoarray8_get(keys, j)), wanted) {
            return j;
        };
        j = +(j, 1);
    };

    return 999;
};

function print_whole_8(whole_8: whole_8) {
    variable buffer: any_24;
    whole_8_to_string(whole_8, &(buffer));
    println(&(buffer));
};
