global empty: any_8;

global cached_sizes_map: HashMap;
global cached_signedness_map: HashMap;

define main = function(arguments: **, argument_count: whole_8) {
    println("Parsing...");

    variable nodes = nodes_new();

    nodes_append_structure(&(nodes), "whole_8");
    nodes_append_structure(&(nodes), "whole_4");
    nodes_append_structure(&(nodes), "whole_2");
    nodes_append_structure(&(nodes), "whole_1");
    nodes_append_structure(&(nodes), "integer_8");
    nodes_append_structure(&(nodes), "integer_4");
    nodes_append_structure(&(nodes), "integer_2");
    nodes_append_structure(&(nodes), "integer_1");
    nodes_append_structure(&(nodes), "*");

    add_basic_internal_functions(&(nodes));

    variable current_platform = "linux";
    variable add_target_internal_functions, is_target_internal_function = if string=(current_platform, "linux") {
        add_internal_functions_linux_x86-64, is_internal_function_linux_x86-64
    };

    add_target_internal_functions(&(nodes));

    cached_sizes_map = hashmap_new(131072);
    cached_signedness_map = hashmap_new(131072);

    variable already_included = autobuffer_new(64);
    variable already_included_index = 0;

    variable output_file = "output";

    while_target_id_stack = autobuffer_new(64);

    variable i = 1;
    while <(i, argument_count) {
        variable pointer = @cast_*(array8_get(arguments, i));

        if string=(pointer, "--output") {
            variable output = @cast_*(array8_get(arguments, +(i, 1)));
            output_file = output;
            
            i = +(i, 2);
        } else {
            include_file(pointer, &(nodes), &(already_included), &(already_included_index), is_target_internal_function);

            i = +(i, 1);
        };

    };

    variable already_added = autobuffer_new(64);
    variable already_added_index = 0;

    variable nodes_index_saved = Nodes.>index(&(nodes));
    variable i = 0;
    while <(i, nodes_index_saved) {
        variable id = nodes_get_id(&(nodes), i);
    
        if =(id, NODE_INVOKE) {
            variable name = NodeInvokeData.>name(@cast_*NodeInvokeData(nodes_get_pointer_data(&(nodes), i)));
            if string_length=(name, "@cast_*any_", 11) {
                variable added = false;
                variable j = 0;
                while <(j, already_added_index) {
                    if string=(@cast_*(autobuffer_array8_get(&(already_added), j)), +(name, 7)) {
                        added = true;
                    };
                    j = +(j, 1);
                };

                if !(added) {
                    nodes_append_structure(&(nodes), +(name, 7));
                    autobuffer_stack8_push(&(already_added), &(already_added_index), +(name, 7));
                };
            } else if string_length=(name, "any_", 4) {
                if is_number(+(name, 4)) {
                    variable added = false;
                    variable j = 0;
                    while <(j, already_added_index) {
                        if string=(@cast_*(autobuffer_array8_get(&(already_added), j)), name) {
                            added = true;
                        };
                        j = +(j, 1);
                    };

                    if !(added) {
                        nodes_append_structure(&(nodes), name);
                        autobuffer_stack8_push(&(already_added), &(already_added_index), name);
                    };
                };
            };
        } else if =(id, NODE_DECLARE) {
            variable type = NodeDeclareData.>type(@cast_*NodeDeclareData(nodes_get_pointer_data(&(nodes), i)));
            if string_length=(type, "any_", 4) {
                variable added = false;
                variable j = 0;
                while <(j, already_added_index) {
                    if string=(@cast_*(autobuffer_array8_get(&(already_added), j)), type) {
                        added = true;
                    };
                    j = +(j, 1);
                };

                if !(added) {
                    nodes_append_structure(&(nodes), type);
                    autobuffer_stack8_push(&(already_added), &(already_added_index), type);
                };
            };
        };

         i = +(i, 1);
    };

    variable nodes_index_saved = Nodes.>index(&(nodes));
    variable i = 0;
    while <(i, nodes_index_saved) {
        if =(nodes_get_id(&(nodes), i), NODE_STRUCTURE) {
            variable pointer = @cast_*NodeStructureData(nodes_get_pointer_data(&(nodes), i));
            variable name = NodeStructureData.>name(pointer);

            if !(=(name, 0)) {
                // Setter for whole value
                variable allocated = brk_allocate(+(length(name), 3));
                copy(name, allocated, length(name));
                copy("<-", @cast_*(+(allocated, length(name))), 2);

                variable allocated_pointer = brk_allocate(+(length(name), 2));
                copy("*", allocated_pointer, 1);
                copy(name, @cast_*(+(allocated_pointer, 1)), length(name));

                variable allocated_arguments = brk_allocate(24);
                array8_set(allocated_arguments, 0, allocated_pointer);
                array8_set(allocated_arguments, 1, name);

                variable allocated_returns = brk_allocate(8);

                variable pointer_store_node = @cast_*NodeFunctionData(nodes_append_data_anonymous(&(nodes), NODE_FUNCTION));
                NodeFunctionData.<name(pointer_store_node, allocated);
                NodeFunctionData.<argument_names(pointer_store_node, @cast_*(0));
                NodeFunctionData.<argument_types(pointer_store_node, allocated_arguments);
                NodeFunctionData.<returns(pointer_store_node, allocated_returns);

                variable end_node = nodes_append_anonymous(&(nodes), NODE_ENDFUNCTION);

                // Getter for whole value
                variable allocated = brk_allocate(+(length(name), 3));
                copy(name, allocated, length(name));
                copy("->", @cast_*(+(allocated, length(name))), 2);

                variable allocated_arguments = brk_allocate(16);
                array8_set(allocated_arguments, 0, allocated_pointer);

                variable allocated_returns = brk_allocate(16);
                array8_set(allocated_returns, 0, name);

                variable pointer_store_node = @cast_*NodeFunctionData(nodes_append_data_anonymous(&(nodes), NODE_FUNCTION));
                NodeFunctionData.<name(pointer_store_node, allocated);
                NodeFunctionData.<argument_names(pointer_store_node, @cast_*(0));
                NodeFunctionData.<argument_types(pointer_store_node, allocated_arguments);
                NodeFunctionData.<returns(pointer_store_node, allocated_returns);

                variable end_node = nodes_append_anonymous(&(nodes), NODE_ENDFUNCTION);

                variable allocated_arguments = brk_allocate(8);

                variable allocated_returns = brk_allocate(16);
                array8_set(allocated_returns, 0, name);

                variable pointer_store_node = @cast_*NodeFunctionData(nodes_append_data_anonymous(&(nodes), NODE_FUNCTION));
                NodeFunctionData.<name(pointer_store_node, name);
                NodeFunctionData.<argument_names(pointer_store_node, @cast_*(0));
                NodeFunctionData.<argument_types(pointer_store_node, allocated_arguments);
                NodeFunctionData.<returns(pointer_store_node, allocated_returns);

                variable end_node = nodes_append_anonymous(&(nodes), NODE_ENDFUNCTION);

                variable allocated = brk_allocate(+(length(name), 4));
                copy(name, allocated, length(name));
                copy("->0", @cast_*(+(allocated, length(name))), 3);

                variable allocated_arguments = brk_allocate(8);

                variable allocated_returns = brk_allocate(16);
                array8_set(allocated_returns, 0, name);

                variable pointer_store_node = @cast_*NodeFunctionData(nodes_append_data_anonymous(&(nodes), NODE_FUNCTION));
                NodeFunctionData.<name(pointer_store_node, allocated);
                NodeFunctionData.<argument_names(pointer_store_node, @cast_*(0));
                NodeFunctionData.<argument_types(pointer_store_node, allocated_arguments);
                NodeFunctionData.<returns(pointer_store_node, allocated_returns);

                variable end_node = nodes_append_anonymous(&(nodes), NODE_ENDFUNCTION);

                variable member_names = NodeStructureData.>item_names(pointer);
                variable member_types = NodeStructureData.>item_types(pointer);

                variable j = 0;
                while !(=(array8_get(member_names, j), 0)) {
                    variable member_name = @cast_*(array8_get(member_names, j));
                    variable member_type = @cast_*(array8_get(member_types, j));

                    // Setter for individual members
                    variable allocated = brk_allocate(+(length(name), +(length(member_name), 3)));
                    copy(name, allocated, length(name));
                    copy("<-", @cast_*(+(allocated, length(name))), 2);
                    copy(member_name, @cast_*(+(allocated, +(length(name), 2))), length(member_name));

                    variable allocated_arguments = brk_allocate(24);
                    array8_set(allocated_arguments, 0, allocated_pointer);
                    array8_set(allocated_arguments, 1, member_type);

                    variable allocated_returns = brk_allocate(8);

                    variable member_store_node = @cast_*NodeFunctionData(nodes_append_data_anonymous(&(nodes), NODE_FUNCTION));
                    NodeFunctionData.<name(member_store_node, allocated);
                    NodeFunctionData.<argument_names(member_store_node, @cast_*(0));
                    NodeFunctionData.<argument_types(member_store_node, allocated_arguments);
                    NodeFunctionData.<returns(member_store_node, allocated_returns);

                    variable end_node = nodes_append_anonymous(&(nodes), NODE_ENDFUNCTION);

                    // Getter for individual members
                    variable allocated = brk_allocate(+(length(name), +(length(member_name), 3)));
                    copy(name, allocated, length(name));
                    copy("->", @cast_*(+(allocated, length(name))), 2);
                    copy(member_name, @cast_*(+(allocated, +(length(name), 2))), length(member_name));

                    variable allocated_arguments = brk_allocate(16);
                    array8_set(allocated_arguments, 0, allocated_pointer);

                    variable allocated_returns = brk_allocate(16);
                    array8_set(allocated_returns, 0, member_type);

                    variable member_store_node = @cast_*NodeFunctionData(nodes_append_data_anonymous(&(nodes), NODE_FUNCTION));
                    NodeFunctionData.<name(member_store_node, allocated);
                    NodeFunctionData.<argument_names(member_store_node, @cast_*(0));
                    NodeFunctionData.<argument_types(member_store_node, allocated_arguments);
                    NodeFunctionData.<returns(member_store_node, allocated_returns);

                    variable end_node = nodes_append_anonymous(&(nodes), NODE_ENDFUNCTION);

                    j = +(j, 1);
                };
            } else {
                name = get_structure_string_type(pointer);

                // Setter for whole value
                variable allocated = brk_allocate(+(length(name), 2));
                copy(name, allocated, length(name));
                copy("<", @cast_*(+(allocated, length(name))), 1);

                variable allocated_pointer = brk_allocate(+(length(name), 2));
                copy("*", allocated_pointer, 1);
                copy(name, @cast_*(+(allocated_pointer, 1)), length(name));

                variable allocated_arguments = brk_allocate(24);
                array8_set(allocated_arguments, 0, allocated_pointer);
                array8_set(allocated_arguments, 1, name);

                variable allocated_returns = brk_allocate(8);

                variable pointer_store_node = @cast_*NodeFunctionData(nodes_append_data_anonymous(&(nodes), NODE_FUNCTION));
                NodeFunctionData.<name(pointer_store_node, allocated);
                NodeFunctionData.<argument_names(pointer_store_node, @cast_*(0));
                NodeFunctionData.<argument_types(pointer_store_node, allocated_arguments);
                NodeFunctionData.<returns(pointer_store_node, allocated_returns);

                variable end_node = nodes_append_anonymous(&(nodes), NODE_ENDFUNCTION);

                // Getter for whole value
                variable allocated = brk_allocate(+(length(name), 2));
                copy(name, allocated, length(name));
                copy(">", @cast_*(+(allocated, length(name))), 1);

                variable allocated_arguments = brk_allocate(16);
                array8_set(allocated_arguments, 0, allocated_pointer);

                variable allocated_returns = brk_allocate(16);
                array8_set(allocated_returns, 0, name);

                variable pointer_store_node = @cast_*NodeFunctionData(nodes_append_data_anonymous(&(nodes), NODE_FUNCTION));
                NodeFunctionData.<name(pointer_store_node, allocated);
                NodeFunctionData.<argument_names(pointer_store_node, @cast_*(0));
                NodeFunctionData.<argument_types(pointer_store_node, allocated_arguments);
                NodeFunctionData.<returns(pointer_store_node, allocated_returns);

                variable end_node = nodes_append_anonymous(&(nodes), NODE_ENDFUNCTION);

                variable allocated_arguments = brk_allocate(8);

                variable allocated_returns = brk_allocate(16);
                array8_set(allocated_returns, 0, name);

                variable pointer_store_node = @cast_*NodeFunctionData(nodes_append_data_anonymous(&(nodes), NODE_FUNCTION));
                NodeFunctionData.<name(pointer_store_node, name);
                NodeFunctionData.<argument_names(pointer_store_node, @cast_*(0));
                NodeFunctionData.<argument_types(pointer_store_node, allocated_arguments);
                NodeFunctionData.<returns(pointer_store_node, allocated_returns);

                variable end_node = nodes_append_anonymous(&(nodes), NODE_ENDFUNCTION);

                variable allocated = brk_allocate(+(length(name), 4));
                copy(name, allocated, length(name));
                copy(">0", @cast_*(+(allocated, length(name))), 3);

                variable allocated_arguments = brk_allocate(8);

                variable allocated_returns = brk_allocate(16);
                array8_set(allocated_returns, 0, name);

                variable pointer_store_node = @cast_*NodeFunctionData(nodes_append_data_anonymous(&(nodes), NODE_FUNCTION));
                NodeFunctionData.<name(pointer_store_node, allocated);
                NodeFunctionData.<argument_names(pointer_store_node, @cast_*(0));
                NodeFunctionData.<argument_types(pointer_store_node, allocated_arguments);
                NodeFunctionData.<returns(pointer_store_node, allocated_returns);

                variable end_node = nodes_append_anonymous(&(nodes), NODE_ENDFUNCTION);

                variable member_names = NodeStructureData.>item_names(pointer);
                variable member_types = NodeStructureData.>item_types(pointer);

                variable j = 0;
                while !(=(array8_get(member_names, j), 0)) {
                    variable member_name = @cast_*(array8_get(member_names, j));
                    variable member_type = @cast_*(array8_get(member_types, j));

                    // Setter for individual members
                    variable allocated = brk_allocate(+(length(name), +(length(member_name), 2)));
                    copy(name, allocated, length(name));
                    copy("<", @cast_*(+(allocated, length(name))), 1);
                    copy(member_name, @cast_*(+(allocated, +(length(name), 1))), length(member_name));

                    variable allocated_arguments = brk_allocate(24);
                    array8_set(allocated_arguments, 0, allocated_pointer);
                    array8_set(allocated_arguments, 1, member_type);

                    variable allocated_returns = brk_allocate(8);

                    variable member_store_node = @cast_*NodeFunctionData(nodes_append_data_anonymous(&(nodes), NODE_FUNCTION));
                    NodeFunctionData.<name(member_store_node, allocated);
                    NodeFunctionData.<argument_names(member_store_node, @cast_*(0));
                    NodeFunctionData.<argument_types(member_store_node, allocated_arguments);
                    NodeFunctionData.<returns(member_store_node, allocated_returns);

                    variable end_node = nodes_append_anonymous(&(nodes), NODE_ENDFUNCTION);

                    // Getter for individual members
                    variable allocated = brk_allocate(+(length(name), +(length(member_name), 2)));
                    copy(name, allocated, length(name));
                    copy(">", @cast_*(+(allocated, length(name))), 1);
                    copy(member_name, @cast_*(+(allocated, +(length(name), 1))), length(member_name));

                    variable allocated_arguments = brk_allocate(16);
                    array8_set(allocated_arguments, 0, allocated_pointer);

                    variable allocated_returns = brk_allocate(16);
                    array8_set(allocated_returns, 0, member_type);

                    variable member_store_node = @cast_*NodeFunctionData(nodes_append_data_anonymous(&(nodes), NODE_FUNCTION));
                    NodeFunctionData.<name(member_store_node, allocated);
                    NodeFunctionData.<argument_names(member_store_node, @cast_*(0));
                    NodeFunctionData.<argument_types(member_store_node, allocated_arguments);
                    NodeFunctionData.<returns(member_store_node, allocated_returns);

                    variable end_node = nodes_append_anonymous(&(nodes), NODE_ENDFUNCTION);

                    j = +(j, 1);
                };
            };
        };
        i = +(i, 1);
    };

    println("Checking...");
    type_check(&(nodes));

    println("Outputting...");
    output_linux_x86-64_elf(&(nodes), output_file);
};

define get_structure_string_type = function(pointer: *NodeStructureData): * {
    variable main_name_buffer = autobuffer_new(16);
    variable main_name_index = 0;

    autobuffer_push_string(&(main_name_buffer), &(main_name_index), "structure[");

    variable items = NodeStructureData.>item_types(pointer);
    variable item_names = NodeStructureData.>item_names(pointer);

    variable j = 0;
    while !(=(array8_get(items, j), 0)) {
        autobuffer_push_string(&(main_name_buffer), &(main_name_index), @cast_*(array8_get(item_names, j)));
        autobuffer_push_string(&(main_name_buffer), &(main_name_index), ":");
        autobuffer_push_string(&(main_name_buffer), &(main_name_index), @cast_*(array8_get(items, j)));
        autobuffer_push_string(&(main_name_buffer), &(main_name_index), ",");
        j = +(j, 1);
    };

    main_name_index = -(main_name_index, 1);
    autobuffer_push_string(&(main_name_buffer), &(main_name_index), "]");

    return AutoBuffer->buffer(&(main_name_buffer));
};

define Nodes = structure {
    buffer: AutoBuffer;
    index: whole_8;
};

define nodes_new = function(): Nodes {
    variable nodes: Nodes;

    Nodes.<buffer(&(nodes), autobuffer_new(131072));
    Nodes.<index(&(nodes), 0);

    return nodes;
};

define add_basic_internal_functions = function(nodes: *Nodes) {
    // Just the internal functions that don't have more advanced argument types. (like '+' which can add many different sizes)
    variable function_arguments = autobuffer_new(24);
    autobuffer_array8_set(&(function_arguments), 0, "boolean");
    variable function_returns = autobuffer_new(24);
    autobuffer_array8_set(&(function_returns), 0, "boolean");
    nodes_append_function(nodes, "!", AutoBuffer->buffer(&(function_arguments)), AutoBuffer->buffer(&(function_returns)));

    variable function_arguments = autobuffer_new(24);
    autobuffer_array8_set(&(function_arguments), 0, "boolean");
    autobuffer_array8_set(&(function_arguments), 1, "boolean");
    variable function_returns = autobuffer_new(24);
    autobuffer_array8_set(&(function_returns), 0, "boolean");
    nodes_append_function(nodes, "&&", AutoBuffer->buffer(&(function_arguments)), AutoBuffer->buffer(&(function_returns)));
    nodes_append_function(nodes, "|", AutoBuffer->buffer(&(function_arguments)), AutoBuffer->buffer(&(function_returns)));
};

define Tokens = structure {
    buffer: AutoBuffer;
    index: whole_8;
};

define tokens_new = function(): Tokens {
    variable tokens: Tokens;

    Tokens.<buffer(&(tokens), autobuffer_new(131072));
    Tokens.<index(&(tokens), 0);

    return tokens;
};

define include_file = function(file_name: *, nodes: *Nodes, already_included: *AutoBuffer, already_included_index: *whole_8, is_target_internal_function: *function[*:boolean]) {
    variable nodes_index = &(Nodes.>index(nodes));
    variable tokens = tokens_new();

    variable contents = get_contents(file_name);

    tokenize(file_name, contents, &(tokens));

    variable previous_index = whole_8->(nodes_index);

    parse(&(tokens), nodes, is_target_internal_function);

    autobuffer_stack8_push(already_included, already_included_index, file_name);
};

define get_contents = function(name: *): * {
    variable descriptor = sys_open(name, O_RDONLY, 0);

    variable stat: Stat;
    sys_fstat(descriptor, &(stat));

    variable contents = brk_allocate(+(Stat->size(&(stat)), 1));

    sys_read(descriptor, contents, Stat->size(&(stat)));

    return contents;
};
