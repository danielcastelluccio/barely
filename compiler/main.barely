include "lib/syscall_linux.barely";
include "lib/autobuffer.barely";
include "compiler/parser.barely";
include "compiler/typechecker.barely";
include "compiler/output/linux-x86_64.barely";
include "compiler/util.barely";

global empty: any_8;

global cached_sizes_map: HashMap;
global cached_signedness_map: HashMap;

function main(arguments: **, argument_count: whole_8) {
    println("Parsing...");

    variable nodes = nodes_new();

    nodes_append_structure(&(nodes), "whole_8");
    nodes_append_structure(&(nodes), "whole_4");
    nodes_append_structure(&(nodes), "whole_2");
    nodes_append_structure(&(nodes), "whole_1");
    nodes_append_structure(&(nodes), "*");
    nodes_append_structure(&(nodes), "any_1");
    nodes_append_structure(&(nodes), "any_2");
    nodes_append_structure(&(nodes), "any_4");
    nodes_append_structure(&(nodes), "any_8");
    nodes_append_structure(&(nodes), "any_16");
    nodes_append_structure(&(nodes), "any_32");
    nodes_append_structure(&(nodes), "any_64");
    nodes_append_structure(&(nodes), "any_128");
    nodes_append_structure(&(nodes), "any_256");
    nodes_append_structure(&(nodes), "any_512");
    nodes_append_structure(&(nodes), "any_1024");
    nodes_append_structure(&(nodes), "any_2048");
    nodes_append_structure(&(nodes), "any_4096");

    add_internal_functions(&(nodes));

    cached_sizes_map = hashmap_new(131072);
    cached_signedness_map = hashmap_new(131072);

    variable already_included = autobuffer_new(64);
    variable already_included_index = 0;

    variable output_file = "output";

    variable i = 1;
    while <(i, argument_count) {
        variable pointer = @cast_*(array8_get(arguments, i));

        if string=(pointer, "--output") {
            variable output = @cast_*(array8_get(arguments, +(i, 1)));
            output_file = output;
            
            i = +(i, 2);
        } else {
            include_file(pointer, &(nodes), &(already_included), &(already_included_index));

            i = +(i, 1);
        };

    };

    variable nodes_index_saved = Nodes->index(&(nodes));
    variable i = 0;
    while <(i, nodes_index_saved) {
        if =(nodes_get_id(&(nodes), i), NODE_STRUCTURE) {
            variable pointer = @cast_*NodeStructureData(nodes_get_pointer_data(&(nodes), i));
            variable name = NodeStructureData->name(pointer);

            // Setter for whole value
            variable allocated = brk_allocate(+(length(name), 3));
            copy(name, allocated, length(name));
            copy("<-", @cast_*(+(allocated, length(name))), 2);

            variable allocated_pointer = brk_allocate(+(length(name), 2));
            copy("*", allocated_pointer, 1);
            copy(name, @cast_*(+(allocated_pointer, 1)), length(name));

            variable allocated_arguments = brk_allocate(24);
            array8_set(allocated_arguments, 0, allocated_pointer);
            array8_set(allocated_arguments, 1, name);

            variable allocated_returns = brk_allocate(8);

            variable pointer_store_node = @cast_*NodeFunctionData(nodes_append_data_anonymous(&(nodes), NODE_FUNCTION));
            NodeFunctionData<-name(pointer_store_node, allocated);
            NodeFunctionData<-argument_names(pointer_store_node, @cast_*(0));
            NodeFunctionData<-argument_types(pointer_store_node, allocated_arguments);
            NodeFunctionData<-returns(pointer_store_node, allocated_returns);

            variable end_node = nodes_append_anonymous(&(nodes), NODE_ENDFUNCTION);

            // Getter for whole value
            variable allocated = brk_allocate(+(length(name), 3));
            copy(name, allocated, length(name));
            copy("->", @cast_*(+(allocated, length(name))), 2);

            variable allocated_arguments = brk_allocate(16);
            array8_set(allocated_arguments, 0, allocated_pointer);

            variable allocated_returns = brk_allocate(16);
            array8_set(allocated_returns, 0, name);

            variable pointer_store_node = @cast_*NodeFunctionData(nodes_append_data_anonymous(&(nodes), NODE_FUNCTION));
            NodeFunctionData<-name(pointer_store_node, allocated);
            NodeFunctionData<-argument_names(pointer_store_node, @cast_*(0));
            NodeFunctionData<-argument_types(pointer_store_node, allocated_arguments);
            NodeFunctionData<-returns(pointer_store_node, allocated_returns);

            variable end_node = nodes_append_anonymous(&(nodes), NODE_ENDFUNCTION);

            variable member_names = NodeStructureData->item_names(pointer);
            variable member_types = NodeStructureData->item_types(pointer);

            variable j = 0;
            while !(=(array8_get(member_names, j), 0)) {
                variable member_name = @cast_*(array8_get(member_names, j));
                variable member_type = @cast_*(array8_get(member_types, j));

                // Setter for individual members
                variable allocated = brk_allocate(+(length(name), +(length(member_name), 3)));
                copy(name, allocated, length(name));
                copy("<-", @cast_*(+(allocated, length(name))), 2);
                copy(member_name, @cast_*(+(allocated, +(length(name), 2))), length(member_name));

                variable allocated_arguments = brk_allocate(24);
                array8_set(allocated_arguments, 0, allocated_pointer);
                array8_set(allocated_arguments, 1, member_type);

                variable allocated_returns = brk_allocate(8);

                variable member_store_node = @cast_*NodeFunctionData(nodes_append_data_anonymous(&(nodes), NODE_FUNCTION));
                NodeFunctionData<-name(member_store_node, allocated);
                NodeFunctionData<-argument_names(member_store_node, @cast_*(0));
                NodeFunctionData<-argument_types(member_store_node, allocated_arguments);
                NodeFunctionData<-returns(member_store_node, allocated_returns);

                variable end_node = nodes_append_anonymous(&(nodes), NODE_ENDFUNCTION);

                // Getter for individual members
                variable allocated = brk_allocate(+(length(name), +(length(member_name), 3)));
                copy(name, allocated, length(name));
                copy("->", @cast_*(+(allocated, length(name))), 2);
                copy(member_name, @cast_*(+(allocated, +(length(name), 2))), length(member_name));

                variable allocated_arguments = brk_allocate(16);
                array8_set(allocated_arguments, 0, allocated_pointer);

                variable allocated_returns = brk_allocate(16);
                array8_set(allocated_returns, 0, member_type);

                variable member_store_node = @cast_*NodeFunctionData(nodes_append_data_anonymous(&(nodes), NODE_FUNCTION));
                NodeFunctionData<-name(member_store_node, allocated);
                NodeFunctionData<-argument_names(member_store_node, @cast_*(0));
                NodeFunctionData<-argument_types(member_store_node, allocated_arguments);
                NodeFunctionData<-returns(member_store_node, allocated_returns);

                variable end_node = nodes_append_anonymous(&(nodes), NODE_ENDFUNCTION);

                j = +(j, 1);
            };
        };
        i = +(i, 1);
    };

    println("Checking...");
    type_check(&(nodes));

    println("Outputting...");
    output_linux_x86-64_elf(&(nodes), output_file);
};

structure Nodes {
    buffer: AutoBuffer;
    index: whole_8;
};

function nodes_new(): Nodes {
    variable nodes: Nodes;

    Nodes<-buffer(&(nodes), autobuffer_new(131072));
    Nodes<-index(&(nodes), 0);

    return nodes;
};

function add_internal_functions(nodes: *Nodes) {
    variable function_arguments = autobuffer_new(24);
    autoarray8_set(&(function_arguments), 0, "any_8");
    variable function_returns = autobuffer_new(24);
    autoarray8_set(&(function_returns), 0, "any_1");
    nodes_append_function(nodes, "*1", AutoBuffer->buffer(&(function_arguments)), AutoBuffer->buffer(&(function_returns)));

    variable function_arguments = autobuffer_new(24);
    autoarray8_set(&(function_arguments), 0, "any_8");
    variable function_returns = autobuffer_new(24);
    autoarray8_set(&(function_returns), 0, "any_8");
    nodes_append_function(nodes, "*8", AutoBuffer->buffer(&(function_arguments)), AutoBuffer->buffer(&(function_returns)));

    variable function_arguments = autobuffer_new(24);
    autoarray8_set(&(function_arguments), 0, "boolean");
    variable function_returns = autobuffer_new(24);
    autoarray8_set(&(function_returns), 0, "boolean");
    nodes_append_function(nodes, "!", AutoBuffer->buffer(&(function_arguments)), AutoBuffer->buffer(&(function_returns)));

    variable function_arguments = autobuffer_new(24);
    autoarray8_set(&(function_arguments), 0, "boolean");
    autoarray8_set(&(function_arguments), 1, "boolean");
    variable function_returns = autobuffer_new(24);
    autoarray8_set(&(function_returns), 0, "boolean");
    nodes_append_function(nodes, "&&", AutoBuffer->buffer(&(function_arguments)), AutoBuffer->buffer(&(function_returns)));
    nodes_append_function(nodes, "|", AutoBuffer->buffer(&(function_arguments)), AutoBuffer->buffer(&(function_returns)));

    variable function_arguments = autobuffer_new(24);
    autoarray8_set(&(function_arguments), 0, "whole_8");
    variable function_returns = autobuffer_new(24);
    autoarray8_set(&(function_returns), 0, "any_8");
    nodes_append_function(nodes, "@syscall0", AutoBuffer->buffer(&(function_arguments)), AutoBuffer->buffer(&(function_returns)));

    variable function_arguments = autobuffer_new(24);
    autoarray8_set(&(function_arguments), 0, "whole_8");
    autoarray8_set(&(function_arguments), 1, "any_8");
    variable function_returns = autobuffer_new(24);
    autoarray8_set(&(function_returns), 0, "any_8");
    nodes_append_function(nodes, "@syscall1", AutoBuffer->buffer(&(function_arguments)), AutoBuffer->buffer(&(function_returns)));

    variable function_arguments = autobuffer_new(24);
    autoarray8_set(&(function_arguments), 0, "whole_8");
    autoarray8_set(&(function_arguments), 1, "any_8");
    autoarray8_set(&(function_arguments), 2, "any_8");
    variable function_returns = autobuffer_new(24);
    autoarray8_set(&(function_returns), 0, "any_8");
    nodes_append_function(nodes, "@syscall2", AutoBuffer->buffer(&(function_arguments)), AutoBuffer->buffer(&(function_returns)));

    variable function_arguments = autobuffer_new(24);
    autoarray8_set(&(function_arguments), 0, "whole_8");
    autoarray8_set(&(function_arguments), 1, "any_8");
    autoarray8_set(&(function_arguments), 2, "any_8");
    autoarray8_set(&(function_arguments), 3, "any_8");
    variable function_returns = autobuffer_new(24);
    autoarray8_set(&(function_returns), 0, "any_8");
    nodes_append_function(nodes, "@syscall3", AutoBuffer->buffer(&(function_arguments)), AutoBuffer->buffer(&(function_returns)));

    variable function_arguments = autobuffer_new(24);
    autoarray8_set(&(function_arguments), 0, "whole_8");
    autoarray8_set(&(function_arguments), 1, "any_8");
    autoarray8_set(&(function_arguments), 2, "any_8");
    autoarray8_set(&(function_arguments), 3, "any_8");
    autoarray8_set(&(function_arguments), 4, "any_8");
    variable function_returns = autobuffer_new(24);
    autoarray8_set(&(function_returns), 0, "any_8");
    nodes_append_function(nodes, "@syscall4", AutoBuffer->buffer(&(function_arguments)), AutoBuffer->buffer(&(function_returns)));

    variable function_arguments = autobuffer_new(24);
    autoarray8_set(&(function_arguments), 0, "whole_8");
    autoarray8_set(&(function_arguments), 1, "any_8");
    autoarray8_set(&(function_arguments), 2, "any_8");
    autoarray8_set(&(function_arguments), 3, "any_8");
    autoarray8_set(&(function_arguments), 4, "any_8");
    autoarray8_set(&(function_arguments), 5, "any_8");
    variable function_returns = autobuffer_new(24);
    autoarray8_set(&(function_returns), 0, "any_8");
    nodes_append_function(nodes, "@syscall5", AutoBuffer->buffer(&(function_arguments)), AutoBuffer->buffer(&(function_returns)));
};

structure Tokens {
    buffer: AutoBuffer;
    index: whole_8;
};

function tokens_new(): Tokens {
    variable tokens: Tokens;

    Tokens<-buffer(&(tokens), autobuffer_new(131072));
    Tokens<-index(&(tokens), 0);

    return tokens;
};

function include_file(file_name: *, nodes: *Nodes, already_included: *AutoBuffer, already_included_index: *whole_8) {
    variable nodes_index = &(Nodes->index(nodes));
    variable tokens = tokens_new();

    variable contents = get_contents(file_name);

    tokenize(file_name, contents, &(tokens));

    variable previous_index = whole_8->(nodes_index);

    parse(&(tokens), nodes);

    autobuffer_stack8_push(already_included, already_included_index, file_name);

    variable i = 0;
    while <(i, whole_8->(nodes_index)) {
        variable id = nodes_get_id(nodes, i);

        if =(id, NODE_INCLUDE) {
            variable include_data = @cast_*NodeIncludeData(nodes_get_pointer_data(nodes, i));
            variable path = NodeIncludeData->path(include_data);

            variable included = false;
            variable j = 0;
            while <(j, whole_8->(already_included_index)) {
                if string=(@cast_*(autoarray8_get(already_included, j)), path) {
                    included = true;
                };
                j = +(j, 1);
            };

            if !(included) {
                include_file(path, nodes, already_included, already_included_index);
            };
        };

        i = +(i, 1);
    };
};

function get_contents(name: *): * {
    variable descriptor = sys_open(name, O_RDONLY, 0);

    variable stat: Stat;
    sys_fstat(descriptor, &(stat));

    variable contents = brk_allocate(+(Stat->size(&(stat)), 1));

    sys_read(descriptor, contents, Stat->size(&(stat)));

    return contents;
};
