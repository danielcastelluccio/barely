include "core.barely";
include "lib/syscall_linux.barely";
include "lib/autobuffer.barely";
include "lib/elf.barely";

global target_id: whole_8;

global empty: any_8;

global cached_types: AutoBuffer;
global cached_sizes: AutoBuffer;
global cached_index: whole_8;

function main(arguments: **, argument_count: whole_8) {
    variable i = 1;

    variable main_name: *;

    println("Parsing...");

    variable nodes = autobuffer_new(131072);
    variable nodes_index = 0;

    append_structure(&(nodes), &(nodes_index), "whole_8");
    append_structure(&(nodes), &(nodes_index), "whole_4");
    append_structure(&(nodes), &(nodes_index), "whole_2");
    append_structure(&(nodes), &(nodes_index), "whole_1");
    append_structure(&(nodes), &(nodes_index), "*");
    append_structure(&(nodes), &(nodes_index), "any_1");
    append_structure(&(nodes), &(nodes_index), "any_2");
    append_structure(&(nodes), &(nodes_index), "any_4");
    append_structure(&(nodes), &(nodes_index), "any_8");

    cached_types = autobuffer_new(131072);
    cached_sizes = autobuffer_new(131072);

    variable already_included = autobuffer_new(64);
    variable already_included_index = 0;

    while <(i, argument_count) {
        variable pointer = @cast_*(*8(@cast_*(+(arguments, *(8, i)))));

        if =(i, 1) {
            main_name = pointer;
        };

        include_file(pointer, &(nodes), &(nodes_index), &(already_included), &(already_included_index));

        i = @cast_whole_8(+(i, 1));

    };

    variable nodes_index_saved = nodes_index;
    variable i = 0;
    while <(i, nodes_index_saved) {
        if =(nodes_get_id(&(nodes), i), NODE_STRUCTURE) {
            variable pointer = @cast_*NodeStructureData(nodes_get_pointer_data(&(nodes), i));
            variable name = NodeStructureData->name(pointer);

            // Setter for whole value
            variable allocated = brk_allocate(whole_8+(length(name), 3));
            copy(name, allocated, length(name));
            copy("<-", @cast_*(+(allocated, length(name))), 2);

            variable allocated_pointer = brk_allocate(whole_8+(length(name), 2));
            copy("*", allocated_pointer, 1);
            copy(name, @cast_*(+(allocated_pointer, 1)), length(name));

            variable allocated_arguments = brk_allocate(24);
            array8_set(allocated_arguments, 0, allocated_pointer);
            array8_set(allocated_arguments, 1, name);

            variable allocated_returns = brk_allocate(8);

            variable pointer_store_node = @cast_*NodeFunctionData(append_node_data(&(nodes), &(nodes_index), NODE_FUNCTION));
            NodeFunctionData<-name(pointer_store_node, allocated);
            NodeFunctionData<-argument_names(pointer_store_node, @cast_*(0));
            NodeFunctionData<-argument_types(pointer_store_node, allocated_arguments);
            NodeFunctionData<-returns(pointer_store_node, allocated_returns);

            variable end_node = append_node(&(nodes), &(nodes_index), NODE_ENDFUNCTION);

            // Getter for whole value
            variable allocated = brk_allocate(whole_8+(length(name), 3));
            copy(name, allocated, length(name));
            copy("->", @cast_*(+(allocated, length(name))), 2);

            variable allocated_arguments = brk_allocate(16);
            array8_set(allocated_arguments, 0, allocated_pointer);

            variable allocated_returns = brk_allocate(16);
            array8_set(allocated_returns, 0, name);

            variable pointer_store_node = @cast_*NodeFunctionData(append_node_data(&(nodes), &(nodes_index), NODE_FUNCTION));
            NodeFunctionData<-name(pointer_store_node, allocated);
            NodeFunctionData<-argument_names(pointer_store_node, @cast_*(0));
            NodeFunctionData<-argument_types(pointer_store_node, allocated_arguments);
            NodeFunctionData<-returns(pointer_store_node, allocated_returns);

            variable end_node = append_node(&(nodes), &(nodes_index), NODE_ENDFUNCTION);

            variable member_names = *->(@cast_**(+(nodes_get_pointer(&(nodes), i), 16)));
            variable member_types = *->(@cast_**(+(nodes_get_pointer(&(nodes), i), 24)));

            variable j = 0;
            while !(=(@cast_whole_8(array8_get(member_names, j)), 0)) {
                variable member_name = @cast_*(array8_get(member_names, j));
                variable member_type = @cast_*(array8_get(member_types, j));

                // Setter for individual members
                variable allocated = brk_allocate(whole_8+(length(name), whole_8+(length(member_name), 3)));
                copy(name, allocated, length(name));
                copy("<-", @cast_*(+(allocated, length(name))), 2);
                copy(member_name, @cast_*(+(allocated, +(length(name), 2))), length(member_name));

                variable allocated_arguments = brk_allocate(24);
                array8_set(allocated_arguments, 0, allocated_pointer);
                array8_set(allocated_arguments, 1, member_type);

                variable allocated_returns = brk_allocate(8);

                variable member_store_node = @cast_*NodeFunctionData(append_node_data(&(nodes), &(nodes_index), NODE_FUNCTION));
                NodeFunctionData<-name(member_store_node, allocated);
                NodeFunctionData<-argument_names(member_store_node, @cast_*(0));
                NodeFunctionData<-argument_types(member_store_node, allocated_arguments);
                NodeFunctionData<-returns(member_store_node, allocated_returns);

                variable end_node = append_node(&(nodes), &(nodes_index), NODE_ENDFUNCTION);

                // Getter for individual members
                variable allocated = brk_allocate(whole_8+(length(name), whole_8+(length(member_name), 3)));
                copy(name, allocated, length(name));
                copy("->", @cast_*(+(allocated, length(name))), 2);
                copy(member_name, @cast_*(+(allocated, +(length(name), 2))), length(member_name));

                variable allocated_arguments = brk_allocate(16);
                array8_set(allocated_arguments, 0, allocated_pointer);

                variable allocated_returns = brk_allocate(16);
                array8_set(allocated_returns, 0, member_type);

                variable member_store_node = @cast_*NodeFunctionData(append_node_data(&(nodes), &(nodes_index), NODE_FUNCTION));
                NodeFunctionData<-name(member_store_node, allocated);
                NodeFunctionData<-argument_names(member_store_node, @cast_*(0));
                NodeFunctionData<-argument_types(member_store_node, allocated_arguments);
                NodeFunctionData<-returns(member_store_node, allocated_returns);

                variable end_node = append_node(&(nodes), &(nodes_index), NODE_ENDFUNCTION);

                j = whole_8+(j, 1);
            };
        };
        i = whole_8+(i, 1);
    };

    println("Checking...");
    type_check(&(nodes), nodes_index);

    println("Outputting...");
    output_linux_x86-64_elf(&(nodes), nodes_index, main_name);
};

function include_file(file_name: *, nodes: *AutoBuffer, nodes_index: *whole_8, already_included: *AutoBuffer, already_included_index: *whole_8) {
    variable tokens = autobuffer_new(131072);
    variable tokens_index = 0;

    variable contents = get_contents(file_name);

    tokenize(contents, &(tokens), &(tokens_index));

    variable previous_index = whole_8->(nodes_index);

    parse(&(tokens), tokens_index, nodes, nodes_index);

    autostack8_push(already_included, already_included_index, file_name);

    variable i = 0;
    while <(i, whole_8->(nodes_index)) {
        variable id = nodes_get_id(nodes, i);

        if =(id, NODE_INCLUDE) {
            variable include_data = @cast_*NodeIncludeData(nodes_get_pointer_data(nodes, i));
            variable path = NodeIncludeData->path(include_data);

            variable included = false;
            variable j = 0;
            while <(j, whole_8->(already_included_index)) {
                if string=(@cast_*(autoarray8_get(already_included, j)), path) {
                    included = true;
                };
                j = whole_8+(j, 1);
            };

            if !(included) {
                include_file(path, nodes, nodes_index, already_included, already_included_index);
            };
        };

        i = whole_8+(i, 1);
    };
};

function is_number(string: *): boolean {
    variable length = length(string);

    variable i = 0;
    while <(i, length) {
        variable character = any_1->(@cast_*any_1(+(string, i)));

        if =(@cast_whole_8(byte_to_integer(character)), 95) {
            i = 999;
            character = byte(48);
        };

        if <(@cast_whole_8(byte_to_integer(character)), 48) {
            return false;
        };

        if >(@cast_whole_8(byte_to_integer(character)), 57) {
            return false;
        };
        i = @cast_whole_8(+(i, 1));
    };

    return true;
};

function to_number(string: *): whole_8 {
    variable length = length(string);

    variable whole_8 = 0;

    variable i = 0;
    while <(i, length) {
        variable character = @cast_whole_8(byte_to_integer(any_1->(@cast_*any_1(+(string, i)))));

        if =(character, 95) {
            i = 999;
        } else {
            whole_8 = @cast_whole_8(*(whole_8, 10));
            whole_8 = @cast_whole_8(+(whole_8, -(character, 48)));
            i = @cast_whole_8(+(i, 1));
        };
    };

    return whole_8;
};

function whole_8_to_string(whole_8: whole_8, buffer: *) {
    variable whole_82 = whole_8;

    if =(whole_8, 0) {
        any_1<-(@cast_*any_1(buffer), byte(48));
    };

    variable length = 0;
    while !(=(whole_82, 0)) {
        whole_82 = @cast_whole_8(/(whole_82, 10));
        length = @cast_whole_8(+(length, 1));
    };

    whole_82 = whole_8;

    variable i = 0;
    while !(=(whole_82, 0)) {
        variable number = @cast_whole_8(%(whole_82, 10));
        any_1<-(@cast_*any_1(+(buffer, -(-(length, 1), i))), byte(+(number, 48)));
        whole_82 = @cast_whole_8(/(whole_82, 10));
        i = @cast_whole_8(+(i, 1));
    };
};

function append_token_data(tokens: *AutoBuffer, tokens_index: *whole_8, id: whole_8): * {
    return @cast_*(+(append_token(tokens, tokens_index, id), 8));
};

function append_token(tokens: *AutoBuffer, tokens_index: *whole_8, id: whole_8): * {
    autobuffer_register(tokens, whole_8*(whole_8->(tokens_index), TOKEN_SIZE), TOKEN_SIZE);
    variable to_return = autobuffer_get(tokens, whole_8*(whole_8->(tokens_index), TOKEN_SIZE));

    autobuffer_set_whole_8(tokens, id, whole_8*(whole_8->(tokens_index), TOKEN_SIZE));

    increment_whole_8_pointer(tokens_index, 1);

    return to_return;
};

function tokenize_inner(auto_buffer: *AutoBuffer, tokens: *AutoBuffer, tokens_index: *whole_8) {
    variable buffer = AutoBuffer->buffer(auto_buffer);
    variable buffer_length = length(AutoBuffer->buffer(auto_buffer));

    if =(buffer_length, 0) {
        return;
    };

    variable is_keyword = false;
    if string=(buffer, "function") {
        is_keyword = true;
    };
    if string=(buffer, "variable") {
        is_keyword = true;
    };
    if string=(buffer, "return") {
        is_keyword = true;
    };
    if string=(buffer, "structure") {
        is_keyword = true;
    };
    if string=(buffer, "if") {
        is_keyword = true;
    };
    if string=(buffer, "else") {
        is_keyword = true;
    };
    if string=(buffer, "while") {
        is_keyword = true;
    };
    if string=(buffer, "global") {
        is_keyword = true;
    };
    if string=(buffer, "constant") {
        is_keyword = true;
    };
    if string=(buffer, "include") {
        is_keyword = true;
    };

    if is_keyword {
        variable allocated = brk_allocate(@cast_whole_8(+(buffer_length, 1)));
        copy(buffer, allocated, buffer_length);

        variable keyword_data = @cast_*TokenKeywordData(append_token_data(tokens, tokens_index, TOKEN_KEYWORD));
        TokenKeywordData<-keyword(keyword_data, allocated);
        return;
    };

    if is_number(buffer) {
        variable whole_8_data = @cast_*TokenNumberData(append_token_data(tokens, tokens_index, TOKEN_NUMBER));

        variable stage = 0;
        variable type_buffer = autobuffer_new(8);
        variable type_buffer_index = 0;

        variable size_buffer = autobuffer_new(8);
        variable size_buffer_index = 0;

        variable j = 0;
        while <(j, length(buffer)) {
            variable character = @cast_whole_8(byte_to_integer(any_1->(@cast_*any_1(+(buffer, j)))));
            if =(character, 95) {
                stage = whole_8+(stage, 1);
            } else if =(stage, 1) {
                autopush_byte(&(type_buffer), &(type_buffer_index), byte(character));
            } else if =(stage, 2) {
                autopush_byte(&(size_buffer), &(size_buffer_index), byte(character));
            };
            
            j = whole_8+(j, 1);
        };

        if =(length(AutoBuffer->buffer(&(type_buffer))), 0) {
            autopush_pointer(&(type_buffer), &(type_buffer_index), "whole", 5);
        };

        if =(length(AutoBuffer->buffer(&(size_buffer))), 0) {
            autopush_pointer(&(size_buffer), &(size_buffer_index), "8", 1);
        };

        if string=(AutoBuffer->buffer(&(type_buffer)), "whole") {
            TokenNumberData<-type(whole_8_data, 0);
        } else {
            TokenNumberData<-type(whole_8_data, 1);
        };

        TokenNumberData<-size(whole_8_data, to_number(AutoBuffer->buffer(&(size_buffer))));
        TokenNumberData<-value(whole_8_data, to_number(buffer));

        return;
    };

    if |(string=(buffer, "true"), string=(buffer, "false")) {
        variable boolean_data = @cast_*TokenBooleanData(append_token_data(tokens, tokens_index, TOKEN_BOOLEAN));
        TokenBooleanData<-value(boolean_data, string=(buffer, "true"));

        return;
    };
    
    variable allocated = brk_allocate(@cast_whole_8(+(buffer_length, 1)));
    copy(buffer, allocated, buffer_length);

    variable name_data = @cast_*TokenNameData(append_token_data(tokens, tokens_index, TOKEN_NAME));
    TokenNameData<-name(name_data, allocated);
};

constant ASCII_SPACE: whole_8 = 32;
constant ASCII_OPEN_PARENTHESIS: whole_8 = 40;
constant ASCII_CLOSED_PARENTHESIS: whole_8 = 41;
constant ASCII_OPEN_CURLY_BRACKETS: whole_8 = 123;
constant ASCII_CLOSED_CURLY_BRACKETS: whole_8 = 125;
constant ASCII_COMMA: whole_8 = 44;
constant ASCII_SEMICOLON: whole_8 = 59;
constant ASCII_COLON: whole_8 = 58;
constant ASCII_TAB: whole_8 = 9;
constant ASCII_LINE_FEED: whole_8 = 10;
constant ASCII_QUOTATION: whole_8 = 34;
constant ASCII_SLASH: whole_8 = 47;

constant TOKEN_OPEN_PARENTHESIS: whole_8 = 0;
constant TOKEN_CLOSED_PARENTHESIS: whole_8 = 1;
constant TOKEN_OPEN_CURLY_BRACKETS: whole_8 = 2;
constant TOKEN_CLOSED_CURLY_BRACKETS: whole_8 = 3;
constant TOKEN_COMMA: whole_8 = 4;
constant TOKEN_SEMICOLON: whole_8 = 5;
constant TOKEN_KEYWORD: whole_8 = 6;

structure TokenKeywordData {
    keyword: *;
};

constant TOKEN_NAME: whole_8 = 7;

structure TokenNameData {
    name: *;
};

constant TOKEN_STRING: whole_8 = 8;

structure TokenStringData {
    value: *;
};

constant TOKEN_NUMBER: whole_8 = 9;

structure TokenNumberData {
    value: whole_8;
    type: whole_8;
    size: whole_8;
};

constant TOKEN_COLON: whole_8 = 10;

constant TOKEN_BOOLEAN: whole_8 = 11;

structure TokenBooleanData {
    value: boolean;
};

constant TOKEN_SIZE: whole_8 = 32;

function tokenize(contents: *, tokens: *AutoBuffer, tokens_index: *whole_8) {
    variable index = 0;
    variable contents_length = length(contents);

    variable buffer = autobuffer_new(64);
    variable buffer_index = 0;

    variable in_quotes = false;
    variable in_comment = false;

    while <(index, contents_length) {
        variable character_pointer = @cast_*(+(contents, index));
        variable character_pointer_next = @cast_*(+(contents, +(index, 1)));
        variable done_anything = false;

        if !(in_quotes) {
            if !(in_comment) {
                if =(*1(character_pointer), byte(ASCII_SPACE)) {
                    tokenize_inner(&(buffer), tokens, tokens_index);
                    done_anything = true;
                    autobuffer_reset(&(buffer));
                    buffer_index = 0;
                };
                if =(*1(character_pointer), byte(ASCII_OPEN_PARENTHESIS)) {
                    tokenize_inner(&(buffer), tokens, tokens_index);
                    done_anything = true;
                    autobuffer_reset(&(buffer));
                    buffer_index = 0;

                    autobuffer_set_whole_8(tokens, TOKEN_OPEN_PARENTHESIS, whole_8*(whole_8->(tokens_index), TOKEN_SIZE));
                    increment_whole_8_pointer(tokens_index, 1);
                };
                if =(*1(character_pointer), byte(ASCII_CLOSED_PARENTHESIS)) {
                    tokenize_inner(&(buffer), tokens, tokens_index);
                    done_anything = true;
                    autobuffer_reset(&(buffer));
                    buffer_index = 0;

                    autobuffer_set_whole_8(tokens, TOKEN_CLOSED_PARENTHESIS, whole_8*(whole_8->(tokens_index), TOKEN_SIZE));
                    increment_whole_8_pointer(tokens_index, 1);
                };
                if =(*1(character_pointer), byte(ASCII_OPEN_CURLY_BRACKETS)) {
                    tokenize_inner(&(buffer), tokens, tokens_index);
                    done_anything = true;
                    autobuffer_reset(&(buffer));
                    buffer_index = 0;

                    autobuffer_set_whole_8(tokens, TOKEN_OPEN_CURLY_BRACKETS, whole_8*(whole_8->(tokens_index), TOKEN_SIZE));
                    increment_whole_8_pointer(tokens_index, 1);
                };
                if =(*1(character_pointer), byte(ASCII_CLOSED_CURLY_BRACKETS)) {
                    tokenize_inner(&(buffer), tokens, tokens_index);
                    done_anything = true;
                    autobuffer_reset(&(buffer));
                    buffer_index = 0;

                    autobuffer_set_whole_8(tokens, TOKEN_CLOSED_CURLY_BRACKETS, whole_8*(whole_8->(tokens_index), TOKEN_SIZE));
                    increment_whole_8_pointer(tokens_index, 1);
                };
                if =(*1(character_pointer), byte(ASCII_COMMA)) {
                    tokenize_inner(&(buffer), tokens, tokens_index);
                    done_anything = true;
                    autobuffer_reset(&(buffer));
                    buffer_index = 0;

                    autobuffer_set_whole_8(tokens, TOKEN_COMMA, whole_8*(whole_8->(tokens_index), TOKEN_SIZE));
                    increment_whole_8_pointer(tokens_index, 1);
                };
                if =(*1(character_pointer), byte(ASCII_SEMICOLON)) {
                    tokenize_inner(&(buffer), tokens, tokens_index);
                    done_anything = true;
                    autobuffer_reset(&(buffer));
                    buffer_index = 0;

                    autobuffer_set_whole_8(tokens, TOKEN_SEMICOLON, whole_8*(whole_8->(tokens_index), TOKEN_SIZE));
                    increment_whole_8_pointer(tokens_index, 1);
                };
                if =(*1(character_pointer), byte(ASCII_COLON)) {
                    tokenize_inner(&(buffer), tokens, tokens_index);
                    done_anything = true;
                    autobuffer_reset(&(buffer));
                    buffer_index = 0;

                    autobuffer_set_whole_8(tokens, TOKEN_COLON, whole_8*(whole_8->(tokens_index), TOKEN_SIZE));
                    increment_whole_8_pointer(tokens_index, 1);
                };
                if =(*1(character_pointer), byte(ASCII_TAB)) {
                    done_anything = true;
                    autobuffer_reset(&(buffer));
                    buffer_index = 0;
                };
            };

            if =(*1(character_pointer), byte(ASCII_LINE_FEED)) {
                in_comment = false;
                done_anything = true;
                autobuffer_reset(&(buffer));
                buffer_index = 0;
            };
        };
        if !(in_comment) {
            if =(*1(character_pointer), byte(ASCII_QUOTATION)) {
                if in_quotes {
                    variable buffer_length = length(AutoBuffer->buffer(&(buffer)));
                    variable allocated = brk_allocate(@cast_whole_8(+(buffer_length, 1)));
                    copy(AutoBuffer->buffer(&(buffer)), allocated, buffer_length);

                    variable string_pointer_data = @cast_*TokenStringData(append_token_data(tokens, tokens_index, TOKEN_STRING));
                    TokenStringData<-value(string_pointer_data, allocated);

                    autobuffer_reset(&(buffer));
                    buffer_index = 0;
                };

                in_quotes = !(in_quotes);
                done_anything = true;
            };
        };
        if =(*1(character_pointer), byte(ASCII_SLASH)) {
            if =(*1(character_pointer_next), byte(ASCII_SLASH)) {
                in_comment = true;
                done_anything = true;
            };
        };

        if !(done_anything) {
            if !(in_comment) {
                autobuffer_set_any_1(&(buffer), any_1->(@cast_*any_1(character_pointer)), buffer_index);

                buffer_index = whole_8+(buffer_index, 1);
            };
        };

        index = @cast_whole_8(+(index, 1));
    };
};

constant NODE_FUNCTION: whole_8 = 0;

structure NodeFunctionData {
    name: *;
    argument_names: *;
    argument_types: *;
    returns: *;
};

constant NODE_ENDFUNCTION: whole_8 = 1;

constant NODE_RETRIEVE: whole_8 = 2;

structure NodeRetrieveData {
    name: *;
};

constant NODE_STRING: whole_8 = 3;

structure NodeStringData {
    value: *;
};

constant NODE_NUMBER: whole_8 = 4;

structure NodeNumberData {
    value: whole_8;
    type: whole_8;
    size: whole_8;
};

constant NODE_INVOKE: whole_8 = 5;

structure NodeInvokeData {
    name: *;
};

constant NODE_DECLARE: whole_8 = 6;

structure NodeDeclareData {
    name: *;
    type: *;
};

constant NODE_ASSIGN: whole_8 = 7;

structure NodeAssignData {
    name: *;
};

constant NODE_RETURN: whole_8 = 8;

constant NODE_STRUCTURE: whole_8 = 9;

structure NodeStructureData {
    name: *;
    item_names: *;
    item_types: *;
};

constant NODE_POINTER: whole_8 = 10;

constant NODE_BOOLEAN: whole_8 = 11;

structure NodeBooleanData {
    value: boolean;
};

constant NODE_JUMP_CONDITIONAL: whole_8 = 12;

structure NodeJumpConditionalData {
    target_id: whole_8;
    desired_state: boolean;
};

constant NODE_TARGET: whole_8 = 13;

structure NodeTargetData {
    id: whole_8;
};

constant NODE_JUMP: whole_8 = 14;

structure NodeJumpData {
    target_id: whole_8;
};

constant NODE_GLOBAL: whole_8 = 15;

structure NodeGlobalData {
    name: *;
    type: *;
};

constant NODE_CONSTANT: whole_8 = 16;

structure NodeConstantData {
    name: *;
    type: *;
    value: any_8;
};

constant NODE_ZERO: whole_8 = 17;

structure NodeZeroData {
    name: *;
    type: *;
};

constant NODE_INCLUDE: whole_8 = 18;

structure NodeIncludeData {
    path: *;
};

constant NODE_SIZE: whole_8 = 48;

function tokens_get_id(tokens: *AutoBuffer, index: whole_8): whole_8 {
    return autobuffer_get_whole_8(tokens, whole_8*(index, TOKEN_SIZE));
};

function tokens_get_pointer(tokens: *AutoBuffer, index: whole_8): * {
    return autobuffer_get(tokens, whole_8*(index, TOKEN_SIZE));
};

function tokens_get_pointer_data(tokens: *AutoBuffer, index: whole_8): * {
    return autobuffer_get(tokens, whole_8+(whole_8*(index, TOKEN_SIZE), 8));
};

function increment_whole_8_pointer(pointer: *whole_8, amount: whole_8) {
    whole_8<-(pointer, @cast_whole_8(+(whole_8->(pointer), amount)));
};

function decrement_whole_8_pointer(pointer: *whole_8, amount: whole_8) {
    whole_8<-(pointer, @cast_whole_8(-(whole_8->(pointer), amount)));
};

function append_node_data(nodes: *AutoBuffer, nodes_index: *whole_8, id: whole_8): * {
    return @cast_*(+(append_node(nodes, nodes_index, id), 8));
};

function append_node(nodes: *AutoBuffer, nodes_index: *whole_8, id: whole_8): * {
    autobuffer_register(nodes, whole_8*(whole_8->(nodes_index), NODE_SIZE), NODE_SIZE);
    variable to_return = autobuffer_get(nodes, whole_8*(whole_8->(nodes_index), NODE_SIZE));

    autobuffer_set_whole_8(nodes, id, whole_8*(whole_8->(nodes_index), NODE_SIZE));

    increment_whole_8_pointer(nodes_index, 1);

    return to_return;
};

function append_structure(nodes: *AutoBuffer, nodes_index, *whole_8, name: *) {
    variable structure_data = @cast_*NodeStructureData(append_node_data(nodes, nodes_index, NODE_STRUCTURE));
    NodeStructureData<-name(structure_data, name);
    NodeStructureData<-item_names(structure_data, &(empty));
    NodeStructureData<-item_types(structure_data, &(empty));
};

function parse_constant(tokens: *AutoBuffer, index_pointer: *whole_8, nodes: *AutoBuffer, nodes_index: *whole_8) {
    variable index = whole_8->(index_pointer);
    variable name_token_pointer_data = @cast_*TokenNameData(tokens_get_pointer_data(tokens, whole_8+(index, 1)));
    variable name = TokenNameData->name(name_token_pointer_data);
    variable type_token_pointer_data = @cast_*TokenNameData(tokens_get_pointer_data(tokens, whole_8+(index, 3)));
    variable type = TokenNameData->name(type_token_pointer_data);
    variable value_token_pointer_data = @cast_*TokenNumberData(tokens_get_pointer_data(tokens, whole_8+(index, 5)));
    variable value = TokenNumberData->value(value_token_pointer_data);

    variable constant_node_data = @cast_*NodeConstantData(append_node_data(nodes, nodes_index, NODE_CONSTANT));
    NodeConstantData<-name(constant_node_data, name);
    NodeConstantData<-type(constant_node_data, type);
    NodeConstantData<-value(constant_node_data, value);

    increment_whole_8_pointer(index_pointer, 7);
};

function parse_global(tokens: *AutoBuffer, index_pointer: *whole_8, nodes: *AutoBuffer, nodes_index: *whole_8) {
    variable index = whole_8->(index_pointer);
    variable name_token_pointer_data = @cast_*TokenNameData(tokens_get_pointer_data(tokens, whole_8+(index, 1)));
    variable name = TokenNameData->name(name_token_pointer_data);
    variable type_token_pointer_data = @cast_*TokenNameData(tokens_get_pointer_data(tokens, whole_8+(index, 3)));
    variable type = TokenNameData->name(type_token_pointer_data);

    variable global_node_data = @cast_*NodeGlobalData(append_node_data(nodes, nodes_index, NODE_GLOBAL));
    NodeGlobalData<-name(global_node_data, name);
    NodeGlobalData<-type(global_node_data, type);

    increment_whole_8_pointer(index_pointer, 5);
};

function parse_include(tokens: *AutoBuffer, index_pointer: *whole_8, nodes: *AutoBuffer, nodes_index: *whole_8) {
    variable index = whole_8->(index_pointer);
    variable name_token_pointer_data = @cast_*TokenNameData(tokens_get_pointer_data(tokens, whole_8+(index, 1)));
    variable name = TokenNameData->name(name_token_pointer_data);

    variable include_node_data = @cast_*NodeIncludeData(append_node_data(nodes, nodes_index, NODE_INCLUDE));
    NodeIncludeData<-path(include_node_data, name);

    increment_whole_8_pointer(index_pointer, 3);
};

function parse_structure(tokens: *AutoBuffer, index_pointer: *whole_8, nodes: *AutoBuffer, nodes_index: *whole_8) {
    variable index = whole_8->(index_pointer);
    variable name_token_pointer_data = @cast_*TokenNameData(tokens_get_pointer_data(tokens, whole_8+(index, 1)));
    variable name = TokenNameData->name(name_token_pointer_data);

    variable member_names = autobuffer_new(40);
    variable member_types = autobuffer_new(40);
    variable member_index = 0;

    index = whole_8+(index, 3);

    variable seen_name = false;

    while !(=(tokens_get_id(tokens, index), TOKEN_CLOSED_CURLY_BRACKETS)) {
        variable id = tokens_get_id(tokens, index);

        if =(id, TOKEN_NAME) {
            variable token_pointer_data = @cast_*TokenNameData(tokens_get_pointer_data(tokens, index));
            variable name_name = TokenNameData->name(token_pointer_data);

            if seen_name {
                autoarray8_set(&(member_types), member_index, name_name);
                member_index = whole_8+(member_index, 1);
            } else {
                autoarray8_set(&(member_names), member_index, name_name);
            };

            seen_name = !(seen_name);
        };

        index = whole_8+(index, 1);
    };

    variable structure_data = @cast_*NodeStructureData(append_node_data(nodes, nodes_index, NODE_STRUCTURE));
    NodeStructureData<-name(structure_data, name);
    NodeStructureData<-item_names(structure_data, AutoBuffer->buffer(&(member_names)));
    NodeStructureData<-item_types(structure_data, AutoBuffer->buffer(&(member_types)));

    index = whole_8+(index, 2);

    whole_8<-(index_pointer, index);
};

function parse_function(tokens: *AutoBuffer, index_pointer: *whole_8, nodes: *AutoBuffer, nodes_index: *whole_8) {
    variable index = whole_8->(index_pointer);

    variable name_token_pointer_data = @cast_*TokenNameData(tokens_get_pointer_data(tokens, whole_8+(index, 1)));
    variable name = TokenNameData->name(name_token_pointer_data);

    variable function_data = @cast_*NodeFunctionData(append_node_data(nodes, nodes_index, NODE_FUNCTION));
    NodeFunctionData<-name(function_data, name);

    index = @cast_whole_8(+(index, 3));

    variable parameter_names_pointer = autobuffer_new(40);
    variable parameter_types_pointer = autobuffer_new(40);
    variable returns_pointer = autobuffer_new(40);

    variable parameters_index = 0;
    variable parameters_index2 = 0;
    while !(=(tokens_get_id(tokens, index), TOKEN_CLOSED_PARENTHESIS)) {
        variable id = tokens_get_id(tokens, index);

        if =(id, TOKEN_NAME) {
            variable token_name = TokenNameData->name(@cast_*TokenNameData(tokens_get_pointer_data(tokens, index)));

            if =(%(parameters_index, 2), 0) {
                autoarray8_set(&(parameter_names_pointer), parameters_index2, token_name);
            } else {
                autoarray8_set(&(parameter_types_pointer), parameters_index2, token_name);
                parameters_index2 = @cast_whole_8(+(parameters_index2, 1));
            };

            parameters_index = @cast_whole_8(+(parameters_index, 1));
        };

        index = @cast_whole_8(+(index, 1));
    };
    
    index = @cast_whole_8(+(index, 1));

    variable returns_index = 0;
    while &&(!(=(tokens_get_id(tokens, index), TOKEN_OPEN_CURLY_BRACKETS)), !(=(tokens_get_id(tokens, index), TOKEN_SEMICOLON))) {
        variable id = tokens_get_id(tokens, index);

        if =(id, TOKEN_NAME) {
            variable token_name = TokenNameData->name(@cast_*TokenNameData(tokens_get_pointer_data(tokens, index)));

            autoarray8_set(&(returns_pointer), returns_index, token_name);
        };

        index = @cast_whole_8(+(index, 1));
    };

    variable has_body = =(tokens_get_id(tokens, index), TOKEN_OPEN_CURLY_BRACKETS);

    NodeFunctionData<-argument_names(function_data, AutoBuffer->buffer(&(parameter_names_pointer)));
    NodeFunctionData<-argument_types(function_data, AutoBuffer->buffer(&(parameter_types_pointer)));
    NodeFunctionData<-returns(function_data, AutoBuffer->buffer(&(returns_pointer)));

    index = @cast_whole_8(+(index, 1));

    if has_body {
        while !(=(tokens_get_id(tokens, index), TOKEN_CLOSED_CURLY_BRACKETS)) {
            parse_statement(tokens, &(index), nodes, nodes_index);
        };

        index = whole_8+(index, 2);
    };

    if !(=(nodes_get_id(nodes, whole_8-(whole_8->(nodes_index), 1)), NODE_RETURN)) {
        if has_body {
            variable _ = append_node(nodes, nodes_index, NODE_RETURN);
        };
    };

    variable _ = append_node(nodes, nodes_index, NODE_ENDFUNCTION);

    whole_8<-(index_pointer, index);
};

function parse_expression(tokens: *AutoBuffer, index_pointer: *whole_8, nodes: *AutoBuffer, nodes_index: *whole_8) {
    variable index = whole_8->(index_pointer);

    variable id = tokens_get_id(tokens, index);
    variable pointer_data = tokens_get_pointer_data(tokens, index);

    if =(id, TOKEN_NAME) {
        variable done_anything_name = false;
        if =(tokens_get_id(tokens, @cast_whole_8(+(index, 1))), TOKEN_OPEN_PARENTHESIS) {
            variable function_name = TokenNameData->name(@cast_*TokenNameData(tokens_get_pointer_data(tokens, index)));

            index = @cast_whole_8(+(index, 2));

            while !(=(tokens_get_id(tokens, index), TOKEN_CLOSED_PARENTHESIS)) {
                if =(tokens_get_id(tokens, index), TOKEN_COMMA) {
                    index = @cast_whole_8(+(index, 1));
                } else {
                    parse_expression(tokens, &(index), nodes, nodes_index);
                };
            };

            index = @cast_whole_8(+(index, 1));

            if string=(function_name, "&") {
                variable invoke_pointer = append_node(nodes, nodes_index, NODE_POINTER);
            } else {
                variable invoke_pointer_data = @cast_*NodeInvokeData(append_node_data(nodes, nodes_index, NODE_INVOKE));
                NodeInvokeData<-name(invoke_pointer_data, function_name);
            };

            done_anything_name = true;
        };

        if !(done_anything_name) {
            variable retrieve_name = TokenNameData->name(@cast_*TokenNameData(tokens_get_pointer_data(tokens, index)));
            variable retrieve_pointer_data = @cast_*NodeRetrieveData(append_node_data(nodes, nodes_index, NODE_RETRIEVE));
            NodeRetrieveData<-name(retrieve_pointer_data, retrieve_name);

            index = @cast_whole_8(+(index, 1));
        };
    };

    if =(id, TOKEN_STRING) {
        variable string_value = TokenStringData->value(@cast_*TokenStringData(pointer_data));
        variable string_pointer_data = @cast_*NodeStringData(append_node_data(nodes, nodes_index, NODE_STRING));
        NodeStringData<-value(string_pointer_data, string_value);

        index = @cast_whole_8(+(index, 1));
    };

    if =(id, TOKEN_NUMBER) {
        variable whole_8_data = @cast_*TokenNumberData(pointer_data);
        variable whole_8_pointer_data = @cast_*NodeNumberData(append_node_data(nodes, nodes_index, NODE_NUMBER));
        NodeNumberData<-value(whole_8_pointer_data, TokenNumberData->value(whole_8_data));
        NodeNumberData<-type(whole_8_pointer_data, TokenNumberData->type(whole_8_data));
        NodeNumberData<-size(whole_8_pointer_data, TokenNumberData->size(whole_8_data));

        index = @cast_whole_8(+(index, 1));
    };

    if =(id, TOKEN_BOOLEAN) {
        variable boolean_value = TokenBooleanData->value(@cast_*TokenBooleanData(pointer_data));
        variable boolean_pointer_data = @cast_*NodeBooleanData(append_node_data(nodes, nodes_index, NODE_BOOLEAN));
        NodeBooleanData<-value(boolean_pointer_data, @cast_boolean(boolean_value));

        index = @cast_whole_8(+(index, 1));
    };

    whole_8<-(index_pointer, index);
};

function get_target_id(): whole_8 {
    variable return_ = target_id;
    target_id = whole_8+(target_id, 1);

    return return_;
};

function parse_statement(tokens: *AutoBuffer, index_pointer: *whole_8, nodes: *AutoBuffer, nodes_index: *whole_8) {
    variable done_anything = false;

    if =(tokens_get_id(tokens, whole_8->(index_pointer)), TOKEN_KEYWORD) {
        if string=(TokenKeywordData->keyword(@cast_*TokenKeywordData(tokens_get_pointer_data(tokens, whole_8->(index_pointer)))), "variable") {
            variable variable_name = TokenNameData->name(@cast_*TokenNameData(tokens_get_pointer_data(tokens, whole_8->(index_pointer))));
            variable index = whole_8->(index_pointer);
            index = whole_8+(index, 1);

            variable names = autobuffer_new(40);
            variable types = autobuffer_new(40);

            variable name_index = 0;
            variable seen_name = false;
            variable running = true;
            variable parse_expression = false;
            while running {
                variable id = tokens_get_id(tokens, index);
                if =(id, TOKEN_COMMA) {
                    name_index = whole_8+(name_index, 1);
                    seen_name = false;
                };

                if =(id, TOKEN_NAME) {
                    variable name_value = TokenNameData->name(@cast_*TokenNameData(tokens_get_pointer_data(tokens, index)));
                    if seen_name {
                        autoarray8_set(&(types), name_index, name_value);
                    } else {
                        autoarray8_set(&(names), name_index, name_value);
                        autoarray8_set(&(types), name_index, "");
                        seen_name = true;
                    };
                };

                index = whole_8+(index, 1);

                if =(tokens_get_id(tokens, index), TOKEN_NAME) {
                    variable name_value = TokenNameData->name(@cast_*TokenNameData(tokens_get_pointer_data(tokens, index)));
                    if string=(name_value, "=") {
                        running = false;
                        parse_expression = true;
                    };
                };
                if =(tokens_get_id(tokens, index), TOKEN_SEMICOLON) {
                    running = false;
                    parse_expression = false;
                };
            };

            variable i = 0;
            while !(=(@cast_whole_8(autoarray8_get(&(names), i)), 0)) {
                variable node_data = @cast_*NodeDeclareData(append_node_data(nodes, nodes_index, NODE_DECLARE));
                NodeDeclareData<-name(node_data, @cast_*(autoarray8_get(&(names), i)));
                NodeDeclareData<-type(node_data, @cast_*(autoarray8_get(&(types), i)));

                i = whole_8+(i, 1);
            };

            if parse_expression {
                index = whole_8+(index, 1);
                parse_expression(tokens, &(index), nodes, nodes_index);
            } else {
                variable i = 0;
                while !(=(@cast_whole_8(autoarray8_get(&(names), i)), 0)) {
                    variable node_data = @cast_*NodeZeroData(append_node_data(nodes, nodes_index, NODE_ZERO));
                    NodeZeroData<-name(node_data, @cast_*(autoarray8_get(&(names), i)));
                    NodeZeroData<-type(node_data, @cast_*(autoarray8_get(&(types), i)));

                    i = whole_8+(i, 1);
                };
            };

            variable i = 0;
            while !(=(@cast_whole_8(autoarray8_get(&(names), i)), 0)) {
                variable node_data = @cast_*NodeAssignData(append_node_data(nodes, nodes_index, NODE_ASSIGN));
                NodeAssignData<-name(node_data, @cast_*(autoarray8_get(&(names), i)));

                i = whole_8+(i, 1);
            };

            whole_8<-(index_pointer, index);
            done_anything = true;
            return;
        };
    };
    if =(tokens_get_id(tokens, whole_8->(index_pointer)), TOKEN_KEYWORD) {
        variable name_value = TokenNameData->name(@cast_*TokenNameData(tokens_get_pointer_data(tokens, whole_8->(index_pointer))));
        if string=(name_value, "return") {
            increment_whole_8_pointer(index_pointer, 1);
            parse_expression(tokens, index_pointer, nodes, nodes_index);

            variable node = append_node(nodes, nodes_index, NODE_RETURN);
            done_anything = true;
            return;
        };
    };
    if =(tokens_get_id(tokens, whole_8->(index_pointer)), TOKEN_KEYWORD) {
        variable name_value = TokenNameData->name(@cast_*TokenNameData(tokens_get_pointer_data(tokens, whole_8->(index_pointer))));
        if string=(name_value, "if") {
            variable end_target = get_target_id();

            while =(tokens_get_id(tokens, whole_8->(index_pointer)), TOKEN_KEYWORD) {
                variable target = get_target_id();
                variable token_data = @cast_*TokenKeywordData(tokens_get_pointer_data(tokens, whole_8->(index_pointer)));
                variable token_index = whole_8->(index_pointer);

                if string=(TokenKeywordData->keyword(token_data), "if") {
                    increment_whole_8_pointer(index_pointer, 1);

                    parse_expression(tokens, index_pointer, nodes, nodes_index);
                    variable conditional_jump_data = @cast_*NodeJumpConditionalData(append_node_data(nodes, nodes_index, NODE_JUMP_CONDITIONAL));
                    NodeJumpConditionalData<-target_id(conditional_jump_data, target);
                    NodeJumpConditionalData<-desired_state(conditional_jump_data, false);

                    increment_whole_8_pointer(index_pointer, 1);
                } else if &&(string=(TokenKeywordData->keyword(token_data), "else"), =(tokens_get_id(tokens, whole_8+(token_index, 1)), TOKEN_KEYWORD)) {
                    increment_whole_8_pointer(index_pointer, 2);

                    parse_expression(tokens, index_pointer, nodes, nodes_index);
                    variable conditional_jump_data = @cast_*NodeJumpConditionalData(append_node_data(nodes, nodes_index, NODE_JUMP_CONDITIONAL));
                    NodeJumpConditionalData<-target_id(conditional_jump_data, target);
                    NodeJumpConditionalData<-desired_state(conditional_jump_data, false);

                    increment_whole_8_pointer(index_pointer, 1);
                } else {
                    increment_whole_8_pointer(index_pointer, 2);
                };

                while !(=(tokens_get_id(tokens, whole_8->(index_pointer)), TOKEN_CLOSED_CURLY_BRACKETS)) {
                    parse_statement(tokens, index_pointer, nodes, nodes_index);
                };

                variable jump_data = @cast_*NodeJumpData(append_node_data(nodes, nodes_index, NODE_JUMP));
                NodeJumpData<-target_id(jump_data, end_target);

                variable target_node_data = @cast_*NodeTargetData(append_node_data(nodes, nodes_index, NODE_TARGET));
                NodeTargetData<-id(target_node_data, target);

                increment_whole_8_pointer(index_pointer, 1);
            };

            variable target_node_data = @cast_*NodeTargetData(append_node_data(nodes, nodes_index, NODE_TARGET));
            NodeTargetData<-id(target_node_data, end_target);
 
            increment_whole_8_pointer(index_pointer, 1);

            done_anything = true;
            return;
        };
    };
    if =(tokens_get_id(tokens, whole_8->(index_pointer)), TOKEN_KEYWORD) {
        variable name_value = TokenNameData->name(@cast_*TokenNameData(tokens_get_pointer_data(tokens, whole_8->(index_pointer))));
        if string=(name_value, "while") {
            increment_whole_8_pointer(index_pointer, 1);

            variable target1 = get_target_id();

            variable target2 = get_target_id();

            variable target_node1_data = @cast_*NodeTargetData(append_node_data(nodes, nodes_index, NODE_TARGET));
            NodeTargetData<-id(target_node1_data, target1);

            parse_expression(tokens, index_pointer, nodes, nodes_index);
            variable conditional_jump_data = @cast_*NodeJumpConditionalData(append_node_data(nodes, nodes_index, NODE_JUMP_CONDITIONAL));
            NodeJumpConditionalData<-target_id(conditional_jump_data, target2);
            NodeJumpConditionalData<-desired_state(conditional_jump_data, false);

            increment_whole_8_pointer(index_pointer, 1);

            while !(=(tokens_get_id(tokens, whole_8->(index_pointer)), TOKEN_CLOSED_CURLY_BRACKETS)) {
                parse_statement(tokens, index_pointer, nodes, nodes_index);
            };

            variable jump_node_data = @cast_*NodeJumpData(append_node_data(nodes, nodes_index, NODE_JUMP));
            NodeJumpData<-target_id(jump_node_data, target1);

            variable target_node2_data = @cast_*NodeTargetData(append_node_data(nodes, nodes_index, NODE_TARGET));
            NodeTargetData<-id(target_node2_data, target2);
 
            increment_whole_8_pointer(index_pointer, 1);
            done_anything = true;
            return;
        };
    };
    if &&(=(tokens_get_id(tokens, whole_8->(index_pointer)), TOKEN_NAME), =(tokens_get_id(tokens, whole_8+(whole_8->(index_pointer), 1)), TOKEN_NAME)) {
        variable names = autobuffer_new(40);
        variable name_index = 0;

        variable index = whole_8->(index_pointer);
        while !(string=(TokenNameData->name(@cast_*TokenNameData(tokens_get_pointer_data(tokens, index))), "=")) {
            variable name = TokenNameData->name(@cast_*TokenNameData(tokens_get_pointer_data(tokens, index)));
            autostack8_push(&(names), &(name_index), name);
            index = whole_8+(index, 1);
        };

        index = whole_8+(index, 1);

        parse_expression(tokens, &(index), nodes, nodes_index);

        variable i = 0;
        while !(=(@cast_whole_8(autoarray8_get(&(names), i)), 0)) {
            variable assign_node_data = @cast_*NodeAssignData(append_node_data(nodes, nodes_index, NODE_ASSIGN));
            NodeAssignData<-name(assign_node_data, @cast_*(autoarray8_get(&(names), i)));
            i = whole_8+(i, 1);
        };

        whole_8<-(index_pointer, index);
        done_anything = true;
        return;
    };

    if !(done_anything) {
        parse_expression(tokens, index_pointer, nodes, nodes_index);
        increment_whole_8_pointer(index_pointer, 1);
    };
};

function parse(tokens: *AutoBuffer, tokens_count: whole_8, nodes: *AutoBuffer, nodes_index, *whole_8) {
    variable index = 0;
    
    while <(index, tokens_count) {
        variable id = autobuffer_get_whole_8(tokens, whole_8*(index, TOKEN_SIZE));

        if =(id, TOKEN_KEYWORD) {
            variable keyword_data = @cast_*TokenKeywordData(tokens_get_pointer_data(tokens, index));
            variable keyword = TokenKeywordData->keyword(keyword_data);

            if string=(keyword, "function") {
                parse_function(tokens, &(index), nodes, nodes_index);
            };

            if string=(keyword, "structure") {
                parse_structure(tokens, &(index), nodes, nodes_index);
            };

            if string=(keyword, "global") {
                parse_global(tokens, &(index), nodes, nodes_index);
            };

            if string=(keyword, "constant") {
                parse_constant(tokens, &(index), nodes, nodes_index);
            };

            if string=(keyword, "include") {
                parse_include(tokens, &(index), nodes, nodes_index);
            };
        };
    };
};

function make_valid_linux_x86-64(name: *): * {
    variable to_return = brk_allocate(whole_8*(length(name), 2));
    variable i = 0;
    variable j = 0;
    while <(i, length(name)) {
        variable byte = any_1->(@cast_*any_1(+(name, i)));
        variable buffer: any_8;
        any_1<-(@cast_*any_1(&(buffer)), byte);

        if =(byte, byte(43)) {
            whole_8_to_string(43, &(buffer));
        };
        if =(byte, byte(61)) {
            whole_8_to_string(61, &(buffer));
        };
        if =(byte, byte(42)) {
            whole_8_to_string(42, &(buffer));
        };
        if =(byte, byte(45)) {
            whole_8_to_string(45, &(buffer));
        };

        copy(&(buffer), @cast_*(+(to_return, j)), length(&(buffer)));
        j = whole_8+(j, length(&(buffer)));

        i = whole_8+(i, 1);
    };

    return to_return;
};

function get_size_linux_x86-64(type: *, nodes: *AutoBuffer, node_count: whole_8): whole_8 {
    if string=(type, "whole_8") {
        return 8;
    };
    if string=(type, "boolean") {
        return 1;
    };
    if string_length=(type, "*", 1) {
        return 8;
    };

    variable i = 0;
    while <(i, cached_index) {
        if string=(@cast_*(autoarray8_get(&(cached_types), i)), type) {
            return @cast_whole_8(autoarray8_get(&(cached_sizes), i));
        };
        i = whole_8+(i, 1);
    };

    if string_length=(type, "any", 3) {
        variable number = to_number(@cast_*(+(type, 4)));
        autoarray8_set(&(cached_types), cached_index, type);
        autoarray8_set(&(cached_sizes), cached_index, number);
        cached_index = whole_8+(cached_index, 1);

        return number;
    };

    if string_length=(type, "whole", 5) {
        variable number = to_number(@cast_*(+(type, 6)));
        autoarray8_set(&(cached_types), cached_index, type);
        autoarray8_set(&(cached_sizes), cached_index, number);
        cached_index = whole_8+(cached_index, 1);

        return number;
    };

    if string_length=(type, "whole_8", 7) {
        variable number = to_number(@cast_*(+(type, 8)));
        autoarray8_set(&(cached_types), cached_index, type);
        autoarray8_set(&(cached_sizes), cached_index, number);
        cached_index = whole_8+(cached_index, 1);

        return number;
    };

    variable i = 0;
    while <(i, node_count) {
        if =(nodes_get_id(nodes, i), NODE_STRUCTURE) {
            variable pointer = @cast_*NodeStructureData(nodes_get_pointer_data(nodes, i));
            variable name = NodeStructureData->name(pointer);
            variable member_types = NodeStructureData->item_types(pointer);
            if string=(type, name) {
                variable size = get_size_multiple_linux_x86-64(member_types, 999, nodes, node_count);
                autoarray8_set(&(cached_types), cached_index, type);
                autoarray8_set(&(cached_sizes), cached_index, size);
                cached_index = whole_8+(cached_index, 1);
                return size;
            };
        };
        i = whole_8+(i, 1);
    };

    print("unknown type ");
    println(type);

    return 0;
};

function get_size_multiple_linux_x86-64(array: *, count: whole_8, nodes: *AutoBuffer, node_count: whole_8): whole_8 {
    variable total = 0;

    variable i = 0;
    while <(i, count) {
        if =(@cast_whole_8(array8_get(array, i)), 0) {
            return total;
        };
        total = whole_8+(total, get_size_linux_x86-64(@cast_*(array8_get(array, i)), nodes, node_count));
        i = whole_8+(i, 1);
    };

    return total;
};

function get_size_multiple_reversed_linux_x86-64(array: *, count: whole_8, nodes: *AutoBuffer, node_count: whole_8): whole_8 {
    variable i = whole_8-(array8_length(array), 1);

    variable total = 0;

    while >(i, count) {
        total = whole_8+(total, get_size_linux_x86-64(@cast_*(array8_get(array, i)), nodes, node_count));
        i = whole_8-(i, 1);
    };

    return total;
};

function is_type(wanted: *, given: *, nodes: *AutoBuffer, node_count: whole_8): boolean {
    if string=(wanted, given) {
        return true;
    };

    if string=(wanted, "*") {
        if string_length=(given, "*", 1) {
            return true;
        };
    };

    if string_length=(wanted, "any_", 4) {
        variable size = to_number(@cast_*(+(wanted, 4)));
        return =(size, get_size_linux_x86-64(given, nodes, node_count));
    };

    return false;
};

function type_check(nodes: *AutoBuffer, node_count: whole_8) {
    variable stack = autobuffer_new(64);
    variable stack_pointer: whole_8;

    variable functions = autobuffer_new(512);
    variable function_argument_names = autobuffer_new(512);
    variable function_arguments = autobuffer_new(512);
    variable function_returns = autobuffer_new(512);
    variable index = 0;

    variable globals = autobuffer_new(512);
    variable global_types = autobuffer_new(512);
    variable global_index: whole_8;

    variable constants = autobuffer_new(512);
    variable constant_types = autobuffer_new(512);
    variable constant_index: whole_8;
    
    variable i = 0;
    while <(i, node_count) {
        variable id = nodes_get_id(nodes, i);
        variable pointer = nodes_get_pointer(nodes, i);
        variable pointer_data = nodes_get_pointer_data(nodes, i);

        if =(id, NODE_FUNCTION) {
            variable function_data = @cast_*NodeFunctionData(pointer_data);
            autoarray8_set(&(functions), index, NodeFunctionData->name(function_data));
            autoarray8_set(&(function_argument_names), index, NodeFunctionData->argument_names(function_data));
            autoarray8_set(&(function_arguments), index, NodeFunctionData->argument_types(function_data));
            autoarray8_set(&(function_returns), index, NodeFunctionData->returns(function_data));

            index = whole_8+(index, 1);
        };

        if =(id, NODE_GLOBAL) {
            variable global_data = @cast_*NodeGlobalData(pointer_data);
            variable global_name = NodeGlobalData->name(global_data);
            variable global_type = NodeGlobalData->type(global_data);

            autoarray8_set(&(globals), global_index, global_name);
            autoarray8_set(&(global_types), global_index, global_type);

            global_index = whole_8+(global_index, 1);
        };

        if =(id, NODE_CONSTANT) {
            variable constant_data = @cast_*NodeConstantData(pointer_data);
            variable constant_name = NodeConstantData->name(constant_data);
            variable constant_type = NodeConstantData->type(constant_data);

            autoarray8_set(&(constants), constant_index, constant_name);
            autoarray8_set(&(constant_types), constant_index, constant_type);

            constant_index = whole_8+(constant_index, 1);
        };

        i = whole_8+(i, 1);
    };

    variable current_function: *;

    variable variable_names = autobuffer_new(128);
    variable variable_types = autobuffer_new(128);
    variable variable_declares = autobuffer_new(128);
    variable variable_index = 0;

    i = 0;
    while <(i, node_count) {
        variable id = nodes_get_id(nodes, i);
        variable pointer = nodes_get_pointer(nodes, i);
        variable pointer_data = nodes_get_pointer_data(nodes, i);
        variable done_anything = false;

        if =(id, NODE_FUNCTION) {
            current_function = NodeFunctionData->name(@cast_*NodeFunctionData(nodes_get_pointer_data(nodes, i)));
            variable_index = 0;
            done_anything = true;
        };
        if =(id, NODE_NUMBER) {
            variable number_data = @cast_*NodeNumberData(pointer_data);

            variable number_type = autobuffer_new(16);
            variable number_type_index = 0;

            if =(NodeNumberData->type(number_data), 0) {
                autopush_string(&(number_type), &(number_type_index), "whole_");
            } else {
                autopush_string(&(number_type), &(number_type_index), "whole_8_");
            };

            autopush_whole_8(&(number_type), &(number_type_index), NodeNumberData->size(number_data));

            autostack8_push(&(stack), &(stack_pointer), AutoBuffer->buffer(&(number_type)));
            done_anything = true;
        };
        if =(id, NODE_BOOLEAN) {
            autostack8_push(&(stack), &(stack_pointer), "boolean");
            done_anything = true;
        };
        if =(id, NODE_STRING) {
            autostack8_push(&(stack), &(stack_pointer), "*");
            done_anything = true;
        };
        if =(id, NODE_INVOKE) {
            variable invoke_data = @cast_*NodeInvokeData(pointer_data);
            variable function_name = NodeInvokeData->name(invoke_data);

            if string_length=(function_name, "@cast_", 6) {
                variable _ = autostack8_pop(&(stack), &(stack_pointer));
                autostack8_push(&(stack), &(stack_pointer), @cast_*(+(function_name, 6)));
            } else if string=(function_name, "+") {
                variable first = @cast_*(autostack8_pop(&(stack), &(stack_pointer)));
                variable second = @cast_*(autostack8_pop(&(stack), &(stack_pointer)));

                if &&(!(string=(first, second)), |(!(string_length=(second, "*", 1)), !(string=(first, "whole_8")))) {
                    print("TYPECHECK: ");
                    print(current_function);
                    print(": Invoke of '+' wants matching arguments, given '");
                    print(first);
                    print("' and '");
                    print(second);
                    println("'");
                };

                autostack8_push(&(stack), &(stack_pointer), second);

                variable new_+_name = autobuffer_new(16);
                autobuffer_set(&(new_+_name), "+_", 0, 2);
                autobuffer_set(&(new_+_name), first, 2, length(first));

                NodeInvokeData<-name(invoke_data, AutoBuffer->buffer(&(new_+_name)));
            } else if string=(function_name, "-") {
                variable first = @cast_*(autostack8_pop(&(stack), &(stack_pointer)));
                variable second = @cast_*(autostack8_pop(&(stack), &(stack_pointer)));

                if &&(!(string=(first, second)), |(!(string_length=(second, "*", 1)), !(string=(first, "whole_8")))) {
                    print("TYPECHECK: ");
                    print(current_function);
                    print(": Invoke of '-' wants matching arguments, given '");
                    print(first);
                    print("' and '");
                    print(second);
                    println("'");
                };

                autostack8_push(&(stack), &(stack_pointer), second);

                variable new_+_name = autobuffer_new(16);
                autobuffer_set(&(new_+_name), "-_", 0, 2);
                autobuffer_set(&(new_+_name), first, 2, length(first));

                NodeInvokeData<-name(invoke_data, AutoBuffer->buffer(&(new_+_name)));
            } else if string=(function_name, "*") {
                variable first = @cast_*(autostack8_pop(&(stack), &(stack_pointer)));
                variable second = @cast_*(autostack8_pop(&(stack), &(stack_pointer)));

                if &&(!(string=(first, second)), |(!(string_length=(second, "*", 1)), !(string=(first, "whole_8")))) {
                    print("TYPECHECK: ");
                    print(current_function);
                    print(": Invoke of '*' wants matching arguments, given '");
                    print(first);
                    print("' and '");
                    print(second);
                    println("'");
                };

                autostack8_push(&(stack), &(stack_pointer), second);

                variable new_+_name = autobuffer_new(16);
                autobuffer_set(&(new_+_name), "*_", 0, 2);
                autobuffer_set(&(new_+_name), first, 2, length(first));

                NodeInvokeData<-name(invoke_data, AutoBuffer->buffer(&(new_+_name)));
            } else if string=(function_name, "/") {
                variable first = @cast_*(autostack8_pop(&(stack), &(stack_pointer)));
                variable second = @cast_*(autostack8_pop(&(stack), &(stack_pointer)));

                if &&(!(string=(first, second)), |(!(string_length=(second, "*", 1)), !(string=(first, "whole_8")))) {
                    print("TYPECHECK: ");
                    print(current_function);
                    print(": Invoke of '/' wants matching arguments, given '");
                    print(first);
                    print("' and '");
                    print(second);
                    println("'");
                };

                autostack8_push(&(stack), &(stack_pointer), second);

                variable new_+_name = autobuffer_new(16);
                autobuffer_set(&(new_+_name), "/_", 0, 2);
                autobuffer_set(&(new_+_name), first, 2, length(first));

                NodeInvokeData<-name(invoke_data, AutoBuffer->buffer(&(new_+_name)));
            } else if string=(function_name, "%") {
                variable first = @cast_*(autostack8_pop(&(stack), &(stack_pointer)));
                variable second = @cast_*(autostack8_pop(&(stack), &(stack_pointer)));

                if &&(!(string=(first, second)), |(!(string_length=(second, "*", 1)), !(string=(first, "whole_8")))) {
                    print("TYPECHECK: ");
                    print(current_function);
                    print(": Invoke of '%' wants matching arguments, given '");
                    print(first);
                    print("' and '");
                    print(second);
                    println("'");
                };

                autostack8_push(&(stack), &(stack_pointer), second);

                variable new_+_name = autobuffer_new(16);
                autobuffer_set(&(new_+_name), "%_", 0, 2);
                autobuffer_set(&(new_+_name), first, 2, length(first));

                NodeInvokeData<-name(invoke_data, AutoBuffer->buffer(&(new_+_name)));
            } else if string=(function_name, "=") {
                variable first = @cast_*(autostack8_pop(&(stack), &(stack_pointer)));
                variable second = @cast_*(autostack8_pop(&(stack), &(stack_pointer)));

                if &&(!(string=(first, second)), |(!(string_length=(second, "*", 1)), !(string=(first, "whole_8")))) {
                    print("TYPECHECK: ");
                    print(current_function);
                    print(": Invoke of '=' wants matching arguments, given '");
                    print(first);
                    print("' and '");
                    print(second);
                    println("'");
                };

                autostack8_push(&(stack), &(stack_pointer), "boolean");

                variable new_+_name = autobuffer_new(16);
                autobuffer_set(&(new_+_name), "=_", 0, 2);
                autobuffer_set(&(new_+_name), first, 2, length(first));

                NodeInvokeData<-name(invoke_data, AutoBuffer->buffer(&(new_+_name)));
            } else if string=(function_name, ">") {
                variable first = @cast_*(autostack8_pop(&(stack), &(stack_pointer)));
                variable second = @cast_*(autostack8_pop(&(stack), &(stack_pointer)));

                if &&(!(string=(first, second)), |(!(string_length=(second, "*", 1)), !(string=(first, "whole_8")))) {
                    print("TYPECHECK: ");
                    print(current_function);
                    print(": Invoke of '>' wants matching arguments, given '");
                    print(first);
                    print("' and '");
                    print(second);
                    println("'");
                };

                autostack8_push(&(stack), &(stack_pointer), "boolean");

                variable new_+_name = autobuffer_new(16);
                autobuffer_set(&(new_+_name), ">_", 0, 2);
                autobuffer_set(&(new_+_name), first, 2, length(first));

                NodeInvokeData<-name(invoke_data, AutoBuffer->buffer(&(new_+_name)));
            } else if string=(function_name, "<") {
                variable first = @cast_*(autostack8_pop(&(stack), &(stack_pointer)));
                variable second = @cast_*(autostack8_pop(&(stack), &(stack_pointer)));

                if &&(!(string=(first, second)), |(!(string_length=(second, "*", 1)), !(string=(first, "whole_8")))) {
                    print("TYPECHECK: ");
                    print(current_function);
                    print(": Invoke of '<' wants matching arguments, given '");
                    print(first);
                    print("' and '");
                    print(second);
                    println("'");
                };

                autostack8_push(&(stack), &(stack_pointer), "boolean");

                variable new_+_name = autobuffer_new(16);
                autobuffer_set(&(new_+_name), "<_", 0, 2);
                autobuffer_set(&(new_+_name), first, 2, length(first));

                NodeInvokeData<-name(invoke_data, AutoBuffer->buffer(&(new_+_name)));
            } else {
                variable found_function = false;
                variable j = 0;
                while <(j, index) {
                    if &&(!(found_function), string=(@cast_*(autoarray8_get(&(functions), j)), function_name)) {
                        variable arguments = @cast_*(autoarray8_get(&(function_arguments), j));
                        variable returns = @cast_*(autoarray8_get(&(function_returns), j));

                        variable length = array8_length(arguments);
                        variable k = 0;
                        while !(=(@cast_whole_8(array8_get(arguments, k)), 0)) {
                            variable given = @cast_*(autostack8_pop(&(stack), &(stack_pointer)));
                            variable wanted = @cast_*(array8_get(arguments, @cast_whole_8(-(-(length, k), 1))));
                            if !(is_type(wanted, given, nodes, node_count)) {
                                print("TYPECHECK: ");
                                print(current_function);
                                print(": Invoke of ");
                                print(function_name);
                                print(" wants '");
                                print(wanted);
                                print("', given '");
                                print(given);
                                println("'");
                                sys_exit(1);
                            };

                            k = whole_8+(k, 1);
                        };

                        variable k = 0;
                        while !(=(@cast_whole_8(array8_get(returns, k)), 0)) {
                            variable return_value = @cast_*(array8_get(returns, k));
                            autostack8_push(&(stack), &(stack_pointer), return_value);

                            k = whole_8+(k, 1);
                        };
                        
                        found_function = true;
                    };
                    j = whole_8+(j, 1);
                };

                if !(found_function) {
                    print("TYPECHECK: ");
                    print(current_function);
                    print(": Invoke target '");
                    print(function_name);
                    println("' not found");
                    sys_exit(1);
                };
            };

            done_anything = true;
        };
        if =(id, NODE_DECLARE) {
            variable declare_data = @cast_*NodeDeclareData(pointer_data);
            variable variable_name = NodeDeclareData->name(declare_data);
            variable variable_type = NodeDeclareData->type(declare_data);

            variable temp_variable_index = 999;
            variable k = 0;
            while <(k, variable_index) {
                variable temp_variable_name = @cast_*(autoarray8_get(&(variable_names), k));
                if string=(temp_variable_name, variable_name) {
                    temp_variable_index = k;
                };
                k = whole_8+(k, 1);
            };

            if =(temp_variable_index, 999) {
                autoarray8_set(&(variable_names), variable_index, variable_name);
                autoarray8_set(&(variable_types), variable_index, variable_type);
                autoarray8_set(&(variable_declares), variable_index, i);
                variable_index = whole_8+(variable_index, 1);
            } else {
                autoarray8_set(&(variable_types), temp_variable_index, variable_type);
                autoarray8_set(&(variable_declares), temp_variable_index, i);
            };

            done_anything = true;
        };
        if =(id, NODE_ASSIGN) {
            variable assign_data = @cast_*NodeAssignData(pointer_data);
            variable variable_name = NodeAssignData->name(assign_data);

            variable variable_type = autostringarraymap_get(&(variable_names), &(variable_types), variable_name, variable_index);
            variable popped_stack = @cast_*(autostack8_pop(&(stack), &(stack_pointer)));

            if !(=(variable_type, 0)) {
                if string=(variable_type, "") {
                    variable variable_index2 = autostringarraymap_get_index(&(variable_names), variable_name, variable_index);
                    autoarray8_set(&(variable_types), variable_index2, popped_stack);
                    variable_type = popped_stack;

                    variable variable_declare = autostringarraymap_get(&(variable_names), &(variable_declares), variable_name, variable_index);
                    variable_declare = nodes_get_pointer(nodes, @cast_whole_8(variable_declare));

                    *<-(@cast_**(+(variable_declare, 16)), variable_type);
                };

                if !(string=(variable_type, popped_stack)) {
                    print("TYPECHECK: ");
                    print(current_function);
                    print(": Assign of ");
                    print(variable_name);
                    print(" wants '");
                    print(variable_type);
                    print("', given '");
                    print(popped_stack);
                    println("'");
                    sys_exit(1);
                };
            } else {
                variable_type = autostringarraymap_get(&(globals), &(global_types), variable_name, global_index);

                if !(string=(variable_type, popped_stack)) {
                    print("TYPECHECK: ");
                    print(current_function);
                    print(": Assign of ");
                    print(variable_name);
                    print(" wants '");
                    print(variable_type);
                    print("', given '");
                    print(popped_stack);
                    println("'");
                    sys_exit(1);
                };
            };

            done_anything = true;
        };
        if =(id, NODE_RETRIEVE) {
            variable variable_name = NodeRetrieveData->name(@cast_*NodeRetrieveData(nodes_get_pointer_data(nodes, i)));

            variable variable_type = autostringarraymap_get(&(variable_names), &(variable_types), variable_name, variable_index);
            if !(=(variable_type, 0)) {
                autostack8_push(&(stack), &(stack_pointer), variable_type);
            } else {
                variable function_argument_names2 = autostringarraymap_get(&(functions), &(function_argument_names), current_function, index);
                variable function_arguments2 = autostringarraymap_get(&(functions), &(function_arguments), current_function, index);

                variable_type = stringarraymap_get(function_argument_names2, function_arguments2, variable_name, array8_length(function_arguments2));

                if !(=(variable_type, 0)) {
                    autostack8_push(&(stack), &(stack_pointer), variable_type);
                } else {
                    variable_type = autostringarraymap_get(&(globals), &(global_types), variable_name, global_index);
                    if !(=(variable_type, 0)) {
                        autostack8_push(&(stack), &(stack_pointer), variable_type);
                    } else {
                        variable_type = autostringarraymap_get(&(constants), &(constant_types), variable_name, constant_index);

                        if !(=(variable_type, 0)) {
                            autostack8_push(&(stack), &(stack_pointer), variable_type);
                        } else {
                            println(variable_name);
                            println(current_function);
                            println("cannot find way to access variable");
                        };
                    };
                };
            };

            done_anything = true;
        };
        if =(id, NODE_RETURN) {
            variable function_returns2 = autostringarraymap_get(&(functions), &(function_returns), current_function, index);

            variable j = 0;
            while !(=(@cast_whole_8(array8_get(function_returns2, j)), 0)) {
                variable function_return = @cast_*(array8_get(function_returns2, j));
                variable stack_popped = @cast_*(autostack8_pop(&(stack), &(stack_pointer)));
                
                if !(is_type(function_return, stack_popped, nodes, node_count)) {
                    print("TYPECHECK: ");
                    print(current_function);
                    print(": Return wants '");
                    print(function_return);
                    print("', given '");
                    print(stack_popped);
                    println("'");
                    sys_exit(1);
                };

                j = whole_8+(j, 1);
            };

            done_anything = true;
        };
        if =(id, NODE_POINTER) {
            variable popped = @cast_*(autostack8_pop(&(stack), &(stack_pointer)));
            variable allocated = brk_allocate(whole_8+(length(popped), 2));
            copy("*", allocated, 1);
            copy(popped, @cast_*(+(allocated, 1)), length(popped));
            autostack8_push(&(stack), &(stack_pointer), allocated);
            done_anything = true;
        };
        if =(id, NODE_JUMP_CONDITIONAL) {
            variable popped = @cast_*(autostack8_pop(&(stack), &(stack_pointer)));
            if !(string=(popped, "boolean")) {
                print("TYPECHECK: ");
                print(current_function);
                print(": Conditional Jump (if/while) wants 'boolean', given '");
                print(stack_popped);
                println("'");
                sys_exit(1);
            };
            done_anything = true;
        };
        if =(id, NODE_JUMP) {
            done_anything = true;
        };
        if =(id, NODE_TARGET) {
            done_anything = true;
        };
        if =(id, NODE_ENDFUNCTION) {
            done_anything = true;
        };
        if =(id, NODE_STRUCTURE) {
            done_anything = true;
        };
        if =(id, NODE_GLOBAL) {
            done_anything = true;
        };
        if =(id, NODE_CONSTANT) {
            done_anything = true;
        };
        if =(id, NODE_INCLUDE) {
            done_anything = true;
        };

        if =(id, NODE_ZERO) {
            variable zero_data = @cast_*NodeZeroData(pointer_data);
            variable type2 = NodeZeroData->type(zero_data);
            autostack8_push(&(stack), &(stack_pointer), type2);
            done_anything = true;
        };

        if !(done_anything) {
            print("Unhandled ");
            @print_integer(id);
        };

        i = whole_8+(i, 1);
    };
};

function stringarraymap_get(keys: *, values: *, wanted: *, size: whole_8): * {
    variable j = 0;
    while <(j, size) {
        if string=(@cast_*(array8_get(keys, j)), wanted) {
            return @cast_*(array8_get(values, j));
        };
        j = whole_8+(j, 1);
    };

    return @cast_*(0);
};

function stringarraymap_get_index(keys: *, wanted: *, size: whole_8): whole_8 {
    variable j = 0;
    while <(j, size) {
        if string=(@cast_*(array8_get(keys, j)), wanted) {
            return j;
        };
        j = whole_8+(j, 1);
    };

    return 999;
};

function autopush_string_with_newline(buffer: *AutoBuffer, buffer_index_pointer: *whole_8, string: *) {
    autopush_string(buffer, buffer_index_pointer, string);
    variable new_line = 10;
    autopush_string(buffer, buffer_index_pointer, &(new_line));
};

function autopush_character(buffer: *AutoBuffer, buffer_index_pointer: *whole_8, character: any_1) {
    variable temp: any_2;
    any_1<-(@cast_*any_1(&(temp)), character);
    autopush_string(buffer, buffer_index_pointer, &(temp));
};

function autopush_whole_8(buffer: *AutoBuffer, buffer_index_pointer: *whole_8, whole_8: whole_8) {
    variable whole_8_buffer: any_24;
    whole_8_to_string(whole_8, &(whole_8_buffer));
    autopush_string(buffer, buffer_index_pointer, &(whole_8_buffer));
};

function nodes_get_id(nodes: *AutoBuffer, index: whole_8): whole_8 {
    return autobuffer_get_whole_8(nodes, whole_8*(index, NODE_SIZE));
};

function nodes_get_pointer(nodes: *AutoBuffer, index: whole_8): * {
    return autobuffer_get(nodes, whole_8*(index, NODE_SIZE));
};

function nodes_get_pointer_data(nodes: *AutoBuffer, index: whole_8): * {
    return autobuffer_get(nodes, whole_8+(whole_8*(index, NODE_SIZE), 8));
};

//function output_linux_x86-64_fasm(nodes: *AutoBuffer, node_count: whole_8, name: *) {
//    variable buffer = autobuffer_new(8388608);
//    variable buffer_index = 0;
//
//    variable data_buffer = autobuffer_new(131072);
//    variable data_buffer_index = 0;
//
//    variable bss_buffer = autobuffer_new(131072);
//    variable bss_buffer_index = 0;
//
//    autopush_string_with_newline(&(buffer), &(buffer_index), "format ELF64 executable");
//    autopush_string_with_newline(&(buffer), &(buffer_index), "entry start");
//    autopush_string_with_newline(&(buffer), &(buffer_index), "segment readable executable");
//    autopush_string_with_newline(&(buffer), &(buffer_index), "start:");
//    autopush_string_with_newline(&(buffer), &(buffer_index), "lea rax, [rsp+8]");
//    autopush_string_with_newline(&(buffer), &(buffer_index), "pop rbx");
//    autopush_string_with_newline(&(buffer), &(buffer_index), "push rax");
//    autopush_string_with_newline(&(buffer), &(buffer_index), "push rbx");
//    autopush_string_with_newline(&(buffer), &(buffer_index), "call main");
//    autopush_string_with_newline(&(buffer), &(buffer_index), "mov rax, 60");
//    autopush_string_with_newline(&(buffer), &(buffer_index), "mov rdi, 0");
//    autopush_string_with_newline(&(buffer), &(buffer_index), "syscall");
//
//    variable functions = autobuffer_new(512);
//    variable function_argument_names = autobuffer_new(512);
//    variable function_arguments = autobuffer_new(512);
//    variable function_returns = autobuffer_new(512);
//    variable function_local_sizes = autobuffer_new(512);
//    variable index = 0;
//
//    variable globals = autobuffer_new(512);
//    variable global_types = autobuffer_new(512);
//    variable global_index = 0;
//
//    variable constants = autobuffer_new(512);
//    variable constant_types = autobuffer_new(512);
//    variable constant_index = 0;
//
//    variable memory_functions = autobuffer_new(512);
//    variable memory_function_contents = autobuffer_new(512);
//    variable memory_function_index = 0;
//
//    variable i = 0;
//    while <(i, node_count) {
//        variable id = nodes_get_id(nodes, i);
//        variable pointer = nodes_get_pointer(nodes, i);
//        variable pointer_data = nodes_get_pointer_data(nodes, i);
//
//        if =(id, NODE_FUNCTION) {
//            variable function_data = @cast_*NodeFunctionData(pointer_data);
//            autoarray8_set(&(functions), index, NodeFunctionData->name(function_data));
//            autoarray8_set(&(function_argument_names), index, NodeFunctionData->argument_names(function_data));
//            autoarray8_set(&(function_arguments), index, NodeFunctionData->argument_types(function_data));
//            autoarray8_set(&(function_returns), index, NodeFunctionData->returns(function_data));
//
//            variable total = 16;
//            variable j = i;
//            while !(=(nodes_get_id(nodes, j), NODE_ENDFUNCTION)) {
//                variable id = nodes_get_id(nodes, j);
//                variable pointer = nodes_get_pointer(nodes, j);
//                variable pointer_data = nodes_get_pointer_data(nodes, j);
//                
//                if =(id, NODE_DECLARE) {
//                    variable declare_data = @cast_*NodeDeclareData(pointer_data);
//                    variable declare_name = NodeDeclareData->name(declare_data);
//                    variable declare_type = NodeDeclareData->type(declare_data);
//                    total = whole_8+(total, get_size_linux_x86-64(declare_type, nodes, node_count));
//                };
//
//                j = whole_8+(j, 1);
//            };
//
//            autoarray8_set(&(function_local_sizes), index, total);
//
//            index = whole_8+(index, 1);
//        };
//        if =(id, NODE_GLOBAL) {
//            variable global_data = @cast_*NodeGlobalData(pointer_data);
//            variable global_name = NodeGlobalData->name(global_data);
//            variable global_type = NodeGlobalData->type(global_data);
//
//            autoarray8_set(&(globals), global_index, global_name);
//            autoarray8_set(&(global_types), global_index, global_type);
//
//            global_index = whole_8+(global_index, 1);
//        };
//        if =(id, NODE_CONSTANT) {
//            variable constant_data = @cast_*NodeConstantData(pointer_data);
//            variable constant_name = NodeConstantData->name(constant_data);
//            variable constant_type = NodeConstantData->type(constant_data);
//
//            autoarray8_set(&(constants), constant_index, constant_name);
//            autoarray8_set(&(constant_types), constant_index, constant_type);
//
//            constant_index = whole_8+(constant_index, 1);
//        };
//        if =(id, NODE_STRUCTURE) {
//            variable structure_name = NodeStructureData->name(@cast_*NodeStructureData(nodes_get_pointer_data(nodes, i)));
//
//            // Setter for whole value
//            variable allocated = brk_allocate(whole_8+(length(structure_name), 3));
//            copy(structure_name, allocated, length(structure_name));
//            copy("<-", @cast_*(+(allocated, length(structure_name))), 2);
//
//            autoarray8_set(&(memory_functions), memory_function_index, allocated);
//
//            variable allocated_contents0 = autobuffer_new(8388608);
//            variable allocated_contents01 = &(allocated_contents0);
//            variable contents_index = 0;
//
//            variable size = get_size_linux_x86-64(structure_name, nodes, node_count);
//
//            autopush_string(allocated_contents01, &(contents_index), "add rsp, ");
//            autopush_whole_8(allocated_contents01, &(contents_index), size);
//            autopush_string_with_newline(allocated_contents01, &(contents_index), "");
//            autopush_string_with_newline(allocated_contents01, &(contents_index), "mov rax, [rsp]");
//            autopush_string(allocated_contents01, &(contents_index), "sub rsp, ");
//            autopush_whole_8(allocated_contents01, &(contents_index), size);
//            autopush_string_with_newline(allocated_contents01, &(contents_index), "");
//
//            variable j = 0;
//            while <(j, size) {
//                variable done_anything_structure = false;
//
//                if >(-(size, j), 7) {
//                    autopush_string(allocated_contents01, &(contents_index), "mov rbx, [rsp+");
//                    autopush_whole_8(allocated_contents01, &(contents_index), j);
//                    autopush_string_with_newline(allocated_contents01, &(contents_index), "]");
//
//                    autopush_string(allocated_contents01, &(contents_index), "mov [rax+");
//                    autopush_whole_8(allocated_contents01, &(contents_index), j);
//                    autopush_string_with_newline(allocated_contents01, &(contents_index), "], rbx");
//
//                    j = whole_8+(j, 8);
//                    done_anything_structure = true;
//                };
//                if &&(>(-(size, j), 3), !(done_anything_structure)) {
//                    autopush_string(allocated_contents01, &(contents_index), "mov ebx, [rsp+");
//                    autopush_whole_8(allocated_contents01, &(contents_index), j);
//                    autopush_string_with_newline(allocated_contents01, &(contents_index), "]");
//
//                    autopush_string(allocated_contents01, &(contents_index), "mov [rax+");
//                    autopush_whole_8(allocated_contents01, &(contents_index), j);
//                    autopush_string_with_newline(allocated_contents01, &(contents_index), "], ebx");
//
//                    j = whole_8+(j, 4);
//                    done_anything_structure = true;
//                };
//                if &&(>(-(size, j), 1), !(done_anything_structure)) {
//                    autopush_string(allocated_contents01, &(contents_index), "mov bx, [rsp+");
//                    autopush_whole_8(allocated_contents01, &(contents_index), j);
//                    autopush_string_with_newline(allocated_contents01, &(contents_index), "]");
//
//                    autopush_string(allocated_contents01, &(contents_index), "mov [rax+");
//                    autopush_whole_8(allocated_contents01, &(contents_index), j);
//                    autopush_string_with_newline(allocated_contents01, &(contents_index), "], bx");
//
//                    j = whole_8+(j, 2);
//                    done_anything_structure = true;
//                };
//                if &&(>(-(size, j), 0), !(done_anything_structure)) {
//                    autopush_string(allocated_contents01, &(contents_index), "mov bl, [rsp+");
//                    autopush_whole_8(allocated_contents01, &(contents_index), j);
//                    autopush_string_with_newline(allocated_contents01, &(contents_index), "]");
//
//                    autopush_string(allocated_contents01, &(contents_index), "mov [rax+");
//                    autopush_whole_8(allocated_contents01, &(contents_index), j);
//                    autopush_string_with_newline(allocated_contents01, &(contents_index), "], bl");
//
//                    j = whole_8+(j, 1);
//                    done_anything_structure = true;
//                };
//            };
//
//            autopush_string(allocated_contents01, &(contents_index), "add rsp, ");
//            autopush_whole_8(allocated_contents01, &(contents_index), whole_8+(size, 8));
//            autopush_string_with_newline(allocated_contents01, &(contents_index), "");
//
//            autoarray8_set(&(memory_function_contents), memory_function_index, AutoBuffer->buffer(allocated_contents01));
//
//            memory_function_index = whole_8+(memory_function_index, 1);
//
//            // Getter for whole value
//            variable allocated = brk_allocate(whole_8+(length(structure_name), 3));
//            copy(structure_name, allocated, length(structure_name));
//            copy("->", @cast_*(+(allocated, length(structure_name))), 2);
//
//            autoarray8_set(&(memory_functions), memory_function_index, allocated);
//
//            variable allocated_contents1 = autobuffer_new(131072);
//            variable allocated_contents11 = &(allocated_contents1);
//            variable contents_index = 0;
//
//            autopush_string_with_newline(allocated_contents11, &(contents_index), "pop rax");
//            autopush_string(allocated_contents11, &(contents_index), "sub rsp, ");
//            autopush_whole_8(allocated_contents11, &(contents_index), size);
//            autopush_string_with_newline(allocated_contents11, &(contents_index), "");
//
//            variable k = 0;
//            while <(k, size) {
//                variable done_anything_structure = false;
//
//                if >(-(size, k), 7) {
//                    autopush_string(allocated_contents11, &(contents_index), "mov rbx, [rax+");
//                    autopush_whole_8(allocated_contents11, &(contents_index), k);
//                    autopush_string_with_newline(allocated_contents11, &(contents_index), "]");
//
//                    autopush_string(allocated_contents11, &(contents_index), "mov [rsp+");
//                    autopush_whole_8(allocated_contents11, &(contents_index), k);
//                    autopush_string_with_newline(allocated_contents11, &(contents_index), "], rbx");
//
//                    k = whole_8+(k, 8);
//                    done_anything_structure = true;
//                };
//                if &&(>(-(size, k), 3), !(done_anything_structure)) {
//                    autopush_string(allocated_contents11, &(contents_index), "mov ebx, [rax+");
//                    autopush_whole_8(allocated_contents11, &(contents_index), k);
//                    autopush_string_with_newline(allocated_contents11, &(contents_index), "]");
//
//                    autopush_string(allocated_contents11, &(contents_index), "mov [rsp+");
//                    autopush_whole_8(allocated_contents11, &(contents_index), k);
//                    autopush_string_with_newline(allocated_contents11, &(contents_index), "], ebx");
//
//                    k = whole_8+(k, 4);
//                    done_anything_structure = true;
//                };
//                if &&(>(-(size, k), 1), !(done_anything_structure)) {
//                    autopush_string(allocated_contents11, &(contents_index), "mov bx, [rax+");
//                    autopush_whole_8(allocated_contents11, &(contents_index), k);
//                    autopush_string_with_newline(allocated_contents11, &(contents_index), "]");
//
//                    autopush_string(allocated_contents11, &(contents_index), "mov [rsp+");
//                    autopush_whole_8(allocated_contents11, &(contents_index), k);
//                    autopush_string_with_newline(allocated_contents11, &(contents_index), "], bx");
//
//                    k = whole_8+(k, 2);
//                    done_anything_structure = true;
//                };
//                if &&(>(-(size, k), 0), !(done_anything_structure)) {
//                    autopush_string(allocated_contents11, &(contents_index), "mov bl, [rax+");
//                    autopush_whole_8(allocated_contents11, &(contents_index), k);
//                    autopush_string_with_newline(allocated_contents11, &(contents_index), "]");
//
//                    autopush_string(allocated_contents11, &(contents_index), "mov [rsp+");
//                    autopush_whole_8(allocated_contents11, &(contents_index), k);
//                    autopush_string_with_newline(allocated_contents11, &(contents_index), "], bl");
//
//                    k = whole_8+(k, 1);
//                    done_anything_structure = true;
//                };
//            };
//
//            autoarray8_set(&(memory_function_contents), memory_function_index, AutoBuffer->buffer(allocated_contents11));
//
//            memory_function_index = whole_8+(memory_function_index, 1);
//
//            variable member_names = *->(@cast_**(+(nodes_get_pointer(nodes, i), 16)));
//            variable member_types = *->(@cast_**(+(nodes_get_pointer(nodes, i), 24)));
//
//            variable j = 0;
//            while !(=(array8_get(member_names, j), 0)) {
//                variable member_name = @cast_*(array8_get(member_names, j));
//                variable member_type = @cast_*(array8_get(member_types, j));
//
//                variable location = get_size_multiple_linux_x86-64(member_types, j, nodes, node_count);
//
//                variable allocated = brk_allocate(whole_8+(length(structure_name), whole_8+(length(member_name), 4)));
//                copy("*", allocated, 1);
//                copy(structure_name, @cast_*(+(allocated, 1)), length(structure_name));
//                copy("->", @cast_*(+(+(allocated, length(structure_name)), 1)), 2);
//                copy(member_name, @cast_*(+(+(allocated, +(length(structure_name), 2)), 1)), length(member_name));
//
//                autoarray8_set(&(memory_functions), memory_function_index, allocated);
//
//                variable allocated_contents4 = autobuffer_new(131072);
//                variable allocated_contents41 = &(allocated_contents4);
//                variable contents_index = 0;
//                autopush_string_with_newline(allocated_contents41, &(contents_index), "pop rax");
//                autopush_string(allocated_contents41, &(contents_index), "add rax, ");
//                autopush_whole_8(allocated_contents41, &(contents_index), location);
//                autopush_string_with_newline(allocated_contents41, &(contents_index), "");
//                autopush_string_with_newline(allocated_contents41, &(contents_index), "push rax");
//
//                autoarray8_set(&(memory_function_contents), memory_function_index, AutoBuffer->buffer(allocated_contents41));
//
//                memory_function_index = whole_8+(memory_function_index, 1);
//
//                // Setter for individual members
//                variable allocated = brk_allocate(whole_8+(length(structure_name), whole_8+(length(member_name), 3)));
//                copy(structure_name, allocated, length(structure_name));
//                copy("<-", @cast_*(+(allocated, length(structure_name))), 2);
//                copy(member_name, @cast_*(+(allocated, +(length(structure_name), 2))), length(member_name));
//
//                autoarray8_set(&(memory_functions), memory_function_index, allocated);
//
//                variable allocated_contents2 = autobuffer_new(8388608);
//                variable allocated_contents21 = &(allocated_contents2);
//                variable contents_index = 0;
//
//                variable size = get_size_linux_x86-64(member_type, nodes, node_count);
//
//                autopush_string(allocated_contents21, &(contents_index), "add rsp, ");
//                autopush_whole_8(allocated_contents21, &(contents_index), size);
//                autopush_string_with_newline(allocated_contents21, &(contents_index), "");
//                autopush_string_with_newline(allocated_contents21, &(contents_index), "mov rax, [rsp]");
//                autopush_string(allocated_contents21, &(contents_index), "sub rsp, ");
//                autopush_whole_8(allocated_contents21, &(contents_index), size);
//                autopush_string_with_newline(allocated_contents21, &(contents_index), "");
//
//                variable k = 0;
//                while <(k, size) {
//                    variable done_anything_structure = false;
//
//                    if >(-(size, k), 7) {
//                        autopush_string(allocated_contents21, &(contents_index), "mov rbx, [rsp+");
//                        autopush_whole_8(allocated_contents21, &(contents_index), k);
//                        autopush_string_with_newline(allocated_contents21, &(contents_index), "]");
//
//                        autopush_string(allocated_contents21, &(contents_index), "mov [rax+");
//                        autopush_whole_8(allocated_contents21, &(contents_index), whole_8+(k, location));
//                        autopush_string_with_newline(allocated_contents21, &(contents_index), "], rbx");
//
//                        k = whole_8+(k, 8);
//                        done_anything_structure = true;
//                    };
//                    if &&(>(-(size, k), 3), !(done_anything_structure)) {
//                        autopush_string(allocated_contents21, &(contents_index), "mov ebx, [rsp+");
//                        autopush_whole_8(allocated_contents21, &(contents_index), k);
//                        autopush_string_with_newline(allocated_contents21, &(contents_index), "]");
//
//                        autopush_string(allocated_contents21, &(contents_index), "mov [rax+");
//                        autopush_whole_8(allocated_contents21, &(contents_index), whole_8+(k, location));
//                        autopush_string_with_newline(allocated_contents21, &(contents_index), "], ebx");
//
//                        k = whole_8+(k, 4);
//                        done_anything_structure = true;
//                    };
//                    if &&(>(-(size, k), 1), !(done_anything_structure)) {
//                        autopush_string(allocated_contents21, &(contents_index), "mov bx, [rsp+");
//                        autopush_whole_8(allocated_contents21, &(contents_index), k);
//                        autopush_string_with_newline(allocated_contents21, &(contents_index), "]");
//
//                        autopush_string(allocated_contents21, &(contents_index), "mov [rax+");
//                        autopush_whole_8(allocated_contents21, &(contents_index), whole_8+(k, location));
//                        autopush_string_with_newline(allocated_contents21, &(contents_index), "], bx");
//
//                        k = whole_8+(k, 2);
//                        done_anything_structure = true;
//                    };
//                    if &&(>(-(size, k), 0), !(done_anything_structure)) {
//                        autopush_string(allocated_contents21, &(contents_index), "mov bl, [rsp+");
//                        autopush_whole_8(allocated_contents21, &(contents_index), k);
//                        autopush_string_with_newline(allocated_contents21, &(contents_index), "]");
//
//                        autopush_string(allocated_contents21, &(contents_index), "mov [rax+");
//                        autopush_whole_8(allocated_contents21, &(contents_index), whole_8+(k, location));
//                        autopush_string_with_newline(allocated_contents21, &(contents_index), "], bl");
//
//                        k = whole_8+(k, 1);
//                        done_anything_structure = true;
//                    };
//                };
//
//                autopush_string(allocated_contents21, &(contents_index), "add rsp, ");
//                autopush_whole_8(allocated_contents21, &(contents_index), whole_8+(size, 8));
//                autopush_string_with_newline(allocated_contents21, &(contents_index), "");
//
//                autoarray8_set(&(memory_function_contents), memory_function_index, AutoBuffer->buffer(allocated_contents21));
//
//                memory_function_index = whole_8+(memory_function_index, 1);
//
//                // Getter for indivudal members
//                variable allocated = brk_allocate(whole_8+(length(structure_name), whole_8+(length(member_name), 3)));
//                copy(structure_name, allocated, length(structure_name));
//                copy("->", @cast_*(+(allocated, length(structure_name))), 2);
//                copy(member_name, @cast_*(+(allocated, +(length(structure_name), 2))), length(member_name));
//
//                autoarray8_set(&(memory_functions), memory_function_index, allocated);
//
//                variable allocated_contents3 = autobuffer_new(8388608);
//                variable allocated_contents31 = &(allocated_contents3);
//                variable contents_index = 0;
//
//                variable size = get_size_linux_x86-64(member_type, nodes, node_count);
//                variable location = get_size_multiple_linux_x86-64(member_types, j, nodes, node_count);
//
//                autopush_string_with_newline(allocated_contents31, &(contents_index), "pop rax");
//                autopush_string(allocated_contents31, &(contents_index), "sub rsp, ");
//                autopush_whole_8(allocated_contents31, &(contents_index), size);
//                autopush_string_with_newline(allocated_contents31, &(contents_index), "");
//
//                variable k = 0;
//                while <(k, size) {
//                    variable done_anything_structure = false;
//
//                    if >(-(size, k), 7) {
//                        autopush_string(allocated_contents31, &(contents_index), "mov rbx, [rax+");
//                        autopush_whole_8(allocated_contents31, &(contents_index), whole_8+(k, location));
//                        autopush_string_with_newline(allocated_contents31, &(contents_index), "]");
//
//                        autopush_string(allocated_contents31, &(contents_index), "mov [rsp+");
//                        autopush_whole_8(allocated_contents31, &(contents_index), k);
//                        autopush_string_with_newline(allocated_contents31, &(contents_index), "], rbx");
//
//                        k = whole_8+(k, 8);
//                        done_anything_structure = true;
//                    };
//                    if &&(>(-(size, k), 3), !(done_anything_structure)) {
//                        autopush_string(allocated_contents31, &(contents_index), "mov ebx, [rax+");
//                        autopush_whole_8(allocated_contents31, &(contents_index), whole_8+(k, location));
//                        autopush_string_with_newline(allocated_contents31, &(contents_index), "]");
//
//                        autopush_string(allocated_contents31, &(contents_index), "mov [rsp+");
//                        autopush_whole_8(allocated_contents31, &(contents_index), k);
//                        autopush_string_with_newline(allocated_contents31, &(contents_index), "], ebx");
//
//                        k = whole_8+(k, 4);
//                        done_anything_structure = true;
//                    };
//                    if &&(>(-(size, k), 1), !(done_anything_structure)) {
//                        autopush_string(allocated_contents31, &(contents_index), "mov bx, [rax+");
//                        autopush_whole_8(allocated_contents31, &(contents_index), whole_8+(k, location));
//                        autopush_string_with_newline(allocated_contents31, &(contents_index), "]");
//
//                        autopush_string(allocated_contents31, &(contents_index), "mov [rsp+");
//                        autopush_whole_8(allocated_contents31, &(contents_index), k);
//                        autopush_string_with_newline(allocated_contents31, &(contents_index), "], bx");
//
//                        k = whole_8+(k, 2);
//                        done_anything_structure = true;
//                    };
//                    if &&(>(-(size, k), 0), !(done_anything_structure)) {
//                        autopush_string(allocated_contents31, &(contents_index), "mov bl, [rax+");
//                        autopush_whole_8(allocated_contents31, &(contents_index), whole_8+(k, location));
//                        autopush_string_with_newline(allocated_contents31, &(contents_index), "]");
//
//                        autopush_string(allocated_contents31, &(contents_index), "mov [rsp+");
//                        autopush_whole_8(allocated_contents31, &(contents_index), k);
//                        autopush_string_with_newline(allocated_contents31, &(contents_index), "], bl");
//
//                        k = whole_8+(k, 1);
//                        done_anything_structure = true;
//                    };
//                };
//
//                autoarray8_set(&(memory_function_contents), memory_function_index, AutoBuffer->buffer(allocated_contents31));
//
//                memory_function_index = whole_8+(memory_function_index, 1);
//
//                j = whole_8+(j, 1);
//            };
//        };
//
//        i = whole_8+(i, 1);
//    };
//
//    variable current_function: *;
//
//    variable variable_names = autobuffer_new(2048);
//    variable variable_types = autobuffer_new(2048);
//    variable variable_sizes = autobuffer_new(2048);
//    variable variable_index = 0;
//
//    variable program_constant_index = 0;
//
//    variable i = 0;
//    while <(i, node_count) {
//        variable id = nodes_get_id(nodes, i);
//        variable pointer = nodes_get_pointer(nodes, i);
//        variable pointer_data = nodes_get_pointer_data(nodes, i);
//
//        variable done_anything = false;
//
//        if =(id, NODE_FUNCTION) {
//            variable function_data = @cast_*NodeFunctionData(pointer_data);
//            variable next_id = nodes_get_id(nodes, whole_8+(i, 1));
//
//            if !(=(next_id, NODE_ENDFUNCTION)) {
//                variable function_name = NodeFunctionData->name(function_data);
//                autopush_string(&(buffer), &(buffer_index), make_valid_linux_x86-64(function_name));
//                autopush_string_with_newline(&(buffer), &(buffer_index), ":");
//                autopush_string_with_newline(&(buffer), &(buffer_index), "push rbp");
//                autopush_string_with_newline(&(buffer), &(buffer_index), "mov rbp, rsp");
//
//                variable locals_size = @cast_whole_8(autostringarraymap_get(&(functions), &(function_local_sizes), function_name, index));
//                autopush_string(&(buffer), &(buffer_index), "sub rsp, ");
//                autopush_whole_8(&(buffer), &(buffer_index), whole_8+(locals_size, 16));
//                autopush_string_with_newline(&(buffer), &(buffer_index), "");
//
//                current_function = function_name;
//
//                variable_index = 0;
//            };
//
//            done_anything = true;
//        };
//
//        if =(id, NODE_NUMBER) {
//            variable whole_8_data = @cast_*NodeNumberData(pointer_data);
//            variable value_whole_8 = NodeNumberData->value(whole_8_data);
//
//            //TODO: Won't work for the new number system, not updating because fasm will likely be removed soon.
//            autopush_string(&(buffer), &(buffer_index), "push ");
//            autopush_whole_8(&(buffer), &(buffer_index), value_whole_8);
//            autopush_string_with_newline(&(buffer), &(buffer_index), "");
//            done_anything = true;
//        };
//
//        if =(id, NODE_BOOLEAN) {
//            variable boolean_data = @cast_*NodeBooleanData(pointer_data);
//            variable value_boolean = NodeBooleanData->value(boolean_data);
//
//            if @cast_boolean(value_boolean) {
//                autopush_string_with_newline(&(buffer), &(buffer_index), "sub rsp, 1");
//                autopush_string_with_newline(&(buffer), &(buffer_index), "mov [rsp], byte 1");
//                done_anything = true;
//            };
//
//            if !(done_anything) {
//                autopush_string_with_newline(&(buffer), &(buffer_index), "sub rsp, 1");
//                autopush_string_with_newline(&(buffer), &(buffer_index), "mov [rsp], byte 0");
//                done_anything = true;
//            };
//        };
//
//        if =(id, NODE_INVOKE) {
//            variable invoke_data = @cast_*NodeInvokeData(pointer_data);
//            variable function_name = NodeInvokeData->name(invoke_data);
//            variable next_id = nodes_get_id(nodes, whole_8+(i, 1));
//
//            if =(next_id, NODE_POINTER) {
//                variable function_name_new = brk_allocate(whole_8+(length(function_name), 2));
//                copy("*", function_name_new, 1);
//                copy(function_name, @cast_*(+(function_name_new, 1)), length(function_name));
//                function_name = function_name_new;
//            };
//
//            variable done_anything_invoke = false;
//
//            if !(=(autostringarraymap_get(&(memory_functions), &(memory_function_contents), function_name, memory_function_index), 0)) {
//                variable contents = autostringarraymap_get(&(memory_functions), &(memory_function_contents), function_name, memory_function_index);
//                autopush_string(&(buffer), &(buffer_index), contents);
//                done_anything_invoke = true;
//            };
//
//            if string_length=(function_name, "@cast_", 6) {
//                done_anything_invoke = true;
//            };
//
//            if string=(function_name, "=") {
//                autopush_string_with_newline(&(buffer), &(buffer_index), "pop rax");
//                autopush_string_with_newline(&(buffer), &(buffer_index), "pop rbx");
//                autopush_string_with_newline(&(buffer), &(buffer_index), "cmp rax, rbx");
//                autopush_string_with_newline(&(buffer), &(buffer_index), "mov rcx, 0");
//                autopush_string_with_newline(&(buffer), &(buffer_index), "mov rbx, 1");
//                autopush_string_with_newline(&(buffer), &(buffer_index), "cmove rcx, rbx");
//                autopush_string_with_newline(&(buffer), &(buffer_index), "sub rsp, 1");
//                autopush_string_with_newline(&(buffer), &(buffer_index), "mov [rsp], cl");
//                done_anything_invoke = true;
//            };
//
//            if string=(function_name, "=") {
//                autopush_string_with_newline(&(buffer), &(buffer_index), "mov al, [rsp]");
//                autopush_string_with_newline(&(buffer), &(buffer_index), "add rsp, 1");
//                autopush_string_with_newline(&(buffer), &(buffer_index), "mov bl, [rsp]");
//                autopush_string_with_newline(&(buffer), &(buffer_index), "add rsp, 1");
//                autopush_string_with_newline(&(buffer), &(buffer_index), "cmp al, bl");
//                autopush_string_with_newline(&(buffer), &(buffer_index), "mov rcx, 0");
//                autopush_string_with_newline(&(buffer), &(buffer_index), "mov rbx, 1");
//                autopush_string_with_newline(&(buffer), &(buffer_index), "cmove rcx, rbx");
//                autopush_string_with_newline(&(buffer), &(buffer_index), "sub rsp, 1");
//                autopush_string_with_newline(&(buffer), &(buffer_index), "mov [rsp], cl");
//                done_anything_invoke = true;
//            };
//
//            if string=(function_name, "<") {
//                autopush_string_with_newline(&(buffer), &(buffer_index), "pop rax");
//                autopush_string_with_newline(&(buffer), &(buffer_index), "pop rbx");
//                autopush_string_with_newline(&(buffer), &(buffer_index), "cmp rbx, rax");
//                autopush_string_with_newline(&(buffer), &(buffer_index), "mov rcx, 0");
//                autopush_string_with_newline(&(buffer), &(buffer_index), "mov rbx, 1");
//                autopush_string_with_newline(&(buffer), &(buffer_index), "cmovb rcx, rbx");
//                autopush_string_with_newline(&(buffer), &(buffer_index), "sub rsp, 1");
//                autopush_string_with_newline(&(buffer), &(buffer_index), "mov [rsp], cl");
//                done_anything_invoke = true;
//            };
//
//            if string=(function_name, ">") {
//                autopush_string_with_newline(&(buffer), &(buffer_index), "pop rax");
//                autopush_string_with_newline(&(buffer), &(buffer_index), "pop rbx");
//                autopush_string_with_newline(&(buffer), &(buffer_index), "cmp rbx, rax");
//                autopush_string_with_newline(&(buffer), &(buffer_index), "mov rcx, 0");
//                autopush_string_with_newline(&(buffer), &(buffer_index), "mov rbx, 1");
//                autopush_string_with_newline(&(buffer), &(buffer_index), "cmova rcx, rbx");
//                autopush_string_with_newline(&(buffer), &(buffer_index), "sub rsp, 1");
//                autopush_string_with_newline(&(buffer), &(buffer_index), "mov [rsp], cl");
//                done_anything_invoke = true;
//            };
//
//            if string=(function_name, "!") {
//                autopush_string_with_newline(&(buffer), &(buffer_index), "mov al, [rsp]");
//                autopush_string_with_newline(&(buffer), &(buffer_index), "add rsp, 1");
//                autopush_string_with_newline(&(buffer), &(buffer_index), "cmp al, 0");
//                autopush_string_with_newline(&(buffer), &(buffer_index), "mov cx, 0");
//                autopush_string_with_newline(&(buffer), &(buffer_index), "mov bx, 1");
//                autopush_string_with_newline(&(buffer), &(buffer_index), "cmove cx, bx");
//                autopush_string_with_newline(&(buffer), &(buffer_index), "sub rsp, 1");
//                autopush_string_with_newline(&(buffer), &(buffer_index), "mov [rsp], cl");
//                done_anything_invoke = true;
//            };
//            
//            if string=(function_name, "+") {
//                autopush_string_with_newline(&(buffer), &(buffer_index), "pop rax");
//                autopush_string_with_newline(&(buffer), &(buffer_index), "pop rbx");
//                autopush_string_with_newline(&(buffer), &(buffer_index), "add rax, rbx");
//                autopush_string_with_newline(&(buffer), &(buffer_index), "push rax");
//                done_anything_invoke = true;
//            };
//
//            if string=(function_name, "-") {
//                autopush_string_with_newline(&(buffer), &(buffer_index), "pop rax");
//                autopush_string_with_newline(&(buffer), &(buffer_index), "pop rbx");
//                autopush_string_with_newline(&(buffer), &(buffer_index), "sub rbx, rax");
//                autopush_string_with_newline(&(buffer), &(buffer_index), "push rbx");
//                done_anything_invoke = true;
//            };
//
//            if string=(function_name, "-4") {
//                autopush_string_with_newline(&(buffer), &(buffer_index), "mov eax, [rsp]");
//                autopush_string_with_newline(&(buffer), &(buffer_index), "add rsp, 4");
//                autopush_string_with_newline(&(buffer), &(buffer_index), "mov ebx, [rsp]");
//                autopush_string_with_newline(&(buffer), &(buffer_index), "add rsp, 4");
//                autopush_string_with_newline(&(buffer), &(buffer_index), "sub ebx, eax");
//                autopush_string_with_newline(&(buffer), &(buffer_index), "sub rsp, 4");
//                autopush_string_with_newline(&(buffer), &(buffer_index), "mov [rsp], ebx");
//                done_anything_invoke = true;
//            };
//
//            if string=(function_name, "*") {
//                autopush_string_with_newline(&(buffer), &(buffer_index), "pop rax");
//                autopush_string_with_newline(&(buffer), &(buffer_index), "pop rbx");
//                autopush_string_with_newline(&(buffer), &(buffer_index), "mul rbx");
//                autopush_string_with_newline(&(buffer), &(buffer_index), "push rax");
//                done_anything_invoke = true;
//            };
//
//            if string=(function_name, "/") {
//                autopush_string_with_newline(&(buffer), &(buffer_index), "pop rbx");
//                autopush_string_with_newline(&(buffer), &(buffer_index), "pop rax");
//                autopush_string_with_newline(&(buffer), &(buffer_index), "mov rdx, 0");
//                autopush_string_with_newline(&(buffer), &(buffer_index), "div rbx");
//                autopush_string_with_newline(&(buffer), &(buffer_index), "push rax");
//                done_anything_invoke = true;
//            };
//
//            if string=(function_name, "%") {
//                autopush_string_with_newline(&(buffer), &(buffer_index), "pop rbx");
//                autopush_string_with_newline(&(buffer), &(buffer_index), "pop rax");
//                autopush_string_with_newline(&(buffer), &(buffer_index), "mov rdx, 0");
//                autopush_string_with_newline(&(buffer), &(buffer_index), "div rbx");
//                autopush_string_with_newline(&(buffer), &(buffer_index), "push rdx");
//                done_anything_invoke = true;
//            };
//
//            if string=(function_name, "byte") {
//                autopush_string_with_newline(&(buffer), &(buffer_index), "pop rax");
//                autopush_string_with_newline(&(buffer), &(buffer_index), "sub rsp, 1");
//                autopush_string_with_newline(&(buffer), &(buffer_index), "mov [rsp], al");
//                done_anything_invoke = true;
//            };
//
//            if string=(function_name, "byte_to_whole_8") {
//                autopush_string_with_newline(&(buffer), &(buffer_index), "mov rax, 0");
//                autopush_string_with_newline(&(buffer), &(buffer_index), "mov al, [rsp]");
//                autopush_string_with_newline(&(buffer), &(buffer_index), "add rsp, 1");
//                autopush_string_with_newline(&(buffer), &(buffer_index), "push rax");
//                done_anything_invoke = true;
//            };
//
//            if string=(function_name, "short_to_integer") {
//                autopush_string_with_newline(&(buffer), &(buffer_index), "mov rax, 0");
//                autopush_string_with_newline(&(buffer), &(buffer_index), "mov ax, [rsp]");
//                autopush_string_with_newline(&(buffer), &(buffer_index), "add rsp, 2");
//                autopush_string_with_newline(&(buffer), &(buffer_index), "push rax");
//                done_anything_invoke = true;
//            };
//
//            if string=(function_name, "medium_to_integer") {
//                autopush_string_with_newline(&(buffer), &(buffer_index), "mov rax, 0");
//                autopush_string_with_newline(&(buffer), &(buffer_index), "mov eax, [rsp]");
//                autopush_string_with_newline(&(buffer), &(buffer_index), "add rsp, 2");
//                autopush_string_with_newline(&(buffer), &(buffer_index), "push rax");
//                done_anything_invoke = true;
//            };
//
//            if string=(function_name, "*8") {
//                autopush_string_with_newline(&(buffer), &(buffer_index), "pop rax");
//                autopush_string_with_newline(&(buffer), &(buffer_index), "mov rbx, [rax]");
//                autopush_string_with_newline(&(buffer), &(buffer_index), "push rbx");
//                done_anything_invoke = true;
//            };
//
//            if string=(function_name, "*1") {
//                autopush_string_with_newline(&(buffer), &(buffer_index), "pop rax");
//                autopush_string_with_newline(&(buffer), &(buffer_index), "mov rbx, 0");
//                autopush_string_with_newline(&(buffer), &(buffer_index), "mov bl, [rax]");
//                autopush_string_with_newline(&(buffer), &(buffer_index), "sub rsp, 1");
//                autopush_string_with_newline(&(buffer), &(buffer_index), "mov [rsp], bl");
//                done_anything_invoke = true;
//            };
//
//            if string=(function_name, "|") {
//                autopush_string_with_newline(&(buffer), &(buffer_index), "mov al, [rsp]");
//                autopush_string_with_newline(&(buffer), &(buffer_index), "add rsp, 1");
//                autopush_string_with_newline(&(buffer), &(buffer_index), "mov bl, [rsp]");
//                autopush_string_with_newline(&(buffer), &(buffer_index), "add rsp, 1");
//                autopush_string_with_newline(&(buffer), &(buffer_index), "or al, bl");
//                autopush_string_with_newline(&(buffer), &(buffer_index), "sub rsp, 1");
//                autopush_string_with_newline(&(buffer), &(buffer_index), "mov [rsp], al");
//                done_anything_invoke = true;
//            };
//
//            if string=(function_name, "&&") {
//                autopush_string_with_newline(&(buffer), &(buffer_index), "mov al, [rsp]");
//                autopush_string_with_newline(&(buffer), &(buffer_index), "add rsp, 1");
//                autopush_string_with_newline(&(buffer), &(buffer_index), "mov bl, [rsp]");
//                autopush_string_with_newline(&(buffer), &(buffer_index), "add rsp, 1");
//                autopush_string_with_newline(&(buffer), &(buffer_index), "and al, bl");
//                autopush_string_with_newline(&(buffer), &(buffer_index), "sub rsp, 1");
//                autopush_string_with_newline(&(buffer), &(buffer_index), "mov [rsp], al");
//                done_anything_invoke = true;
//            };
//
//            if string=(function_name, "@syscall0") {
//                autopush_string_with_newline(&(buffer), &(buffer_index), "pop rax");
//                autopush_string_with_newline(&(buffer), &(buffer_index), "syscall");
//                autopush_string_with_newline(&(buffer), &(buffer_index), "push rax");
//                done_anything_invoke = true;
//            };
//
//            if string=(function_name, "@syscall1") {
//                autopush_string_with_newline(&(buffer), &(buffer_index), "pop rdi");
//                autopush_string_with_newline(&(buffer), &(buffer_index), "pop rax");
//                autopush_string_with_newline(&(buffer), &(buffer_index), "syscall");
//                autopush_string_with_newline(&(buffer), &(buffer_index), "push rax");
//                done_anything_invoke = true;
//            };
//
//            if string=(function_name, "@syscall2") {
//                autopush_string_with_newline(&(buffer), &(buffer_index), "pop rsi");
//                autopush_string_with_newline(&(buffer), &(buffer_index), "pop rdi");
//                autopush_string_with_newline(&(buffer), &(buffer_index), "pop rax");
//                autopush_string_with_newline(&(buffer), &(buffer_index), "syscall");
//                autopush_string_with_newline(&(buffer), &(buffer_index), "push rax");
//                done_anything_invoke = true;
//            };
//
//            if string=(function_name, "@syscall3") {
//                autopush_string_with_newline(&(buffer), &(buffer_index), "pop rdx");
//                autopush_string_with_newline(&(buffer), &(buffer_index), "pop rsi");
//                autopush_string_with_newline(&(buffer), &(buffer_index), "pop rdi");
//                autopush_string_with_newline(&(buffer), &(buffer_index), "pop rax");
//                autopush_string_with_newline(&(buffer), &(buffer_index), "syscall");
//                autopush_string_with_newline(&(buffer), &(buffer_index), "push rax");
//                done_anything_invoke = true;
//            };
//
//            if string=(function_name, "@syscall5") {
//                autopush_string_with_newline(&(buffer), &(buffer_index), "pop r8");
//                autopush_string_with_newline(&(buffer), &(buffer_index), "pop r10");
//                autopush_string_with_newline(&(buffer), &(buffer_index), "pop rdx");
//                autopush_string_with_newline(&(buffer), &(buffer_index), "pop rsi");
//                autopush_string_with_newline(&(buffer), &(buffer_index), "pop rdi");
//                autopush_string_with_newline(&(buffer), &(buffer_index), "pop rax");
//                autopush_string_with_newline(&(buffer), &(buffer_index), "syscall");
//                autopush_string_with_newline(&(buffer), &(buffer_index), "push rax");
//                done_anything_invoke = true;
//            };
//
//            if !(done_anything_invoke) {
//                autopush_string(&(buffer), &(buffer_index), "call ");
//                autopush_string_with_newline(&(buffer), &(buffer_index), make_valid_linux_x86-64(function_name));
//            };
//            done_anything = true;
//        };
//
//        if =(id, NODE_STRING) {
//            variable string_data = @cast_*NodeStringData(pointer_data);
//            variable string_value = NodeStringData->value(string_data);
//            variable string_id = program_constant_index;
//            program_constant_index = @cast_whole_8(+(program_constant_index, 1));
//
//            variable id_string: any_24;
//            whole_8_to_string(string_id, &(id_string));
//
//            autopush_string(&(buffer), &(buffer_index), "push _");
//            autopush_string_with_newline(&(buffer), &(buffer_index), &(id_string));
//
//            autopush_string(&(data_buffer), &(data_buffer_index), "_");
//            autopush_string(&(data_buffer), &(data_buffer_index), &(id_string));
//            autopush_string(&(data_buffer), &(data_buffer_index), ": db ");
//            autopush_character(&(data_buffer), &(data_buffer_index), byte(34));
//            autopush_string(&(data_buffer), &(data_buffer_index), string_value);
//            autopush_character(&(data_buffer), &(data_buffer_index), byte(34));
//            autopush_string_with_newline(&(data_buffer), &(data_buffer_index), ", 0");
//
//            done_anything = true;
//        };
//
//        if =(id, NODE_DECLARE) {
//            variable declare_data = @cast_*NodeDeclareData(pointer_data);
//            variable variable_name = NodeDeclareData->name(declare_data);
//            variable variable_type = NodeDeclareData->type(declare_data);
//
//            autoarray8_set(&(variable_names), variable_index, variable_name);
//            autoarray8_set(&(variable_types), variable_index, variable_type);
//            autoarray8_set(&(variable_sizes), variable_index, get_size_linux_x86-64(variable_type, nodes, node_count));
//            variable_index = whole_8+(variable_index, 1);
//
//            done_anything = true;
//        };
//
//        if =(id, NODE_ASSIGN) {
//            variable assign_data = @cast_*NodeAssignData(pointer_data);
//            variable variable_name = NodeAssignData->name(assign_data);
//            variable variable_type = autostringarraymap_get(&(variable_names), &(variable_types), variable_name, variable_index);
//
//            if !(=(variable_type, 0)) {
//                variable size = get_size_linux_x86-64(variable_type, nodes, node_count);
//                variable variable_index_thing = autostringarraymap_get_index(&(variable_names), variable_name, variable_index);
//                variable location = 0;
//                variable j = 0;
//                while <(j, variable_index_thing) {
//                    location = @cast_whole_8(+(location, autoarray8_get(&(variable_sizes), j)));
//                    j = whole_8+(j, 1);
//                };
//
//                variable j = 0;
//                while <(j, size) {
//                    variable done_anything_assign = false;
//
//                    if >(-(size, j), 7) {
//                        autopush_string(&(buffer), &(buffer_index), "mov rax, [rsp+");
//                        autopush_whole_8(&(buffer), &(buffer_index), j);
//                        autopush_string_with_newline(&(buffer), &(buffer_index), "]");
//
//                        autopush_string(&(buffer), &(buffer_index), "mov [rbp-");
//                        autopush_whole_8(&(buffer), &(buffer_index), @cast_whole_8(-(+(size, location), j)));
//                        autopush_string_with_newline(&(buffer), &(buffer_index), "], rax");
//
//                        j = whole_8+(j, 8);
//                        done_anything_assign = true;
//                    };
//                    if &&(>(-(size, j), 3), !(done_anything_assign)) {
//                        autopush_string(&(buffer), &(buffer_index), "mov eax, [rsp+");
//                        autopush_whole_8(&(buffer), &(buffer_index), j);
//                        autopush_string_with_newline(&(buffer), &(buffer_index), "]");
//
//                        autopush_string(&(buffer), &(buffer_index), "mov [rbp-");
//                        autopush_whole_8(&(buffer), &(buffer_index), @cast_whole_8(-(+(size, location), j)));
//                        autopush_string_with_newline(&(buffer), &(buffer_index), "], eax");
//
//                        j = whole_8+(j, 4);
//                        done_anything_assign = true;
//                    };
//                    if &&(>(-(size, j), 1), !(done_anything_assign)) {
//                        autopush_string(&(buffer), &(buffer_index), "mov ax, [rsp+");
//                        autopush_whole_8(&(buffer), &(buffer_index), j);
//                        autopush_string_with_newline(&(buffer), &(buffer_index), "]");
//
//                        autopush_string(&(buffer), &(buffer_index), "mov [rbp-");
//                        autopush_whole_8(&(buffer), &(buffer_index), @cast_whole_8(-(+(size, location), j)));
//                        autopush_string_with_newline(&(buffer), &(buffer_index), "], ax");
//
//                        j = whole_8+(j, 2);
//                        done_anything_assign = true;
//                    };
//                    if &&(>(-(size, j), 0), !(done_anything_assign)) {
//                        autopush_string(&(buffer), &(buffer_index), "mov al, [rsp+");
//                        autopush_whole_8(&(buffer), &(buffer_index), j);
//                        autopush_string_with_newline(&(buffer), &(buffer_index), "]");
//
//                        autopush_string(&(buffer), &(buffer_index), "mov [rbp-");
//                        autopush_whole_8(&(buffer), &(buffer_index), @cast_whole_8(-(+(size, location), j)));
//                        autopush_string_with_newline(&(buffer), &(buffer_index), "], al");
//
//                        j = whole_8+(j, 1);
//                        done_anything_assign = true;
//                    };
//                };
//
//                autopush_string(&(buffer), &(buffer_index), "add rsp, ");
//                autopush_whole_8(&(buffer), &(buffer_index), size);
//                autopush_string_with_newline(&(buffer), &(buffer_index), "");
//            };
//
//            if =(variable_type, 0) {
//                variable global_name = brk_allocate(whole_8+(length(variable_name), 2));
//                copy("_", global_name, 1);
//                copy(variable_name, @cast_*(+(global_name, 1)), length(variable_name));
//
//                variable_type = autostringarraymap_get(&(globals), &(global_types), variable_name, global_index);
//                variable size = get_size_linux_x86-64(variable_type, nodes, node_count);
//
//                variable j = 0;
//                while <(j, size) {
//                    variable done_anything_assign = false;
//
//                    if >(-(size, j), 7) {
//                        autopush_string(&(buffer), &(buffer_index), "mov rax, [rsp+");
//                        autopush_whole_8(&(buffer), &(buffer_index), j);
//                        autopush_string_with_newline(&(buffer), &(buffer_index), "]");
//
//                        autopush_string(&(buffer), &(buffer_index), "mov [");
//                        autopush_string(&(buffer), &(buffer_index), global_name);
//                        autopush_string(&(buffer), &(buffer_index), "+");
//                        autopush_whole_8(&(buffer), &(buffer_index), j);
//                        autopush_string_with_newline(&(buffer), &(buffer_index), "], rax");
//
//                        j = whole_8+(j, 8);
//                        done_anything_assign = true;
//                    };
//                    if &&(>(-(size, j), 3), !(done_anything_assign)) {
//                        autopush_string(&(buffer), &(buffer_index), "mov eax, [rsp+");
//                        autopush_whole_8(&(buffer), &(buffer_index), j);
//                        autopush_string_with_newline(&(buffer), &(buffer_index), "]");
//
//                        autopush_string(&(buffer), &(buffer_index), "mov [");
//                        autopush_string(&(buffer), &(buffer_index), global_name);
//                        autopush_string(&(buffer), &(buffer_index), "+");
//                        autopush_whole_8(&(buffer), &(buffer_index), j);
//                        autopush_string_with_newline(&(buffer), &(buffer_index), "], eax");
//
//                        j = whole_8+(j, 4);
//                        done_anything_assign = true;
//                    };
//                    if &&(>(-(size, j), 1), !(done_anything_assign)) {
//                        autopush_string(&(buffer), &(buffer_index), "mov ax, [rsp+");
//                        autopush_whole_8(&(buffer), &(buffer_index), j);
//                        autopush_string_with_newline(&(buffer), &(buffer_index), "]");
//
//                        autopush_string(&(buffer), &(buffer_index), "mov [");
//                        autopush_string(&(buffer), &(buffer_index), global_name);
//                        autopush_string(&(buffer), &(buffer_index), "+");
//                        autopush_whole_8(&(buffer), &(buffer_index), j);
//                        autopush_string_with_newline(&(buffer), &(buffer_index), "], ax");
//
//                        j = whole_8+(j, 2);
//                        done_anything_assign = true;
//                    };
//                    if &&(>(-(size, j), 0), !(done_anything_assign)) {
//                        autopush_string(&(buffer), &(buffer_index), "mov al, [rsp+");
//                        autopush_whole_8(&(buffer), &(buffer_index), j);
//                        autopush_string_with_newline(&(buffer), &(buffer_index), "]");
//
//                        autopush_string(&(buffer), &(buffer_index), "mov [");
//                        autopush_string(&(buffer), &(buffer_index), global_name);
//                        autopush_string(&(buffer), &(buffer_index), "+");
//                        autopush_whole_8(&(buffer), &(buffer_index), j);
//                        autopush_string_with_newline(&(buffer), &(buffer_index), "], al");
//
//                        j = whole_8+(j, 1);
//                        done_anything_assign = true;
//                    };
//                };
//
//
//                autopush_string(&(buffer), &(buffer_index), "add rsp, ");
//                autopush_whole_8(&(buffer), &(buffer_index), size);
//                autopush_string_with_newline(&(buffer), &(buffer_index), "");
//            };
//
//            done_anything = true;
//        };
//
//        if =(id, NODE_RETRIEVE) {
//            variable next_id = nodes_get_id(nodes, whole_8+(i, 1));
//
//            variable variable_name = NodeRetrieveData->name(@cast_*NodeRetrieveData(nodes_get_pointer_data(nodes, i)));
//            variable variable_type = autostringarraymap_get(&(variable_names), &(variable_types), variable_name, variable_index);
//            if !(=(variable_type, 0)) {
//                variable size = get_size_linux_x86-64(variable_type, nodes, node_count);
//                variable variable_index_thing = autostringarraymap_get_index(&(variable_names), variable_name, variable_index);
//                variable location = 0;
//                variable j = 0;
//                while <(j, variable_index_thing) {
//                    location = @cast_whole_8(+(location, autoarray8_get(&(variable_sizes), j)));
//                    j = whole_8+(j, 1);
//                };
//
//                variable is_pointer = false;
//                if =(next_id, NODE_POINTER) {
//                    autopush_string(&(buffer), &(buffer_index), "lea rax, [rbp-");
//                    autopush_whole_8(&(buffer), &(buffer_index), whole_8+(size, location));
//                    autopush_string_with_newline(&(buffer), &(buffer_index), "]");
//                    autopush_string_with_newline(&(buffer), &(buffer_index), "push rax");
//
//                    is_pointer = true;
//                };
//
//                if !(is_pointer) {
//                    autopush_string(&(buffer), &(buffer_index), "sub rsp, ");
//                    autopush_whole_8(&(buffer), &(buffer_index), size);
//                    autopush_string_with_newline(&(buffer), &(buffer_index), "");
//
//                    variable j = 0;
//                    while <(j, size) {
//                        variable done_anything_assign = false;
//
//                        if >(-(size, j), 7) {
//                            autopush_string(&(buffer), &(buffer_index), "mov rax, [rbp-");
//                            autopush_whole_8(&(buffer), &(buffer_index), @cast_whole_8(-(+(size, location), j)));
//                            autopush_string_with_newline(&(buffer), &(buffer_index), "]");
//
//                            autopush_string(&(buffer), &(buffer_index), "mov [rsp+");
//                            autopush_whole_8(&(buffer), &(buffer_index), j);
//                            autopush_string_with_newline(&(buffer), &(buffer_index), "], rax");
//
//                            j = whole_8+(j, 8);
//                            done_anything_assign = true;
//                        };
//                        if &&(>(-(size, j), 3), !(done_anything_assign)) {
//                            autopush_string(&(buffer), &(buffer_index), "mov eax, [rbp-");
//                            autopush_whole_8(&(buffer), &(buffer_index), @cast_whole_8(-(+(size, location), j)));
//                            autopush_string_with_newline(&(buffer), &(buffer_index), "]");
//
//                            autopush_string(&(buffer), &(buffer_index), "mov [rsp+");
//                            autopush_whole_8(&(buffer), &(buffer_index), j);
//                            autopush_string_with_newline(&(buffer), &(buffer_index), "], eax");
//
//                            j = whole_8+(j, 4);
//                            done_anything_assign = true;
//                        };
//                        if &&(>(-(size, j), 1), !(done_anything_assign)) {
//                            autopush_string(&(buffer), &(buffer_index), "mov ax, [rbp-");
//                            autopush_whole_8(&(buffer), &(buffer_index), @cast_whole_8(-(+(size, location), j)));
//                            autopush_string_with_newline(&(buffer), &(buffer_index), "]");
//
//                            autopush_string(&(buffer), &(buffer_index), "mov [rsp+");
//                            autopush_whole_8(&(buffer), &(buffer_index), j);
//                            autopush_string_with_newline(&(buffer), &(buffer_index), "], ax");
//
//                            j = whole_8+(j, 2);
//                            done_anything_assign = true;
//                        };
//                        if &&(>(-(size, j), 0), !(done_anything_assign)) {
//                            autopush_string(&(buffer), &(buffer_index), "mov al, [rbp-");
//                            autopush_whole_8(&(buffer), &(buffer_index), @cast_whole_8(-(+(size, location), j)));
//                            autopush_string_with_newline(&(buffer), &(buffer_index), "]");
//
//                            autopush_string(&(buffer), &(buffer_index), "mov [rsp+");
//                            autopush_whole_8(&(buffer), &(buffer_index), j);
//                            autopush_string_with_newline(&(buffer), &(buffer_index), "], al");
//
//                            j = whole_8+(j, 1);
//                            done_anything_assign = true;
//                        };
//                    };
//                };
//
//            };
//            
//            if =(variable_type, 0) {
//                variable function_argument_names2 = autostringarraymap_get(&(functions), &(function_argument_names), current_function, index);
//                variable function_arguments2 = autostringarraymap_get(&(functions), &(function_arguments), current_function, index);
//
//                variable_type = stringarraymap_get(function_argument_names2, function_arguments2, variable_name, array8_length(function_arguments2));
//
//                if !(=(variable_type, 0)) {
//                    variable size = get_size_linux_x86-64(variable_type, nodes, node_count);
//                    variable location = get_size_multiple_reversed_linux_x86-64(function_arguments2, stringarraymap_get_index(function_argument_names2, variable_name, array8_length(function_argument_names2)), nodes, node_count);
//
//                    variable is_pointer = false;
//                    if =(next_id, NODE_POINTER) {
//                        autopush_string(&(buffer), &(buffer_index), "lea rax, [rbp+");
//                        autopush_whole_8(&(buffer), &(buffer_index), whole_8+(16, location));
//                        autopush_string_with_newline(&(buffer), &(buffer_index), "]");
//                        autopush_string_with_newline(&(buffer), &(buffer_index), "push rax");
//
//                        is_pointer = true;
//                    };
//
//                    if !(is_pointer) {
//                        autopush_string(&(buffer), &(buffer_index), "sub rsp, ");
//                        autopush_whole_8(&(buffer), &(buffer_index), size);
//                        autopush_string_with_newline(&(buffer), &(buffer_index), "");
//
//                        variable j = 0;
//                        while <(j, size) {
//                            variable done_anything_assign = false;
//                            if >(-(size, j), 7) {
//                                autopush_string(&(buffer), &(buffer_index), "mov rax, [rbp+");
//                                autopush_whole_8(&(buffer), &(buffer_index), @cast_whole_8(+(+(16, location), j)));
//                                autopush_string_with_newline(&(buffer), &(buffer_index), "]");
//
//                                autopush_string(&(buffer), &(buffer_index), "mov [rsp+");
//                                autopush_whole_8(&(buffer), &(buffer_index), j);
//                                autopush_string_with_newline(&(buffer), &(buffer_index), "], rax");
//
//                                j = whole_8+(j, 8);
//                                done_anything_assign = true;
//                            };
//                            if &&(>(-(size, j), 3), !(done_anything_assign)) {
//                                autopush_string(&(buffer), &(buffer_index), "mov eax, [rbp+");
//                                autopush_whole_8(&(buffer), &(buffer_index), @cast_whole_8(+(+(16, location), j)));
//                                autopush_string_with_newline(&(buffer), &(buffer_index), "]");
//
//                                autopush_string(&(buffer), &(buffer_index), "mov [rsp+");
//                                autopush_whole_8(&(buffer), &(buffer_index), j);
//                                autopush_string_with_newline(&(buffer), &(buffer_index), "], eax");
//
//                                j = whole_8+(j, 4);
//                                done_anything_assign = true;
//                            };
//                            if &&(>(-(size, j), 1), !(done_anything_assign)) {
//                                autopush_string(&(buffer), &(buffer_index), "mov ax, [rbp+");
//                                autopush_whole_8(&(buffer), &(buffer_index), @cast_whole_8(+(+(16, location), j)));
//                                autopush_string_with_newline(&(buffer), &(buffer_index), "]");
//
//                                autopush_string(&(buffer), &(buffer_index), "mov [rsp+");
//                                autopush_whole_8(&(buffer), &(buffer_index), j);
//                                autopush_string_with_newline(&(buffer), &(buffer_index), "], ax");
//
//                                j = whole_8+(j, 2);
//                                done_anything_assign = true;
//                            };
//                            if &&(>(-(size, j), 0), !(done_anything_assign)) {
//                                autopush_string(&(buffer), &(buffer_index), "mov al, [rbp+");
//                                autopush_whole_8(&(buffer), &(buffer_index), @cast_whole_8(+(+(16, location), j)));
//                                autopush_string_with_newline(&(buffer), &(buffer_index), "]");
//
//                                autopush_string(&(buffer), &(buffer_index), "mov [rsp+");
//                                autopush_whole_8(&(buffer), &(buffer_index), j);
//                                autopush_string_with_newline(&(buffer), &(buffer_index), "], al");
//
//                                j = whole_8+(j, 1);
//                                done_anything_assign = true;
//                            };
//                        };
//                    };
//                };
//
//                if =(variable_type, 0) {
//                    variable_type = autostringarraymap_get(&(globals), &(global_types), variable_name, global_index);
//
//                    if !(=(variable_type, 0)) {
//                        variable global_name = brk_allocate(whole_8+(length(variable_name), 2));
//                        copy("_", global_name, 1);
//                        copy(variable_name, @cast_*(+(global_name, 1)), length(variable_name));
//
//                        variable size = get_size_linux_x86-64(variable_type, nodes, node_count);
//
//                        variable is_pointer = false;
//                        if =(next_id, NODE_POINTER) {
//                            autopush_string(&(buffer), &(buffer_index), "lea rax, [");
//                            autopush_string(&(buffer), &(buffer_index), global_name);
//                            autopush_string_with_newline(&(buffer), &(buffer_index), "]");
//                            autopush_string_with_newline(&(buffer), &(buffer_index), "push rax");
//
//                            is_pointer = true;
//                        };
//
//                        if !(is_pointer) {
//                            autopush_string(&(buffer), &(buffer_index), "sub rsp, ");
//                            autopush_whole_8(&(buffer), &(buffer_index), size);
//                            autopush_string_with_newline(&(buffer), &(buffer_index), "");
//
//                            variable j = 0;
//                            while <(j, size) {
//                                if >(-(size, j), 7) {
//                                    autopush_string(&(buffer), &(buffer_index), "mov rax, [");
//                                    autopush_string(&(buffer), &(buffer_index), global_name);
//                                    autopush_string(&(buffer), &(buffer_index), "+");
//                                    autopush_whole_8(&(buffer), &(buffer_index), j);
//                                    autopush_string_with_newline(&(buffer), &(buffer_index), "]");
//
//                                    autopush_string(&(buffer), &(buffer_index), "mov [rsp+");
//                                    autopush_whole_8(&(buffer), &(buffer_index), j);
//                                    autopush_string_with_newline(&(buffer), &(buffer_index), "], rax");
//
//                                    j = whole_8+(j, 8);
//                                    done_anything_assign = true;
//                                };
//                                if &&(>(-(size, j), 3), !(done_anything_assign)) {
//                                    autopush_string(&(buffer), &(buffer_index), "mov eax, [");
//                                    autopush_string(&(buffer), &(buffer_index), global_name);
//                                    autopush_string(&(buffer), &(buffer_index), "+");
//                                    autopush_whole_8(&(buffer), &(buffer_index), j);
//                                    autopush_string_with_newline(&(buffer), &(buffer_index), "]");
//
//                                    autopush_string(&(buffer), &(buffer_index), "mov [rsp+");
//                                    autopush_whole_8(&(buffer), &(buffer_index), j);
//                                    autopush_string_with_newline(&(buffer), &(buffer_index), "], eax");
//
//                                    j = whole_8+(j, 4);
//                                    done_anything_assign = true;
//                                };
//                                if &&(>(-(size, j), 1), !(done_anything_assign)) {
//                                    autopush_string(&(buffer), &(buffer_index), "mov ax, [");
//                                    autopush_string(&(buffer), &(buffer_index), global_name);
//                                    autopush_string(&(buffer), &(buffer_index), "+");
//                                    autopush_whole_8(&(buffer), &(buffer_index), j);
//                                    autopush_string_with_newline(&(buffer), &(buffer_index), "]");
//
//                                    autopush_string(&(buffer), &(buffer_index), "mov [rsp+");
//                                    autopush_whole_8(&(buffer), &(buffer_index), j);
//                                    autopush_string_with_newline(&(buffer), &(buffer_index), "], ax");
//
//                                    j = whole_8+(j, 2);
//                                    done_anything_assign = true;
//                                };
//                                if &&(>(-(size, j), 0), !(done_anything_assign)) {
//                                    autopush_string(&(buffer), &(buffer_index), "mov al, [");
//                                    autopush_string(&(buffer), &(buffer_index), global_name);
//                                    autopush_string(&(buffer), &(buffer_index), "+");
//                                    autopush_whole_8(&(buffer), &(buffer_index), j);
//                                    autopush_string_with_newline(&(buffer), &(buffer_index), "]");
//
//                                    autopush_string(&(buffer), &(buffer_index), "mov [rsp+");
//                                    autopush_whole_8(&(buffer), &(buffer_index), j);
//                                    autopush_string_with_newline(&(buffer), &(buffer_index), "], al");
//
//                                    j = whole_8+(j, 1);
//                                    done_anything_assign = true;
//                                };
//                            };
//                        };
//                    };
//
//                    if =(variable_type, 0) {
//                        variable_type = autostringarraymap_get(&(constants), &(constant_types), variable_name, constant_index);
//
//                        variable constant_name = brk_allocate(whole_8+(length(variable_name), 2));
//                        copy("_", constant_name, 1);
//                        copy(variable_name, @cast_*(+(constant_name, 1)), length(variable_name));
//
//                        variable size = get_size_linux_x86-64(variable_type, nodes, node_count);
//
//                        variable is_pointer = false;
//                        if =(next_id, NODE_POINTER) {
//                            autopush_string(&(buffer), &(buffer_index), "lea rax, [");
//                            autopush_string(&(buffer), &(buffer_index), constant_name);
//                            autopush_string_with_newline(&(buffer), &(buffer_index), "]");
//                            autopush_string_with_newline(&(buffer), &(buffer_index), "push rax");
//
//                            is_pointer = true;
//                        };
//
//                        if !(is_pointer) {
//                            autopush_string(&(buffer), &(buffer_index), "sub rsp, ");
//                            autopush_whole_8(&(buffer), &(buffer_index), size);
//                            autopush_string_with_newline(&(buffer), &(buffer_index), "");
//
//                            variable j = 0;
//                            while <(j, size) {
//                                variable done_anything_assign = false;
//                                if >(-(size, j), 7) {
//                                    autopush_string(&(buffer), &(buffer_index), "mov rax, [");
//                                    autopush_string(&(buffer), &(buffer_index), constant_name);
//                                    autopush_string(&(buffer), &(buffer_index), "+");
//                                    autopush_whole_8(&(buffer), &(buffer_index), j);
//                                    autopush_string_with_newline(&(buffer), &(buffer_index), "]");
//
//                                    autopush_string(&(buffer), &(buffer_index), "mov [rsp+");
//                                    autopush_whole_8(&(buffer), &(buffer_index), j);
//                                    autopush_string_with_newline(&(buffer), &(buffer_index), "], rax");
//
//                                    j = whole_8+(j, 8);
//                                    done_anything_assign = true;
//                                };
//                                if &&(>(-(size, j), 3), !(done_anything_assign)) {
//                                    autopush_string(&(buffer), &(buffer_index), "mov eax, [");
//                                    autopush_string(&(buffer), &(buffer_index), constant_name);
//                                    autopush_string(&(buffer), &(buffer_index), "+");
//                                    autopush_whole_8(&(buffer), &(buffer_index), j);
//                                    autopush_string_with_newline(&(buffer), &(buffer_index), "]");
//
//                                    autopush_string(&(buffer), &(buffer_index), "mov [rsp+");
//                                    autopush_whole_8(&(buffer), &(buffer_index), j);
//                                    autopush_string_with_newline(&(buffer), &(buffer_index), "], eax");
//
//                                    j = whole_8+(j, 4);
//                                    done_anything_assign = true;
//                                };
//                                if &&(>(-(size, j), 1), !(done_anything_assign)) {
//                                    autopush_string(&(buffer), &(buffer_index), "mov ax, [");
//                                    autopush_string(&(buffer), &(buffer_index), constant_name);
//                                    autopush_string(&(buffer), &(buffer_index), "+");
//                                    autopush_whole_8(&(buffer), &(buffer_index), j);
//                                    autopush_string_with_newline(&(buffer), &(buffer_index), "]");
//
//                                    autopush_string(&(buffer), &(buffer_index), "mov [rsp+");
//                                    autopush_whole_8(&(buffer), &(buffer_index), j);
//                                    autopush_string_with_newline(&(buffer), &(buffer_index), "], ax");
//
//                                    j = whole_8+(j, 2);
//                                    done_anything_assign = true;
//                                };
//                                if &&(>(-(size, j), 0), !(done_anything_assign)) {
//                                    autopush_string(&(buffer), &(buffer_index), "mov al, [");
//                                    autopush_string(&(buffer), &(buffer_index), constant_name);
//                                    autopush_string(&(buffer), &(buffer_index), "+");
//                                    autopush_whole_8(&(buffer), &(buffer_index), j);
//                                    autopush_string_with_newline(&(buffer), &(buffer_index), "]");
//
//                                    autopush_string(&(buffer), &(buffer_index), "mov [rsp+");
//                                    autopush_whole_8(&(buffer), &(buffer_index), j);
//                                    autopush_string_with_newline(&(buffer), &(buffer_index), "], al");
//
//                                    j = whole_8+(j, 1);
//                                    done_anything_assign = true;
//                                };
//                            };
//                        };
//                    };
//
//                };
//                
//            };
//
//            done_anything = true;
//        };
//
//        if =(id, NODE_RETURN) {
//            variable arguments_size = get_size_multiple_linux_x86-64(autostringarraymap_get(&(functions), &(function_arguments), current_function, index), 999, nodes, node_count);
//            variable returns_size = get_size_multiple_linux_x86-64(autostringarraymap_get(&(functions), &(function_returns), current_function, index), 999, nodes, node_count);
//            variable returns_size_rounded = returns_size;
//            if !(=(%(returns_size_rounded, 8), 0)) {
//                returns_size_rounded = whole_8+(returns_size_rounded, @cast_whole_8(-(8, %(returns_size, 8))));
//            };
//
//            variable j = 8;
//            variable k = whole_8+(returns_size, 8);
//
//            autopush_string_with_newline(&(buffer), &(buffer_index), "mov rcx, [rbp+8]");
//            autopush_string_with_newline(&(buffer), &(buffer_index), "mov rdx, [rbp]");
//
//            returns_size = whole_8+(returns_size, 8);
//
//            while <(j, returns_size) {
//                variable done_anything_assign = false;
//
//                if >(-(returns_size, j), 7) {
//                    k = @cast_whole_8(-(k, 8));
//                    autopush_string(&(buffer), &(buffer_index), "mov rax, [rsp+");
//                    autopush_whole_8(&(buffer), &(buffer_index), @cast_whole_8(-(-(returns_size, j), 8)));
//                    autopush_string_with_newline(&(buffer), &(buffer_index), "]");
//
//                    if >(+(+(24, -(-(arguments_size, returns_size), j)), returns_size_rounded), 999) {
//                        autopush_string(&(buffer), &(buffer_index), "mov [rbp-");
//                        autopush_whole_8(&(buffer), &(buffer_index), @cast_whole_8(-(0, +(+(16, +(-(arguments_size, returns_size), k)), 0))));
//                        done_anything_assign = true;
//                    };
//
//                    if !(done_anything_assign) {
//                        autopush_string(&(buffer), &(buffer_index), "mov [rbp+");
//                        autopush_whole_8(&(buffer), &(buffer_index), @cast_whole_8(+(+(16, +(-(arguments_size, returns_size), k)), 0)));
//                        done_anything_assign = true;
//                    };
//                    autopush_string_with_newline(&(buffer), &(buffer_index), "], rax");
//
//                    j = whole_8+(j, 8);
//                };
//                if &&(>(-(returns_size, j), 3), !(done_anything_assign)) {
//                    k = @cast_whole_8(-(k, 4));
//                    autopush_string(&(buffer), &(buffer_index), "mov eax, [rsp+");
//                    autopush_whole_8(&(buffer), &(buffer_index), @cast_whole_8(-(-(returns_size, j), 4)));
//                    autopush_string_with_newline(&(buffer), &(buffer_index), "]");
//
//                    if >(+(+(24, -(-(arguments_size, returns_size), j)), returns_size_rounded), 999) {
//                        autopush_string(&(buffer), &(buffer_index), "mov [rbp-");
//                        autopush_whole_8(&(buffer), &(buffer_index), @cast_whole_8(-(0, +(+(16, +(-(arguments_size, returns_size), k)), 0))));
//                        done_anything_assign = true;
//                    };
//
//                    if !(done_anything_assign) {
//                        autopush_string(&(buffer), &(buffer_index), "mov [rbp+");
//                        autopush_whole_8(&(buffer), &(buffer_index), @cast_whole_8(+(+(16, +(-(arguments_size, returns_size), k)), 0)));
//                        done_anything_assign = true;
//                    };
//
//                    autopush_string_with_newline(&(buffer), &(buffer_index), "], eax");
//
//                    j = whole_8+(j, 4);
//                };
//                if &&(>(-(returns_size, j), 1), !(done_anything_assign)) {
//                    k = @cast_whole_8(-(k, 2));
//                    autopush_string(&(buffer), &(buffer_index), "mov ax, [rsp+");
//                    autopush_whole_8(&(buffer), &(buffer_index), @cast_whole_8(-(-(returns_size, j), 2)));
//                    autopush_string_with_newline(&(buffer), &(buffer_index), "]");
//
//                    if >(+(+(24, -(-(arguments_size, returns_size), j)), returns_size_rounded), 999) {
//                        autopush_string(&(buffer), &(buffer_index), "mov [rbp-");
//                        autopush_whole_8(&(buffer), &(buffer_index), @cast_whole_8(-(0, +(+(16, +(-(arguments_size, returns_size), k)), 0))));
//                        done_anything_assign = true;
//                    };
//
//                    if !(done_anything_assign) {
//                        autopush_string(&(buffer), &(buffer_index), "mov [rbp+");
//                        autopush_whole_8(&(buffer), &(buffer_index), @cast_whole_8(+(+(16, +(-(arguments_size, returns_size), k)), 0)));
//                        done_anything_assign = true;
//                    };
//                    autopush_string_with_newline(&(buffer), &(buffer_index), "], ax");
//
//                    j = whole_8+(j, 2);
//                };
//                if &&(>(-(returns_size, j), 0), !(done_anything_assign)) {
//                    k = @cast_whole_8(-(k, 1));
//                    autopush_string(&(buffer), &(buffer_index), "mov al, [rsp+");
//                    autopush_whole_8(&(buffer), &(buffer_index), @cast_whole_8(-(-(returns_size, j), 1)));
//                    autopush_string_with_newline(&(buffer), &(buffer_index), "]");
//
//                    if >(+(+(24, -(-(arguments_size, returns_size), j)), returns_size_rounded), 999) {
//                        autopush_string(&(buffer), &(buffer_index), "mov [rbp-");
//                        autopush_whole_8(&(buffer), &(buffer_index), @cast_whole_8(-(0, +(+(16, +(-(arguments_size, returns_size), k)), 0))));
//                        done_anything_assign = true;
//                    };
//
//                    if !(done_anything_assign) {
//                        autopush_string(&(buffer), &(buffer_index), "mov [rbp+");
//                        autopush_whole_8(&(buffer), &(buffer_index), @cast_whole_8(+(+(16, +(-(arguments_size, returns_size), k)), 0)));
//                        done_anything_assign = true;
//                    };
//                    autopush_string_with_newline(&(buffer), &(buffer_index), "], al");
//
//                    j = whole_8+(j, 1);
//                };
//            };
//
//            autopush_string_with_newline(&(buffer), &(buffer_index), "mov rsp, rbp");
//
//            variable done_anything_post_assign = false;
//            if >(+(16, -(arguments_size, returns_size)), 999) {
//                autopush_string(&(buffer), &(buffer_index), "sub rsp, ");
//                autopush_whole_8(&(buffer), &(buffer_index), @cast_whole_8(-(0, +(+(16, +(-(arguments_size, returns_size), k)), 0))));
//                done_anything_post_assign = true;
//            };
//
//            if !(done_anything_post_assign) {
//                autopush_string(&(buffer), &(buffer_index), "add rsp, ");
//                autopush_whole_8(&(buffer), &(buffer_index), @cast_whole_8(+(+(16, +(-(arguments_size, returns_size), k)), 0)));
//            };
//
//            returns_size = @cast_whole_8(-(returns_size, 8));
//
//            autopush_string_with_newline(&(buffer), &(buffer_index), "");
//            autopush_string_with_newline(&(buffer), &(buffer_index), "push rdx");
//            autopush_string_with_newline(&(buffer), &(buffer_index), "pop rbp");
//            autopush_string_with_newline(&(buffer), &(buffer_index), "push rcx");
//            autopush_string_with_newline(&(buffer), &(buffer_index), "ret");
//                
//            done_anything = true;
//        };
//
//        if =(id, NODE_POINTER) {
//            done_anything = true;
//        };
//
//        if =(id, NODE_JUMP_CONDITIONAL) {
//            variable jump_conditional_data = @cast_*NodeJumpConditionalData(pointer_data);
//            variable target = NodeJumpConditionalData->target_id(jump_conditional_data);
//            variable conditional = NodeJumpConditionalData->desired_state(jump_conditional_data);
//            autopush_string_with_newline(&(buffer), &(buffer_index), "mov al, [rsp]");
//            autopush_string_with_newline(&(buffer), &(buffer_index), "add rsp, 1");
//
//            if @cast_boolean(conditional) {
//                autopush_string_with_newline(&(buffer), &(buffer_index), "cmp al, 1");
//                done_anything = true;
//            };
//
//            if !(done_anything) {
//                autopush_string_with_newline(&(buffer), &(buffer_index), "cmp al, 0");
//                done_anything = true;
//            };
//
//            autopush_string(&(buffer), &(buffer_index), "je target_");
//            autopush_whole_8(&(buffer), &(buffer_index), target);
//            autopush_string_with_newline(&(buffer), &(buffer_index), "");
//        };
//
//        if =(id, NODE_JUMP) {
//            variable jump_data = @cast_*NodeJumpData(pointer_data);
//            variable target = NodeJumpData->target_id(jump_data);
//
//            autopush_string(&(buffer), &(buffer_index), "jmp target_");
//            autopush_whole_8(&(buffer), &(buffer_index), target);
//            autopush_string_with_newline(&(buffer), &(buffer_index), "");
//
//            done_anything = true;
//        };
//
//        if =(id, NODE_TARGET) {
//            variable target_data = @cast_*NodeTargetData(pointer_data);
//            variable target = NodeTargetData->id(target_data);
//            autopush_string(&(buffer), &(buffer_index), "target_");
//            autopush_whole_8(&(buffer), &(buffer_index), target);
//            autopush_string_with_newline(&(buffer), &(buffer_index), ":");
//
//            done_anything = true;
//        };
//
//        if =(id, NODE_ENDFUNCTION) {
//            done_anything = true;
//        };
//
//        if =(id, NODE_STRUCTURE) {
//            done_anything = true;
//        };
//
//        if =(id, NODE_GLOBAL) {
//            variable global_data = @cast_*NodeGlobalData(pointer_data);
//            variable name2 = NodeGlobalData->name(global_data);
//            variable type = NodeGlobalData->type(global_data);
//            variable global_name = brk_allocate(whole_8+(length(name2), 2));
//            copy("_", global_name, 1);
//            copy(name2, @cast_*(+(global_name, 1)), length(name2));
//            
//            variable size = get_size_linux_x86-64(type, nodes, node_count);
//
//            autopush_string(&(bss_buffer), &(bss_buffer_index), global_name);
//            autopush_string(&(bss_buffer), &(bss_buffer_index), ": rb ");
//            autopush_whole_8(&(bss_buffer), &(bss_buffer_index), size);
//            autopush_string_with_newline(&(bss_buffer), &(bss_buffer_index), "");
//            
//            done_anything = true;
//        };
//
//        if =(id, NODE_CONSTANT) {
//            variable constant_data = @cast_*NodeConstantData(pointer_data);
//            variable name3 = NodeConstantData->name(constant_data);
//            variable type2 = NodeConstantData->type(constant_data);
//            //TODO: reassigning locals should warn
//            variable value2 = NodeConstantData->value(constant_data);
//
//            variable constant_name = brk_allocate(whole_8+(length(name3), 2));
//            copy("_", constant_name, 1);
//            copy(name3, @cast_*(+(constant_name, 1)), length(name3));
//            
//            autopush_string(&(data_buffer), &(data_buffer_index), constant_name);
//            autopush_string(&(data_buffer), &(data_buffer_index), ": dq ");
//            autopush_whole_8(&(data_buffer), &(data_buffer_index), @cast_whole_8(value2));
//            autopush_string_with_newline(&(data_buffer), &(data_buffer_index), "");
//            
//            done_anything = true;
//        };
//
//        if =(id, NODE_ZERO) {
//            variable zero_data = @cast_*NodeZeroData(pointer_data);
//            variable type2 = NodeZeroData->type(zero_data);
//
//            variable size = get_size_linux_x86-64(type2, nodes, node_count);
//
//            autopush_string(&(buffer), &(buffer_index), "sub rsp, ");
//            autopush_whole_8(&(buffer), &(buffer_index), size);
//            autopush_string_with_newline(&(buffer), &(buffer_index), "");
//
//            variable j = 0;
//            while <(j, size) {
//                variable done_anything_assign = false;
//
//                if >(-(size, j), 7) {
//                    autopush_string_with_newline(&(buffer), &(buffer_index), "mov rax, 0");
//
//                    autopush_string(&(buffer), &(buffer_index), "mov [rsp+");
//                    autopush_whole_8(&(buffer), &(buffer_index), j);
//                    autopush_string_with_newline(&(buffer), &(buffer_index), "], rax");
//
//                    j = whole_8+(j, 8);
//                    done_anything_assign = true;
//                };
//                if &&(>(-(size, j), 3), !(done_anything_assign)) {
//                    autopush_string(&(buffer), &(buffer_index), "mov [rsp+");
//                    autopush_whole_8(&(buffer), &(buffer_index), j);
//                    autopush_string_with_newline(&(buffer), &(buffer_index), "], dword 0");
//
//                    j = whole_8+(j, 4);
//                    done_anything_assign = true;
//                };
//                if &&(>(-(size, j), 1), !(done_anything_assign)) {
//                    autopush_string(&(buffer), &(buffer_index), "mov [rsp+");
//                    autopush_whole_8(&(buffer), &(buffer_index), j);
//                    autopush_string_with_newline(&(buffer), &(buffer_index), "], word 0");
//
//                    j = whole_8+(j, 2);
//                    done_anything_assign = true;
//                };
//                if &&(>(-(size, j), 0), !(done_anything_assign)) {
//                    autopush_string(&(buffer), &(buffer_index), "mov [rsp+");
//                    autopush_whole_8(&(buffer), &(buffer_index), j);
//                    autopush_string_with_newline(&(buffer), &(buffer_index), "], byte 0");
//
//                    j = whole_8+(j, 1);
//                    done_anything_assign = true;
//                };
//            };
//
//            done_anything = true;
//        };
//        if =(id, NODE_INCLUDE) {
//            done_anything = true;
//        };
//
//        if !(done_anything) {
//            print("Unhandled ");
//            @print_integer(id);
//        };
//
//        i = @cast_whole_8(+(i, 1));
//    };
//
//    autopush_string_with_newline(&(buffer), &(buffer_index), "@print_integer:");
//    autopush_string_with_newline(&(buffer), &(buffer_index), "pop rsi");
//    autopush_string_with_newline(&(buffer), &(buffer_index), "pop rdi");
//    autopush_string_with_newline(&(buffer), &(buffer_index), "push rdi");
//    autopush_string_with_newline(&(buffer), &(buffer_index), "push rsi");
//    autopush_string_with_newline(&(buffer), &(buffer_index), "mov r9, -3689348814741910323");
//    autopush_string_with_newline(&(buffer), &(buffer_index), "sub rsp, 40");
//    autopush_string_with_newline(&(buffer), &(buffer_index), "mov BYTE [rsp+31], 10");
//    autopush_string_with_newline(&(buffer), &(buffer_index), "lea rcx, [rsp+30]");
//    autopush_string_with_newline(&(buffer), &(buffer_index), ".L2:");
//    autopush_string_with_newline(&(buffer), &(buffer_index), "mov rax, rdi");
//    autopush_string_with_newline(&(buffer), &(buffer_index), "lea r8, [rsp+32]");
//    autopush_string_with_newline(&(buffer), &(buffer_index), "mul r9");
//    autopush_string_with_newline(&(buffer), &(buffer_index), "mov rax, rdi");
//    autopush_string_with_newline(&(buffer), &(buffer_index), "sub r8, rcx");
//    autopush_string_with_newline(&(buffer), &(buffer_index), "shr rdx, 3");
//    autopush_string_with_newline(&(buffer), &(buffer_index), "lea rsi, [rdx+rdx*4]");
//    autopush_string_with_newline(&(buffer), &(buffer_index), "add rsi, rsi");
//    autopush_string_with_newline(&(buffer), &(buffer_index), "sub rax, rsi");
//    autopush_string_with_newline(&(buffer), &(buffer_index), "add eax, 48");
//    autopush_string_with_newline(&(buffer), &(buffer_index), "mov BYTE [rcx], al");
//    autopush_string_with_newline(&(buffer), &(buffer_index), "mov rax, rdi");
//    autopush_string_with_newline(&(buffer), &(buffer_index), "mov rdi, rdx");
//    autopush_string_with_newline(&(buffer), &(buffer_index), "mov rdx, rcx");
//    autopush_string_with_newline(&(buffer), &(buffer_index), "sub rcx, 1");
//    autopush_string_with_newline(&(buffer), &(buffer_index), "cmp rax, 9");
//    autopush_string_with_newline(&(buffer), &(buffer_index), "ja .L2");
//    autopush_string_with_newline(&(buffer), &(buffer_index), "lea rax, [rsp+32]");
//    autopush_string_with_newline(&(buffer), &(buffer_index), "mov edi, 1");
//    autopush_string_with_newline(&(buffer), &(buffer_index), "sub rdx, rax");
//    autopush_string_with_newline(&(buffer), &(buffer_index), "xor eax, eax");
//    autopush_string_with_newline(&(buffer), &(buffer_index), "lea rsi, [rsp+32+rdx]");
//    autopush_string_with_newline(&(buffer), &(buffer_index), "mov rdx, r8");
//    autopush_string_with_newline(&(buffer), &(buffer_index), "mov rax, 1");
//    autopush_string_with_newline(&(buffer), &(buffer_index), "syscall");
//    autopush_string_with_newline(&(buffer), &(buffer_index), "add rsp, 40");
//    autopush_string_with_newline(&(buffer), &(buffer_index), "pop rax");
//    autopush_string_with_newline(&(buffer), &(buffer_index), "add rsp, 8");
//    autopush_string_with_newline(&(buffer), &(buffer_index), "push rax");
//    autopush_string_with_newline(&(buffer), &(buffer_index), "ret");
//
//    autopush_string_with_newline(&(buffer), &(buffer_index), "segment readable");
//    autopush_string(&(buffer), &(buffer_index), AutoBuffer->buffer(&(data_buffer)));
//
//    autopush_string_with_newline(&(buffer), &(buffer_index), "segment readable writable");
//    autopush_string(&(buffer), &(buffer_index), AutoBuffer->buffer(&(bss_buffer)));
//
//    if =(name, 0) {
//        println("No input files provided!");
//        exit(1);
//    };
//
//    variable name_new = brk_allocate(whole_8-(length(name), 6));
//    copy(name, name_new, whole_8-(length(name), 7));
//
//    variable asm_output = autobuffer_new(32);
//    variable asm_output_length: whole_8 = 0;
//    autopush_string(&(asm_output), &(asm_output_length), "build/");
//    autopush_string(&(asm_output), &(asm_output_length), name_new);
//    autopush_string(&(asm_output), &(asm_output_length), ".asm");
//
//    sys_mkdir("build", 511);
//
//    variable output_directory_index = 0;
//    while !(=(output_directory_index, 999)) {
//        output_directory_index = indexof(name_new, byte(ASCII_SLASH), whole_8+(output_directory_index, 1));
//
//        if !(=(output_directory_index, 999)) {
//            variable directory_new = brk_allocate(whole_8+(output_directory_index, 1));
//            copy(name_new, directory_new, output_directory_index);
//
//            variable asm_output_directory = autobuffer_new(32);
//            variable asm_output_directory_length: whole_8 = 0;
//            autopush_string(&(asm_output_directory), &(asm_output_directory_length), "build/");
//            autopush_string(&(asm_output_directory), &(asm_output_directory_length), directory_new);
//
//            sys_mkdir(AutoBuffer->buffer(&(asm_output_directory)), 511);
//        };
//    };
//
//    variable asm_output_descriptor = sys_open(AutoBuffer->buffer(&(asm_output)), @cast_whole_8(+(+(O_WRONLY, O_CREAT), O_TRUNC)), 388);
//    sys_write(asm_output_descriptor, AutoBuffer->buffer(&(buffer)), length(AutoBuffer->buffer(&(buffer))));
//    sys_close(asm_output_descriptor);
//
//    variable id = sys_fork();
//    if =(id, 0) {
//        // Fine to be fixed size due to a known number of items
//        variable arguments_buffer: any_48;
//
//        array8_set(&(arguments_buffer), 0, "/bin/fasm");
//        array8_set(&(arguments_buffer), 1, AutoBuffer->buffer(&(asm_output)));
//
//        variable binary_output = autobuffer_new(48);
//        variable binary_output_length = 0;
//        autopush_string(&(binary_output), &(binary_output_length), "build/");
//        autopush_string(&(binary_output), &(binary_output_length), name_new);
//
//        array8_set(&(arguments_buffer), 2, AutoBuffer->buffer(&(binary_output)));
//        array8_set(&(arguments_buffer), 3, "-m");
//        array8_set(&(arguments_buffer), 4, "131072");
//
//        variable _ = sys_execve("/bin/fasm", &(arguments_buffer), @cast_**(0));
//    };
//
//    variable _2 = @syscall5(247, 1, id, 0, 4, 0);
//};

function output_linux_x86-64_elf(nodes: *AutoBuffer, node_count: whole_8, name: *) {
    variable output = autobuffer_new(512);

    variable file_header = new_elf64_file_header();
    ELF64FileHeader<-format(&(file_header), byte(2));
    ELF64FileHeader<-endianness(&(file_header), byte(1));
    ELF64FileHeader<-abi(&(file_header), byte(3));
    ELF64FileHeader<-object_file_type(&(file_header), whole_8_to_short(2));
    ELF64FileHeader<-machine(&(file_header), whole_8_to_short(62));
    ELF64FileHeader<-entry_point(&(file_header), 4194536);
    ELF64FileHeader<-program_header_table(&(file_header), 64);
    ELF64FileHeader<-program_header_count(&(file_header), whole_8_to_short(3));

    variable data_buffer = autobuffer_new(512);
    variable data_index = 0;

    variable instructions_buffer = autobuffer_new(512);
    variable instructions_index = 0;

    variable data_indexes_to_adjust = autobuffer_new(512);
    variable data_indexes_to_adjust_index = 0;

    variable data_indexes_to_adjust_relative = autobuffer_new(512);
    variable data_indexes_to_adjust_relative_index = 0;

    variable bss_indexes_to_adjust = autobuffer_new(512);
    variable bss_indexes_to_adjust_index = 0;

    variable bss_indexes_to_adjust_relative = autobuffer_new(512);
    variable bss_indexes_to_adjust_relative_index = 0;

    variable buffer = autobuffer_new(8388608);
    variable buffer_index = 0;

    variable data_buffer = autobuffer_new(131072);
    variable data_buffer_index = 0;

    variable bss_index = 0;

    variable bss_buffer = autobuffer_new(131072);
    variable bss_buffer_index = 0;

    autopush_lea_register8_offset_register8(&(instructions_buffer), &(instructions_index), RSP, 8, RAX);
    autopush_mov_register8_register8(&(instructions_buffer), &(instructions_index), RAX, R12);
    autopush_mov_register8_register8(&(instructions_buffer), &(instructions_index), RSP, R13);
    autopush_pop_register8(&(instructions_buffer), &(instructions_index), RBX);
    autopush_mov_register8_register8(&(instructions_buffer), &(instructions_index), RBX, R14);
    autopush_push_register8(&(instructions_buffer), &(instructions_index), RAX);
    autopush_push_register8(&(instructions_buffer), &(instructions_index), RBX);
    variable main_call = autopush_call_near(&(instructions_buffer), &(instructions_index));
    autopush_mov_whole_8_register8(&(instructions_buffer), &(instructions_index), RAX, 60);
    autopush_mov_whole_8_register8(&(instructions_buffer), &(instructions_index), RDI, 0);
    autopush_syscall(&(instructions_buffer), &(instructions_index));

    variable functions = autobuffer_new(512);
    variable function_argument_names = autobuffer_new(512);
    variable function_arguments = autobuffer_new(512);
    variable function_returns = autobuffer_new(512);
    variable function_local_sizes = autobuffer_new(512);
    variable function_locations = autobuffer_new(512);
    variable index = 0;

    variable globals = autobuffer_new(512);
    variable global_types = autobuffer_new(512);
    variable global_locations = autobuffer_new(512);
    variable global_index = 0;

    variable constants = autobuffer_new(512);
    variable constant_types = autobuffer_new(512);
    variable constant_locations = autobuffer_new(512);
    variable constant_index = 0;

    variable memory_functions = autobuffer_new(512);
    variable memory_function_contents = autobuffer_new(512);
    variable memory_function_instructions = autobuffer_new(512);
    variable memory_function_instruction_sizes = autobuffer_new(512);
    variable memory_function_index = 0;

    variable calls = autobuffer_new(512);
    variable call_targets = autobuffer_new(512);
    variable call_index = 0;

    variable targets = autobuffer_new(512);

    variable jmps = autobuffer_new(512);
    variable jmp_targets = autobuffer_new(512);
    variable jmp_index = 0;

    variable jes = autobuffer_new(512);
    variable je_targets = autobuffer_new(512);
    variable je_index = 0;

    variable i = 0;
    while <(i, node_count) {
        variable id = nodes_get_id(nodes, i);
        variable pointer = nodes_get_pointer(nodes, i);
        variable pointer_data = nodes_get_pointer_data(nodes, i);

        if =(id, NODE_FUNCTION) {
            variable function_data = @cast_*NodeFunctionData(pointer_data);
            autoarray8_set(&(functions), index, NodeFunctionData->name(function_data));
            autoarray8_set(&(function_argument_names), index, NodeFunctionData->argument_names(function_data));
            autoarray8_set(&(function_arguments), index, NodeFunctionData->argument_types(function_data));
            autoarray8_set(&(function_returns), index, NodeFunctionData->returns(function_data));

            variable total = 16;
            variable j = i;
            while !(=(nodes_get_id(nodes, j), NODE_ENDFUNCTION)) {
                variable id = nodes_get_id(nodes, j);
                variable pointer = nodes_get_pointer(nodes, j);
                variable pointer_data = nodes_get_pointer_data(nodes, j);
                
                if =(id, NODE_DECLARE) {
                    variable declare_data = @cast_*NodeDeclareData(pointer_data);
                    variable declare_name = NodeDeclareData->name(declare_data);
                    variable declare_type = NodeDeclareData->type(declare_data);
                    total = whole_8+(total, get_size_linux_x86-64(declare_type, nodes, node_count));
                };

                j = whole_8+(j, 1);
            };

            autoarray8_set(&(function_local_sizes), index, total);

            index = whole_8+(index, 1);
        };
        if =(id, NODE_GLOBAL) {
            variable global_data = @cast_*NodeGlobalData(pointer_data);
            variable global_name = NodeGlobalData->name(global_data);
            variable global_type = NodeGlobalData->type(global_data);

            autoarray8_set(&(globals), global_index, global_name);
            autoarray8_set(&(global_types), global_index, global_type);

            variable global_location = bss_index;
            autoarray8_set(&(global_locations), global_index, global_location);

            bss_index = whole_8+(bss_index, get_size_linux_x86-64(global_type, nodes, node_count));

            global_index = whole_8+(global_index, 1);
        };
        if =(id, NODE_CONSTANT) {
            variable constant_data = @cast_*NodeConstantData(pointer_data);
            variable constant_name = NodeConstantData->name(constant_data);
            variable constant_type = NodeConstantData->type(constant_data);

            autoarray8_set(&(constants), constant_index, constant_name);
            autoarray8_set(&(constant_types), constant_index, constant_type);

            variable constant_location = autopush_data_whole_8(&(data_buffer), &(data_buffer_index), @cast_whole_8(NodeConstantData->value(constant_data)));

            autoarray8_set(&(constant_locations), constant_index, constant_location);

            constant_index = whole_8+(constant_index, 1);
        };
        if =(id, NODE_STRUCTURE) {
            variable structure_name = NodeStructureData->name(@cast_*NodeStructureData(nodes_get_pointer_data(nodes, i)));

            // Setter for whole value
            variable allocated = brk_allocate(whole_8+(length(structure_name), 3));
            copy(structure_name, allocated, length(structure_name));
            copy("<-", @cast_*(+(allocated, length(structure_name))), 2);

            autoarray8_set(&(memory_functions), memory_function_index, allocated);

            variable allocated_contents0 = autobuffer_new(8388608);
            variable allocated_contents01 = &(allocated_contents0);
            variable allocated_contents02 = autobuffer_new(8388608);
            variable allocated_contents03 = &(allocated_contents02);
            variable contents_index = 0;
            variable contents_index2 = 0;

            variable size = get_size_linux_x86-64(structure_name, nodes, node_count);

            autopush_add_register8_whole_8(allocated_contents03, &(contents_index2), RSP, size);
            autopush_mov_register8_pointer_offset_register8(allocated_contents03, &(contents_index2), RSP , 0, RAX);
            autopush_sub_register8_whole_8(allocated_contents03, &(contents_index2), RSP, size);

            variable j = 0;
            while <(j, size) {
                variable done_anything_structure = false;

                if >(-(size, j), 7) {
                    autopush_mov_register8_pointer_offset_register8(allocated_contents03, &(contents_index2), RSP, j, RBX);
                    autopush_mov_register8_register8_pointer_offset(allocated_contents03, &(contents_index2), RBX, RAX, j);

                    j = whole_8+(j, 8);
                    done_anything_structure = true;
                };
                if &&(>(-(size, j), 3), !(done_anything_structure)) {
                    autopush_mov_register8_pointer_offset_register4(allocated_contents03, &(contents_index2), RSP, j, EBX);
                    autopush_mov_register4_register8_pointer_offset(allocated_contents03, &(contents_index2), EBX, RAX, j);

                    j = whole_8+(j, 4);
                    done_anything_structure = true;
                };
                if &&(>(-(size, j), 1), !(done_anything_structure)) {
                    autopush_mov_register8_pointer_offset_register2(allocated_contents03, &(contents_index2), RSP, j, BX);
                    autopush_mov_register2_register8_pointer_offset(allocated_contents03, &(contents_index2), BX, RAX, j);

                    j = whole_8+(j, 2);
                    done_anything_structure = true;
                };
                if &&(>(-(size, j), 0), !(done_anything_structure)) {
                    autopush_mov_register8_pointer_offset_register1(allocated_contents03, &(contents_index2), RSP, j, BL);
                    autopush_mov_register1_register8_pointer_offset(allocated_contents03, &(contents_index2), BL, RAX, j);

                    j = whole_8+(j, 1);
                    done_anything_structure = true;
                };
            };

            autopush_add_register8_whole_8(allocated_contents03, &(contents_index2), RSP, whole_8+(size, 8));

            autoarray8_set(&(memory_function_contents), memory_function_index, AutoBuffer->buffer(allocated_contents01));
            autoarray8_set(&(memory_function_instructions), memory_function_index, AutoBuffer->buffer(allocated_contents03));
            autoarray8_set(&(memory_function_instruction_sizes), memory_function_index, contents_index2);

            memory_function_index = whole_8+(memory_function_index, 1);

            // Getter for whole value
            variable allocated = brk_allocate(whole_8+(length(structure_name), 3));
            copy(structure_name, allocated, length(structure_name));
            copy("->", @cast_*(+(allocated, length(structure_name))), 2);

            autoarray8_set(&(memory_functions), memory_function_index, allocated);

            variable allocated_contents1 = autobuffer_new(131072);
            variable allocated_contents11 = &(allocated_contents1);
            variable allocated_contents12 = autobuffer_new(131072);
            variable allocated_contents13 = &(allocated_contents12);
            variable contents_index = 0;
            variable contents_index2 = 0;

            autopush_pop_register8(allocated_contents13, &(contents_index2), RAX);
            autopush_sub_register8_whole_8(allocated_contents13, &(contents_index2), RSP, size);

            variable k = 0;
            while <(k, size) {
                variable done_anything_structure = false;

                if >(-(size, k), 7) {
                    autopush_mov_register8_pointer_offset_register8(allocated_contents13, &(contents_index2), RAX, k, RBX);
                    autopush_mov_register8_register8_pointer_offset(allocated_contents13, &(contents_index2), RBX, RSP, k);

                    k = whole_8+(k, 8);
                    done_anything_structure = true;
                };
                if &&(>(-(size, k), 3), !(done_anything_structure)) {
                    autopush_mov_register8_pointer_offset_register4(allocated_contents13, &(contents_index2), RAX, k, EBX);
                    autopush_mov_register4_register8_pointer_offset(allocated_contents13, &(contents_index2), EBX, RSP, k);

                    k = whole_8+(k, 4);
                    done_anything_structure = true;
                };
                if &&(>(-(size, k), 1), !(done_anything_structure)) {
                    autopush_mov_register8_pointer_offset_register2(allocated_contents13, &(contents_index2), RAX, k, BX);
                    autopush_mov_register2_register8_pointer_offset(allocated_contents13, &(contents_index2), BX, RSP, k);

                    k = whole_8+(k, 2);
                    done_anything_structure = true;
                };
                if &&(>(-(size, k), 0), !(done_anything_structure)) {
                    autopush_mov_register8_pointer_offset_register1(allocated_contents13, &(contents_index2), RAX, k, BL);
                    autopush_mov_register1_register8_pointer_offset(allocated_contents13, &(contents_index2), BL, RSP, k);

                    k = whole_8+(k, 1);
                    done_anything_structure = true;
                };
            };

            autoarray8_set(&(memory_function_contents), memory_function_index, AutoBuffer->buffer(allocated_contents11));
            autoarray8_set(&(memory_function_instructions), memory_function_index, AutoBuffer->buffer(allocated_contents13));
            autoarray8_set(&(memory_function_instruction_sizes), memory_function_index, contents_index2);

            memory_function_index = whole_8+(memory_function_index, 1);

            variable member_names = *->(@cast_**(+(nodes_get_pointer(nodes, i), 16)));
            variable member_types = *->(@cast_**(+(nodes_get_pointer(nodes, i), 24)));

            variable j = 0;
            while !(=(@cast_whole_8(array8_get(member_names, j)), 0)) {
                variable member_name = @cast_*(array8_get(member_names, j));
                variable member_type = @cast_*(array8_get(member_types, j));

                variable location = get_size_multiple_linux_x86-64(member_types, j, nodes, node_count);

                variable allocated = brk_allocate(whole_8+(length(structure_name), whole_8+(length(member_name), 4)));
                copy("*", allocated, 1);
                copy(structure_name, @cast_*(+(allocated, 1)), length(structure_name));
                copy("->", @cast_*(+(+(allocated, length(structure_name)), 1)), 2);
                copy(member_name, @cast_*(+(+(allocated, +(length(structure_name), 2)), 1)), length(member_name));

                autoarray8_set(&(memory_functions), memory_function_index, allocated);

                variable allocated_contents4 = autobuffer_new(131072);
                variable allocated_contents41 = &(allocated_contents4);
                variable allocated_contents42 = autobuffer_new(131072);
                variable allocated_contents43 = &(allocated_contents42);
                variable contents_index = 0;
                variable contents_index2 = 0;

                autopush_pop_register8(allocated_contents43, &(contents_index2), RAX);
                autopush_add_register8_whole_8(allocated_contents43, &(contents_index2), RAX, location);
                autopush_push_register8(allocated_contents43, &(contents_index2), RAX);

                autoarray8_set(&(memory_function_contents), memory_function_index, AutoBuffer->buffer(allocated_contents41));
                autoarray8_set(&(memory_function_instructions), memory_function_index, AutoBuffer->buffer(allocated_contents43));
                autoarray8_set(&(memory_function_instruction_sizes), memory_function_index, contents_index2);

                memory_function_index = whole_8+(memory_function_index, 1);

                // Setter for individual members
                variable allocated = brk_allocate(whole_8+(length(structure_name), whole_8+(length(member_name), 3)));
                copy(structure_name, allocated, length(structure_name));
                copy("<-", @cast_*(+(allocated, length(structure_name))), 2);
                copy(member_name, @cast_*(+(allocated, +(length(structure_name), 2))), length(member_name));

                autoarray8_set(&(memory_functions), memory_function_index, allocated);

                variable allocated_contents2 = autobuffer_new(8388608);
                variable allocated_contents21 = &(allocated_contents2);
                variable allocated_contents22 = autobuffer_new(8388608);
                variable allocated_contents23 = &(allocated_contents22);
                variable contents_index = 0;
                variable contents_index2 = 0;

                variable size = get_size_linux_x86-64(member_type, nodes, node_count);

                autopush_add_register8_whole_8(allocated_contents23, &(contents_index2), RSP, size);
                autopush_mov_register8_pointer_offset_register8(allocated_contents23, &(contents_index2), RSP, 0, RAX);
                autopush_sub_register8_whole_8(allocated_contents23, &(contents_index2), RSP, size);

                variable k = 0;
                while <(k, size) {
                    variable done_anything_structure = false;

                    if >(-(size, k), 7) {
                        autopush_mov_register8_pointer_offset_register8(allocated_contents23, &(contents_index2), RSP, k, RBX);
                        autopush_mov_register8_register8_pointer_offset(allocated_contents23, &(contents_index2), RBX, RAX, whole_8+(k, location));

                        k = whole_8+(k, 8);
                        done_anything_structure = true;
                    };
                    if &&(>(-(size, k), 3), !(done_anything_structure)) {
                        autopush_mov_register8_pointer_offset_register4(allocated_contents23, &(contents_index2), RSP, k, EBX);
                        autopush_mov_register4_register8_pointer_offset(allocated_contents23, &(contents_index2), EBX, RAX, whole_8+(k, location));

                        k = whole_8+(k, 4);
                        done_anything_structure = true;
                    };
                    if &&(>(-(size, k), 1), !(done_anything_structure)) {
                        autopush_mov_register8_pointer_offset_register2(allocated_contents23, &(contents_index2), RSP, k, BX);
                        autopush_mov_register2_register8_pointer_offset(allocated_contents23, &(contents_index2), BX, RAX, whole_8+(k, location));

                        k = whole_8+(k, 2);
                        done_anything_structure = true;
                    };
                    if &&(>(-(size, k), 0), !(done_anything_structure)) {
                        autopush_mov_register8_pointer_offset_register1(allocated_contents23, &(contents_index2), RSP, k, BL);
                        autopush_mov_register1_register8_pointer_offset(allocated_contents23, &(contents_index2), BL, RAX, whole_8+(k, location));

                        k = whole_8+(k, 1);
                        done_anything_structure = true;
                    };
                };

                autopush_add_register8_whole_8(allocated_contents23, &(contents_index2), RSP, whole_8+(size, 8));

                autoarray8_set(&(memory_function_contents), memory_function_index, AutoBuffer->buffer(allocated_contents21));
                autoarray8_set(&(memory_function_instructions), memory_function_index, AutoBuffer->buffer(allocated_contents23));
                autoarray8_set(&(memory_function_instruction_sizes), memory_function_index, contents_index2);

                memory_function_index = whole_8+(memory_function_index, 1);

                // Getter for indivudal members
                variable allocated = brk_allocate(whole_8+(length(structure_name), whole_8+(length(member_name), 3)));
                copy(structure_name, allocated, length(structure_name));
                copy("->", @cast_*(+(allocated, length(structure_name))), 2);
                copy(member_name, @cast_*(+(allocated, +(length(structure_name), 2))), length(member_name));

                autoarray8_set(&(memory_functions), memory_function_index, allocated);

                variable allocated_contents3 = autobuffer_new(8388608);
                variable allocated_contents31 = &(allocated_contents3);
                variable allocated_contents32 = autobuffer_new(8388608);
                variable allocated_contents33 = &(allocated_contents32);
                variable contents_index = 0;
                variable contents_index2 = 0;

                variable size = get_size_linux_x86-64(member_type, nodes, node_count);
                variable location = get_size_multiple_linux_x86-64(member_types, j, nodes, node_count);

                autopush_pop_register8(allocated_contents33, &(contents_index2), RAX);
                autopush_sub_register8_whole_8(allocated_contents33, &(contents_index2), RSP, size);

                variable k = 0;
                while <(k, size) {
                    variable done_anything_structure = false;

                    if >(-(size, k), 7) {
                        autopush_mov_register8_pointer_offset_register8(allocated_contents33, &(contents_index2), RAX, whole_8+(k, location), RBX);
                        autopush_mov_register8_register8_pointer_offset(allocated_contents33, &(contents_index2), RBX, RSP, k);

                        k = whole_8+(k, 8);
                        done_anything_structure = true;
                    };
                    if &&(>(-(size, k), 3), !(done_anything_structure)) {
                        autopush_mov_register8_pointer_offset_register4(allocated_contents33, &(contents_index2), RAX, whole_8+(k, location), EBX);
                        autopush_mov_register4_register8_pointer_offset(allocated_contents33, &(contents_index2), EBX, RSP, k);

                        k = whole_8+(k, 4);
                        done_anything_structure = true;
                    };
                    if &&(>(-(size, k), 1), !(done_anything_structure)) {
                        autopush_mov_register8_pointer_offset_register2(allocated_contents33, &(contents_index2), RAX, whole_8+(k, location), BX);
                        autopush_mov_register2_register8_pointer_offset(allocated_contents33, &(contents_index2), BX, RSP, k);

                        k = whole_8+(k, 2);
                        done_anything_structure = true;
                    };
                    if &&(>(-(size, k), 0), !(done_anything_structure)) {
                        autopush_mov_register8_pointer_offset_register1(allocated_contents33, &(contents_index2), RAX, whole_8+(k, location), BL);
                        autopush_mov_register1_register8_pointer_offset(allocated_contents33, &(contents_index2), BL, RSP, k);

                        k = whole_8+(k, 1);
                        done_anything_structure = true;
                    };
                };

                autoarray8_set(&(memory_function_contents), memory_function_index, AutoBuffer->buffer(allocated_contents31));
                autoarray8_set(&(memory_function_instructions), memory_function_index, AutoBuffer->buffer(allocated_contents33));
                autoarray8_set(&(memory_function_instruction_sizes), memory_function_index, contents_index2);

                memory_function_index = whole_8+(memory_function_index, 1);

                j = whole_8+(j, 1);
            };
        };

        i = whole_8+(i, 1);
    };

    variable current_function: *;

    variable variable_names = autobuffer_new(2048);
    variable variable_types = autobuffer_new(2048);
    variable variable_sizes = autobuffer_new(2048);
    variable variable_index = 0;

    variable program_constant_index = 0;

    variable i = 0;
    while <(i, node_count) {
        variable id = nodes_get_id(nodes, i);
        variable pointer = nodes_get_pointer(nodes, i);
        variable pointer_data = nodes_get_pointer_data(nodes, i);

        variable done_anything = false;

        if =(id, NODE_FUNCTION) {
            variable function_data = @cast_*NodeFunctionData(pointer_data);
            variable next_id = nodes_get_id(nodes, whole_8+(i, 1));

            if !(=(next_id, NODE_ENDFUNCTION)) {
                variable function_name = NodeFunctionData->name(function_data);

                variable function_index = autostringarraymap_get_index(&(functions), function_name, index);
                autoarray8_set(&(function_locations), function_index, instructions_index);

                autopush_push_register8(&(instructions_buffer), &(instructions_index), RBP);
                autopush_mov_register8_register8(&(instructions_buffer), &(instructions_index), RSP, RBP);

                variable locals_size = @cast_whole_8(autostringarraymap_get(&(functions), &(function_local_sizes), function_name, index));

                autopush_sub_register8_whole_8(&(instructions_buffer), &(instructions_index), RSP, whole_8+(locals_size, 16));

                current_function = function_name;

                variable_index = 0;
            };

            done_anything = true;
        };

        if =(id, NODE_NUMBER) {
            variable whole_8_data = @cast_*NodeNumberData(pointer_data);
            variable value_whole_8 = NodeNumberData->value(whole_8_data);

            if =(NodeNumberData->type(whole_8_data), 0) {
                variable size = NodeNumberData->size(whole_8_data);

                if =(size, 8) {
                    autopush_push_whole_8(&(instructions_buffer), &(instructions_index), value_whole_8);
                } else if =(size, 4) {
                    autopush_mov_medium_register4(&(instructions_buffer), &(instructions_index), EAX, whole_8_to_medium(value_whole_8));
                    autopush_sub_register8_whole_8(&(instructions_buffer), &(instructions_index), RSP, 4);
                    autopush_mov_register4_register8_pointer_offset(&(instructions_buffer), &(instructions_index), EAX, RSP, 0);
                } else if =(size, 2) {
                    autopush_mov_short_register2(&(instructions_buffer), &(instructions_index), AX, whole_8_to_short(value_whole_8));
                    autopush_sub_register8_whole_8(&(instructions_buffer), &(instructions_index), RSP, 2);
                    autopush_mov_register2_register8_pointer_offset(&(instructions_buffer), &(instructions_index), AX, RSP, 0);
                } else if =(size, 1) {
                    autopush_mov_byte_register1(&(instructions_buffer), &(instructions_index), AL, byte(value_whole_8));
                    autopush_sub_register8_whole_8(&(instructions_buffer), &(instructions_index), RSP, 1);
                    autopush_mov_register1_register8_pointer_offset(&(instructions_buffer), &(instructions_index), AL, RSP, 0);
                };
            };

            done_anything = true;
        };

        if =(id, NODE_BOOLEAN) {
            variable boolean_data = @cast_*NodeBooleanData(pointer_data);
            variable value_boolean = NodeBooleanData->value(boolean_data);

            autopush_sub_register8_whole_8(&(instructions_buffer), &(instructions_index), RSP, 1);

            if @cast_boolean(value_boolean) {
                autopush_mov_whole_8_register8(&(instructions_buffer), &(instructions_index), RAX, 1);
                autopush_mov_register1_register8_pointer_offset(&(instructions_buffer), &(instructions_index), AL, RSP, 0);
            } else {
                autopush_mov_whole_8_register8(&(instructions_buffer), &(instructions_index), RAX, 0);
                autopush_mov_register1_register8_pointer_offset(&(instructions_buffer), &(instructions_index), AL, RSP, 0);
            };

            done_anything = true;
        };

        if =(id, NODE_INVOKE) {
            variable invoke_data = @cast_*NodeInvokeData(pointer_data);
            variable function_name = NodeInvokeData->name(invoke_data);
            variable next_id = nodes_get_id(nodes, whole_8+(i, 1));

            if =(next_id, NODE_POINTER) {
                variable function_name_new = brk_allocate(whole_8+(length(function_name), 2));
                copy("*", function_name_new, 1);
                copy(function_name, @cast_*(+(function_name_new, 1)), length(function_name));
                function_name = function_name_new;
            };

            variable done_anything_invoke = false;

            if !(=(autostringarraymap_get(&(memory_functions), &(memory_function_instructions), function_name, memory_function_index), 0)) {
                variable contents = autostringarraymap_get(&(memory_functions), &(memory_function_instructions), function_name, memory_function_index);
                variable contents_size = @cast_whole_8(autostringarraymap_get(&(memory_functions), &(memory_function_instruction_sizes), function_name, memory_function_index));
                autopush_pointer(&(instructions_buffer), &(instructions_index), contents, contents_size);
                done_anything_invoke = true;
            };

            if string_length=(function_name, "@cast_", 6) {
                done_anything_invoke = true;
            };

            if string_length=(function_name, "=", 1) {
                variable size = 0;
                variable underscore_count = 0;

                variable k = 0;
                while <(k, length(function_name)) {
                    variable character = @cast_whole_8(byte_to_integer(any_1->(@cast_*any_1(+(function_name, k)))));
                    if =(character, 95) {
                        underscore_count = whole_8+(underscore_count, 1);
                    } else if =(underscore_count, 2) {
                        size = whole_8-(character, 48);
                    };

                    k = whole_8+(k, 1);
                };

                if =(size, 8) {
                    autopush_pop_register8(&(instructions_buffer), &(instructions_index), RAX);
                    autopush_pop_register8(&(instructions_buffer), &(instructions_index), RBX);
                    autopush_cmp_register8_register8(&(instructions_buffer), &(instructions_index), RAX, RBX);
                } else if =(size, 4) {
                    autopush_mov_register8_pointer_offset_register4(&(instructions_buffer), &(instructions_index), RSP, 0, EAX);
                    autopush_add_register8_whole_8(&(instructions_buffer), &(instructions_index), RSP, 4);
                    autopush_mov_register8_pointer_offset_register4(&(instructions_buffer), &(instructions_index), RSP, 0, EBX);
                    autopush_add_register8_whole_8(&(instructions_buffer), &(instructions_index), RSP, 4);
                    autopush_cmp_register4_register4(&(instructions_buffer), &(instructions_index), EAX, EBX);
                } else if =(size, 2) {
                    autopush_mov_register8_pointer_offset_register2(&(instructions_buffer), &(instructions_index), RSP, 0, AX);
                    autopush_add_register8_whole_8(&(instructions_buffer), &(instructions_index), RSP, 2);
                    autopush_mov_register8_pointer_offset_register2(&(instructions_buffer), &(instructions_index), RSP, 0, BX);
                    autopush_add_register8_whole_8(&(instructions_buffer), &(instructions_index), RSP, 2);
                    autopush_cmp_register2_register2(&(instructions_buffer), &(instructions_index), AX, BX);
                } else if =(size, 1) {
                    autopush_mov_register8_pointer_offset_register1(&(instructions_buffer), &(instructions_index), RSP, 0, AL);
                    autopush_add_register8_whole_8(&(instructions_buffer), &(instructions_index), RSP, 1);
                    autopush_mov_register8_pointer_offset_register1(&(instructions_buffer), &(instructions_index), RSP, 0, BL);
                    autopush_add_register8_whole_8(&(instructions_buffer), &(instructions_index), RSP, 1);
                    autopush_cmp_register1_register1(&(instructions_buffer), &(instructions_index), AL, BL);
                };

                autopush_mov_whole_8_register8(&(instructions_buffer), &(instructions_index), RCX, 0);
                autopush_mov_whole_8_register8(&(instructions_buffer), &(instructions_index), RBX, 1);
                autopush_cmove_register8_register8(&(instructions_buffer), &(instructions_index), RCX, RBX);
                autopush_sub_register8_whole_8(&(instructions_buffer), &(instructions_index), RSP, 1);
                autopush_mov_register1_register8_pointer_offset(&(instructions_buffer), &(instructions_index), CL, RSP, 0);

                done_anything_invoke = true;
            };

            if string_length=(function_name, ">", 1) {
                variable size = 0;
                variable underscore_count = 0;

                variable k = 0;
                while <(k, length(function_name)) {
                    variable character = @cast_whole_8(byte_to_integer(any_1->(@cast_*any_1(+(function_name, k)))));
                    if =(character, 95) {
                        underscore_count = whole_8+(underscore_count, 1);
                    } else if =(underscore_count, 2) {
                        size = whole_8-(character, 48);
                    };

                    k = whole_8+(k, 1);
                };

                if =(size, 8) {
                    autopush_pop_register8(&(instructions_buffer), &(instructions_index), RAX);
                    autopush_pop_register8(&(instructions_buffer), &(instructions_index), RBX);
                    autopush_cmp_register8_register8(&(instructions_buffer), &(instructions_index), RAX, RBX);
                } else if =(size, 4) {
                    autopush_mov_register8_pointer_offset_register4(&(instructions_buffer), &(instructions_index), RSP, 0, EAX);
                    autopush_add_register8_whole_8(&(instructions_buffer), &(instructions_index), RSP, 4);
                    autopush_mov_register8_pointer_offset_register4(&(instructions_buffer), &(instructions_index), RSP, 0, EBX);
                    autopush_add_register8_whole_8(&(instructions_buffer), &(instructions_index), RSP, 4);
                    autopush_cmp_register4_register4(&(instructions_buffer), &(instructions_index), EAX, EBX);
                } else if =(size, 2) {
                    autopush_mov_register8_pointer_offset_register2(&(instructions_buffer), &(instructions_index), RSP, 0, AX);
                    autopush_add_register8_whole_8(&(instructions_buffer), &(instructions_index), RSP, 2);
                    autopush_mov_register8_pointer_offset_register2(&(instructions_buffer), &(instructions_index), RSP, 0, BX);
                    autopush_add_register8_whole_8(&(instructions_buffer), &(instructions_index), RSP, 2);
                    autopush_cmp_register2_register2(&(instructions_buffer), &(instructions_index), AX, BX);
                } else if =(size, 1) {
                    autopush_mov_register8_pointer_offset_register1(&(instructions_buffer), &(instructions_index), RSP, 0, AL);
                    autopush_add_register8_whole_8(&(instructions_buffer), &(instructions_index), RSP, 1);
                    autopush_mov_register8_pointer_offset_register1(&(instructions_buffer), &(instructions_index), RSP, 0, BL);
                    autopush_add_register8_whole_8(&(instructions_buffer), &(instructions_index), RSP, 1);
                    autopush_cmp_register1_register1(&(instructions_buffer), &(instructions_index), AL, BL);
                };

                autopush_mov_whole_8_register8(&(instructions_buffer), &(instructions_index), RCX, 0);
                autopush_mov_whole_8_register8(&(instructions_buffer), &(instructions_index), RBX, 1);
                autopush_cmovb_register8_register8(&(instructions_buffer), &(instructions_index), RCX, RBX);
                autopush_sub_register8_whole_8(&(instructions_buffer), &(instructions_index), RSP, 1);
                autopush_mov_register1_register8_pointer_offset(&(instructions_buffer), &(instructions_index), CL, RSP, 0);

                done_anything_invoke = true;
            };

            if string_length=(function_name, "<", 1) {
                variable size = 0;
                variable underscore_count = 0;

                variable k = 0;
                while <(k, length(function_name)) {
                    variable character = @cast_whole_8(byte_to_integer(any_1->(@cast_*any_1(+(function_name, k)))));
                    if =(character, 95) {
                        underscore_count = whole_8+(underscore_count, 1);
                    } else if =(underscore_count, 2) {
                        size = whole_8-(character, 48);
                    };

                    k = whole_8+(k, 1);
                };

                if =(size, 8) {
                    autopush_pop_register8(&(instructions_buffer), &(instructions_index), RAX);
                    autopush_pop_register8(&(instructions_buffer), &(instructions_index), RBX);
                    autopush_cmp_register8_register8(&(instructions_buffer), &(instructions_index), RAX, RBX);
                } else if =(size, 4) {
                    autopush_mov_register8_pointer_offset_register4(&(instructions_buffer), &(instructions_index), RSP, 0, EAX);
                    autopush_add_register8_whole_8(&(instructions_buffer), &(instructions_index), RSP, 4);
                    autopush_mov_register8_pointer_offset_register4(&(instructions_buffer), &(instructions_index), RSP, 0, EBX);
                    autopush_add_register8_whole_8(&(instructions_buffer), &(instructions_index), RSP, 4);
                    autopush_cmp_register4_register4(&(instructions_buffer), &(instructions_index), EAX, EBX);
                } else if =(size, 2) {
                    autopush_mov_register8_pointer_offset_register2(&(instructions_buffer), &(instructions_index), RSP, 0, AX);
                    autopush_add_register8_whole_8(&(instructions_buffer), &(instructions_index), RSP, 2);
                    autopush_mov_register8_pointer_offset_register2(&(instructions_buffer), &(instructions_index), RSP, 0, BX);
                    autopush_add_register8_whole_8(&(instructions_buffer), &(instructions_index), RSP, 2);
                    autopush_cmp_register2_register2(&(instructions_buffer), &(instructions_index), AX, BX);
                } else if =(size, 1) {
                    autopush_mov_register8_pointer_offset_register1(&(instructions_buffer), &(instructions_index), RSP, 0, AL);
                    autopush_add_register8_whole_8(&(instructions_buffer), &(instructions_index), RSP, 1);
                    autopush_mov_register8_pointer_offset_register1(&(instructions_buffer), &(instructions_index), RSP, 0, BL);
                    autopush_add_register8_whole_8(&(instructions_buffer), &(instructions_index), RSP, 1);
                    autopush_cmp_register1_register1(&(instructions_buffer), &(instructions_index), AL, BL);
                };

                autopush_mov_whole_8_register8(&(instructions_buffer), &(instructions_index), RCX, 0);
                autopush_mov_whole_8_register8(&(instructions_buffer), &(instructions_index), RBX, 1);
                autopush_cmova_register8_register8(&(instructions_buffer), &(instructions_index), RCX, RBX);
                autopush_sub_register8_whole_8(&(instructions_buffer), &(instructions_index), RSP, 1);
                autopush_mov_register1_register8_pointer_offset(&(instructions_buffer), &(instructions_index), CL, RSP, 0);

                done_anything_invoke = true;
            };

            if string=(function_name, "get_rsp") {
                autopush_push_register8(&(instructions_buffer), &(instructions_index), RSP);
                done_anything_invoke = true;
            };

            if string=(function_name, "!") {
                autopush_mov_whole_8_register8(&(instructions_buffer), &(instructions_index), RAX, 0);
                autopush_mov_register8_pointer_offset_register1(&(instructions_buffer), &(instructions_index), RSP, 0, AL);
                autopush_add_register8_whole_8(&(instructions_buffer), &(instructions_index), RSP, 1);
                //TODO compare directly with whole_8
                autopush_mov_whole_8_register8(&(instructions_buffer), &(instructions_index), RBX, 0);
                autopush_cmp_register8_register8(&(instructions_buffer), &(instructions_index), RAX, RBX);
                autopush_mov_whole_8_register8(&(instructions_buffer), &(instructions_index), RCX, 0);
                autopush_mov_whole_8_register8(&(instructions_buffer), &(instructions_index), RBX, 1);
                autopush_cmove_register8_register8(&(instructions_buffer), &(instructions_index), RCX, RBX);
                autopush_sub_register8_whole_8(&(instructions_buffer), &(instructions_index), RSP, 1);
                autopush_mov_register1_register8_pointer_offset(&(instructions_buffer), &(instructions_index), CL, RSP, 0);

                done_anything_invoke = true;
            };
            
            if string_length=(function_name, "+", 1) {
                variable size = 0;
                variable underscore_count = 0;

                variable k = 0;
                while <(k, length(function_name)) {
                    variable character = @cast_whole_8(byte_to_integer(any_1->(@cast_*any_1(+(function_name, k)))));
                    if =(character, 95) {
                        underscore_count = whole_8+(underscore_count, 1);
                    } else if =(underscore_count, 2) {
                        size = whole_8-(character, 48);
                    };

                    k = whole_8+(k, 1);
                };

                if =(size, 8) {
                    autopush_pop_register8(&(instructions_buffer), &(instructions_index), RAX);
                    autopush_pop_register8(&(instructions_buffer), &(instructions_index), RBX);
                    autopush_add_register8_register8(&(instructions_buffer), &(instructions_index), RAX, RBX);
                    autopush_push_register8(&(instructions_buffer), &(instructions_index), RAX);
                } else if =(size, 4) {
                    autopush_mov_register8_pointer_offset_register4(&(instructions_buffer), &(instructions_index), RSP, 0, EAX);
                    autopush_add_register8_whole_8(&(instructions_buffer), &(instructions_index), RSP, 4);
                    autopush_mov_register8_pointer_offset_register4(&(instructions_buffer), &(instructions_index), RSP, 0, EBX);
                    autopush_add_register8_whole_8(&(instructions_buffer), &(instructions_index), RSP, 4);
                    autopush_add_register4_register4(&(instructions_buffer), &(instructions_index), EAX, EBX);
                    autopush_sub_register8_whole_8(&(instructions_buffer), &(instructions_index), RSP, 4);
                    autopush_mov_register4_register8_pointer_offset(&(instructions_buffer), &(instructions_index), EAX, RSP, 0);
                } else if =(size, 2) {
                    autopush_mov_register8_pointer_offset_register2(&(instructions_buffer), &(instructions_index), RSP, 0, AX);
                    autopush_add_register8_whole_8(&(instructions_buffer), &(instructions_index), RSP, 2);
                    autopush_mov_register8_pointer_offset_register2(&(instructions_buffer), &(instructions_index), RSP, 0, BX);
                    autopush_add_register8_whole_8(&(instructions_buffer), &(instructions_index), RSP, 2);
                    autopush_add_register2_register2(&(instructions_buffer), &(instructions_index), AX, BX);
                    autopush_sub_register8_whole_8(&(instructions_buffer), &(instructions_index), RSP, 2);
                    autopush_mov_register2_register8_pointer_offset(&(instructions_buffer), &(instructions_index), AX, RSP, 0);
                } else if =(size, 1) {
                    autopush_mov_register8_pointer_offset_register1(&(instructions_buffer), &(instructions_index), RSP, 0, AL);
                    autopush_add_register8_whole_8(&(instructions_buffer), &(instructions_index), RSP, 1);
                    autopush_mov_register8_pointer_offset_register1(&(instructions_buffer), &(instructions_index), RSP, 0, BL);
                    autopush_add_register8_whole_8(&(instructions_buffer), &(instructions_index), RSP, 1);
                    autopush_add_register1_register1(&(instructions_buffer), &(instructions_index), AL, BL);
                    autopush_sub_register8_whole_8(&(instructions_buffer), &(instructions_index), RSP, 1);
                    autopush_mov_register1_register8_pointer_offset(&(instructions_buffer), &(instructions_index), AL, RSP, 0);
                };
                done_anything_invoke = true;
            };

            if string_length=(function_name, "-", 1) {
                variable size = 0;
                variable underscore_count = 0;

                variable k = 0;
                while <(k, length(function_name)) {
                    variable character = @cast_whole_8(byte_to_integer(any_1->(@cast_*any_1(+(function_name, k)))));
                    if =(character, 95) {
                        underscore_count = whole_8+(underscore_count, 1);
                    } else if =(underscore_count, 2) {
                        size = whole_8-(character, 48);
                    };

                    k = whole_8+(k, 1);
                };

                if =(size, 8) {
                    autopush_pop_register8(&(instructions_buffer), &(instructions_index), RAX);
                    autopush_pop_register8(&(instructions_buffer), &(instructions_index), RBX);
                    autopush_sub_register8_register8(&(instructions_buffer), &(instructions_index), RBX, RAX);
                    autopush_push_register8(&(instructions_buffer), &(instructions_index), RBX);
                } else if =(size, 4) {
                    autopush_mov_register8_pointer_offset_register4(&(instructions_buffer), &(instructions_index), RSP, 0, EAX);
                    autopush_add_register8_whole_8(&(instructions_buffer), &(instructions_index), RSP, 4);
                    autopush_mov_register8_pointer_offset_register4(&(instructions_buffer), &(instructions_index), RSP, 0, EBX);
                    autopush_add_register8_whole_8(&(instructions_buffer), &(instructions_index), RSP, 4);
                    autopush_sub_register4_register4(&(instructions_buffer), &(instructions_index), EBX, EAX);
                    autopush_sub_register8_whole_8(&(instructions_buffer), &(instructions_index), RSP, 4);
                    autopush_mov_register4_register8_pointer_offset(&(instructions_buffer), &(instructions_index), EBX, RSP, 0);
                } else if =(size, 2) {
                    autopush_mov_register8_pointer_offset_register2(&(instructions_buffer), &(instructions_index), RSP, 0, AX);
                    autopush_add_register8_whole_8(&(instructions_buffer), &(instructions_index), RSP, 2);
                    autopush_mov_register8_pointer_offset_register2(&(instructions_buffer), &(instructions_index), RSP, 0, BX);
                    autopush_add_register8_whole_8(&(instructions_buffer), &(instructions_index), RSP, 2);
                    autopush_sub_register2_register2(&(instructions_buffer), &(instructions_index), BX, AX);
                    autopush_sub_register8_whole_8(&(instructions_buffer), &(instructions_index), RSP, 2);
                    autopush_mov_register2_register8_pointer_offset(&(instructions_buffer), &(instructions_index), BX, RSP, 0);
                } else if =(size, 1) {
                    autopush_mov_register8_pointer_offset_register1(&(instructions_buffer), &(instructions_index), RSP, 0, AL);
                    autopush_add_register8_whole_8(&(instructions_buffer), &(instructions_index), RSP, 1);
                    autopush_mov_register8_pointer_offset_register1(&(instructions_buffer), &(instructions_index), RSP, 0, BL);
                    autopush_add_register8_whole_8(&(instructions_buffer), &(instructions_index), RSP, 1);
                    autopush_sub_register1_register1(&(instructions_buffer), &(instructions_index), BL, AL);
                    autopush_sub_register8_whole_8(&(instructions_buffer), &(instructions_index), RSP, 1);
                    autopush_mov_register1_register8_pointer_offset(&(instructions_buffer), &(instructions_index), BL, RSP, 0);
                };
                done_anything_invoke = true;
            };

            if string_length=(function_name, "*", 1) {
                variable size = 0;
                variable underscore_count = 0;

                variable k = 0;
                while <(k, length(function_name)) {
                    variable character = @cast_whole_8(byte_to_integer(any_1->(@cast_*any_1(+(function_name, k)))));
                    if =(character, 95) {
                        underscore_count = whole_8+(underscore_count, 1);
                    } else if =(underscore_count, 2) {
                        size = whole_8-(character, 48);
                    };

                    k = whole_8+(k, 1);
                };

                if =(size, 8) {
                    autopush_pop_register8(&(instructions_buffer), &(instructions_index), RAX);
                    autopush_pop_register8(&(instructions_buffer), &(instructions_index), RBX);
                    autopush_mul_register8(&(instructions_buffer), &(instructions_index), RBX);
                    autopush_push_register8(&(instructions_buffer), &(instructions_index), RAX);
                } else if =(size, 4) {
                    autopush_mov_register8_pointer_offset_register4(&(instructions_buffer), &(instructions_index), RSP, 0, EAX);
                    autopush_add_register8_whole_8(&(instructions_buffer), &(instructions_index), RSP, 4);
                    autopush_mov_register8_pointer_offset_register4(&(instructions_buffer), &(instructions_index), RSP, 0, EBX);
                    autopush_add_register8_whole_8(&(instructions_buffer), &(instructions_index), RSP, 4);
                    autopush_mul_register4(&(instructions_buffer), &(instructions_index), EBX);
                    autopush_sub_register8_whole_8(&(instructions_buffer), &(instructions_index), RSP, 4);
                    autopush_mov_register4_register8_pointer_offset(&(instructions_buffer), &(instructions_index), EAX, RSP, 0);
                } else if =(size, 2) {
                    autopush_mov_register8_pointer_offset_register2(&(instructions_buffer), &(instructions_index), RSP, 0, AX);
                    autopush_add_register8_whole_8(&(instructions_buffer), &(instructions_index), RSP, 2);
                    autopush_mov_register8_pointer_offset_register2(&(instructions_buffer), &(instructions_index), RSP, 0, BX);
                    autopush_add_register8_whole_8(&(instructions_buffer), &(instructions_index), RSP, 2);
                    autopush_mul_register2(&(instructions_buffer), &(instructions_index), BX);
                    autopush_sub_register8_whole_8(&(instructions_buffer), &(instructions_index), RSP, 2);
                    autopush_mov_register2_register8_pointer_offset(&(instructions_buffer), &(instructions_index), AX, RSP, 0);
                } else if =(size, 1) {
                    autopush_mov_register8_pointer_offset_register1(&(instructions_buffer), &(instructions_index), RSP, 0, AL);
                    autopush_add_register8_whole_8(&(instructions_buffer), &(instructions_index), RSP, 1);
                    autopush_mov_register8_pointer_offset_register1(&(instructions_buffer), &(instructions_index), RSP, 0, BL);
                    autopush_add_register8_whole_8(&(instructions_buffer), &(instructions_index), RSP, 1);
                    autopush_mul_register1(&(instructions_buffer), &(instructions_index), BL);
                    autopush_sub_register8_whole_8(&(instructions_buffer), &(instructions_index), RSP, 1);
                    autopush_mov_register1_register8_pointer_offset(&(instructions_buffer), &(instructions_index), AL, RSP, 0);
                };
                done_anything_invoke = true;
            };

            if string_length=(function_name, "/", 1) {
                variable size = 0;
                variable underscore_count = 0;

                variable k = 0;
                while <(k, length(function_name)) {
                    variable character = @cast_whole_8(byte_to_integer(any_1->(@cast_*any_1(+(function_name, k)))));
                    if =(character, 95) {
                        underscore_count = whole_8+(underscore_count, 1);
                    } else if =(underscore_count, 2) {
                        size = whole_8-(character, 48);
                    };

                    k = whole_8+(k, 1);
                };

                autopush_mov_whole_8_register8(&(instructions_buffer), &(instructions_index), RDX, 0);
                if =(size, 8) {
                    autopush_pop_register8(&(instructions_buffer), &(instructions_index), RBX);
                    autopush_pop_register8(&(instructions_buffer), &(instructions_index), RAX);
                    autopush_div_register8(&(instructions_buffer), &(instructions_index), RBX);
                    autopush_push_register8(&(instructions_buffer), &(instructions_index), RAX);
                } else if =(size, 4) {
                    autopush_mov_register8_pointer_offset_register4(&(instructions_buffer), &(instructions_index), RSP, 0, EBX);
                    autopush_add_register8_whole_8(&(instructions_buffer), &(instructions_index), RSP, 4);
                    autopush_mov_register8_pointer_offset_register4(&(instructions_buffer), &(instructions_index), RSP, 0, EAX);
                    autopush_add_register8_whole_8(&(instructions_buffer), &(instructions_index), RSP, 4);
                    autopush_div_register4(&(instructions_buffer), &(instructions_index), EBX);
                    autopush_sub_register8_whole_8(&(instructions_buffer), &(instructions_index), RSP, 4);
                    autopush_mov_register4_register8_pointer_offset(&(instructions_buffer), &(instructions_index), EAX, RSP, 0);
                } else if =(size, 2) {
                    autopush_mov_register8_pointer_offset_register2(&(instructions_buffer), &(instructions_index), RSP, 0, BX);
                    autopush_add_register8_whole_8(&(instructions_buffer), &(instructions_index), RSP, 2);
                    autopush_mov_register8_pointer_offset_register2(&(instructions_buffer), &(instructions_index), RSP, 0, AX);
                    autopush_add_register8_whole_8(&(instructions_buffer), &(instructions_index), RSP, 2);
                    autopush_div_register2(&(instructions_buffer), &(instructions_index), BX);
                    autopush_sub_register8_whole_8(&(instructions_buffer), &(instructions_index), RSP, 2);
                    autopush_mov_register2_register8_pointer_offset(&(instructions_buffer), &(instructions_index), AX, RSP, 0);
                } else if =(size, 1) {
                    autopush_mov_register8_pointer_offset_register1(&(instructions_buffer), &(instructions_index), RSP, 0, BL);
                    autopush_add_register8_whole_8(&(instructions_buffer), &(instructions_index), RSP, 1);
                    autopush_mov_whole_8_register8(&(instructions_buffer), &(instructions_index), RAX, 0);
                    autopush_mov_register8_pointer_offset_register1(&(instructions_buffer), &(instructions_index), RSP, 0, AL);
                    autopush_add_register8_whole_8(&(instructions_buffer), &(instructions_index), RSP, 1);
                    autopush_div_register1(&(instructions_buffer), &(instructions_index), BL);
                    autopush_sub_register8_whole_8(&(instructions_buffer), &(instructions_index), RSP, 1);
                    autopush_mov_register1_register8_pointer_offset(&(instructions_buffer), &(instructions_index), AL, RSP, 0);
                };
                done_anything_invoke = true;
            };

            if string_length=(function_name, "%", 1) {
                variable size = 0;
                variable underscore_count = 0;

                variable k = 0;
                while <(k, length(function_name)) {
                    variable character = @cast_whole_8(byte_to_integer(any_1->(@cast_*any_1(+(function_name, k)))));
                    if =(character, 95) {
                        underscore_count = whole_8+(underscore_count, 1);
                    } else if =(underscore_count, 2) {
                        size = whole_8-(character, 48);
                    };

                    k = whole_8+(k, 1);
                };

                autopush_mov_whole_8_register8(&(instructions_buffer), &(instructions_index), RDX, 0);
                if =(size, 8) {
                    autopush_pop_register8(&(instructions_buffer), &(instructions_index), RBX);
                    autopush_pop_register8(&(instructions_buffer), &(instructions_index), RAX);
                    autopush_div_register8(&(instructions_buffer), &(instructions_index), RBX);
                    autopush_push_register8(&(instructions_buffer), &(instructions_index), RDX);
                } else if =(size, 4) {
                    autopush_mov_register8_pointer_offset_register4(&(instructions_buffer), &(instructions_index), RSP, 0, EBX);
                    autopush_add_register8_whole_8(&(instructions_buffer), &(instructions_index), RSP, 4);
                    autopush_mov_register8_pointer_offset_register4(&(instructions_buffer), &(instructions_index), RSP, 0, EAX);
                    autopush_add_register8_whole_8(&(instructions_buffer), &(instructions_index), RSP, 4);
                    autopush_div_register4(&(instructions_buffer), &(instructions_index), EBX);
                    autopush_sub_register8_whole_8(&(instructions_buffer), &(instructions_index), RSP, 4);
                    autopush_mov_register4_register8_pointer_offset(&(instructions_buffer), &(instructions_index), EDX, RSP, 0);
                } else if =(size, 2) {
                    autopush_mov_register8_pointer_offset_register2(&(instructions_buffer), &(instructions_index), RSP, 0, BX);
                    autopush_add_register8_whole_8(&(instructions_buffer), &(instructions_index), RSP, 2);
                    autopush_mov_register8_pointer_offset_register2(&(instructions_buffer), &(instructions_index), RSP, 0, AX);
                    autopush_add_register8_whole_8(&(instructions_buffer), &(instructions_index), RSP, 2);
                    autopush_div_register2(&(instructions_buffer), &(instructions_index), BX);
                    autopush_sub_register8_whole_8(&(instructions_buffer), &(instructions_index), RSP, 2);
                    autopush_mov_register2_register8_pointer_offset(&(instructions_buffer), &(instructions_index), DX, RSP, 0);
                } else if =(size, 1) {
                    autopush_mov_register8_pointer_offset_register1(&(instructions_buffer), &(instructions_index), RSP, 0, BL);
                    autopush_add_register8_whole_8(&(instructions_buffer), &(instructions_index), RSP, 1);
                    autopush_mov_whole_8_register8(&(instructions_buffer), &(instructions_index), RAX, 0);
                    autopush_mov_register8_pointer_offset_register1(&(instructions_buffer), &(instructions_index), RSP, 0, AL);
                    autopush_add_register8_whole_8(&(instructions_buffer), &(instructions_index), RSP, 1);
                    autopush_div_register1(&(instructions_buffer), &(instructions_index), BL);
                    autopush_sub_register8_whole_8(&(instructions_buffer), &(instructions_index), RSP, 1);
                    autopush_mov_register1_register8_pointer_offset(&(instructions_buffer), &(instructions_index), AH, RSP, 0);
                };
                done_anything_invoke = true;
            };

            if string=(function_name, "byte") {
                autopush_pop_register8(&(instructions_buffer), &(instructions_index), RAX);
                autopush_sub_register8_whole_8(&(instructions_buffer), &(instructions_index), RSP, 1);
                autopush_mov_register1_register8_pointer_offset(&(instructions_buffer), &(instructions_index), AL, RSP, 0);
                done_anything_invoke = true;
            };

            if string=(function_name, "byte_to_integer") {
                autopush_mov_whole_8_register8(&(instructions_buffer), &(instructions_index), RAX, 0);
                autopush_mov_register8_pointer_offset_register1(&(instructions_buffer), &(instructions_index), RSP, 0, AL);
                autopush_add_register8_whole_8(&(instructions_buffer), &(instructions_index), RSP, 1);
                autopush_push_register8(&(instructions_buffer), &(instructions_index), RAX);
                done_anything_invoke = true;
            };

            if string=(function_name, "short_to_integer") {
                autopush_mov_whole_8_register8(&(instructions_buffer), &(instructions_index), RAX, 0);
                autopush_mov_register8_pointer_offset_register2(&(instructions_buffer), &(instructions_index), RSP, 0, AX);
                autopush_add_register8_whole_8(&(instructions_buffer), &(instructions_index), RSP, 2);
                autopush_push_register8(&(instructions_buffer), &(instructions_index), RAX);
                done_anything_invoke = true;
            };

            if string=(function_name, "medium_to_integer") {
                autopush_mov_whole_8_register8(&(instructions_buffer), &(instructions_index), RAX, 0);
                autopush_mov_register8_pointer_offset_register4(&(instructions_buffer), &(instructions_index), RSP, 0, EAX);
                autopush_add_register8_whole_8(&(instructions_buffer), &(instructions_index), RSP, 4);
                autopush_push_register8(&(instructions_buffer), &(instructions_index), RAX);
                done_anything_invoke = true;
            };

            if string=(function_name, "*8") {
                autopush_pop_register8(&(instructions_buffer), &(instructions_index), RAX);
                autopush_mov_register8_pointer_offset_register8(&(instructions_buffer), &(instructions_index), RAX, 0, RBX);
                autopush_push_register8(&(instructions_buffer), &(instructions_index), RBX);
                done_anything_invoke = true;
            };

            if string=(function_name, "*1") {
                autopush_pop_register8(&(instructions_buffer), &(instructions_index), RAX);
                autopush_mov_whole_8_register8(&(instructions_buffer), &(instructions_index), RBX, 0);
                autopush_mov_register8_pointer_offset_register1(&(instructions_buffer), &(instructions_index), RAX, 0, BL);
                autopush_sub_register8_whole_8(&(instructions_buffer), &(instructions_index), RSP, 1);
                autopush_mov_register1_register8_pointer_offset(&(instructions_buffer), &(instructions_index), BL, RSP, 0);

                done_anything_invoke = true;
            };

            if string=(function_name, "|") {
                autopush_mov_register8_pointer_offset_register1(&(instructions_buffer), &(instructions_index), RSP, 0, AL);
                autopush_add_register8_whole_8(&(instructions_buffer), &(instructions_index), RSP, 1);
                autopush_mov_register8_pointer_offset_register1(&(instructions_buffer), &(instructions_index), RSP, 0, BL);
                autopush_add_register8_whole_8(&(instructions_buffer), &(instructions_index), RSP, 1);
                autopush_sub_register8_whole_8(&(instructions_buffer), &(instructions_index), RSP, 1);
                autopush_or_register1_register1(&(instructions_buffer), &(instructions_index), AL, BL);
                autopush_mov_register1_register8_pointer_offset(&(instructions_buffer), &(instructions_index), AL, RSP, 0);
                done_anything_invoke = true;
            };

            if string=(function_name, "&&") {
                autopush_mov_register8_pointer_offset_register1(&(instructions_buffer), &(instructions_index), RSP, 0, AL);
                autopush_add_register8_whole_8(&(instructions_buffer), &(instructions_index), RSP, 1);
                autopush_mov_register8_pointer_offset_register1(&(instructions_buffer), &(instructions_index), RSP, 0, BL);
                autopush_add_register8_whole_8(&(instructions_buffer), &(instructions_index), RSP, 1);
                autopush_sub_register8_whole_8(&(instructions_buffer), &(instructions_index), RSP, 1);
                autopush_and_register1_register1(&(instructions_buffer), &(instructions_index), AL, BL);
                autopush_mov_register1_register8_pointer_offset(&(instructions_buffer), &(instructions_index), AL, RSP, 0);
                done_anything_invoke = true;
            };

            if string=(function_name, "@syscall0") {
                autopush_pop_register8(&(instructions_buffer), &(instructions_index), RAX);
                autopush_syscall(&(instructions_buffer), &(instructions_index));
                autopush_push_register8(&(instructions_buffer), &(instructions_index), RAX);
                done_anything_invoke = true;
            };

            if string=(function_name, "@syscall1") {
                autopush_pop_register8(&(instructions_buffer), &(instructions_index), RDI);
                autopush_pop_register8(&(instructions_buffer), &(instructions_index), RAX);
                autopush_syscall(&(instructions_buffer), &(instructions_index));
                autopush_push_register8(&(instructions_buffer), &(instructions_index), RAX);
                done_anything_invoke = true;
            };

            if string=(function_name, "@syscall2") {
                autopush_pop_register8(&(instructions_buffer), &(instructions_index), RSI);
                autopush_pop_register8(&(instructions_buffer), &(instructions_index), RDI);
                autopush_pop_register8(&(instructions_buffer), &(instructions_index), RAX);
                autopush_syscall(&(instructions_buffer), &(instructions_index));
                autopush_push_register8(&(instructions_buffer), &(instructions_index), RAX);
                done_anything_invoke = true;
            };

            if string=(function_name, "@syscall3") {
                autopush_pop_register8(&(instructions_buffer), &(instructions_index), RDX);
                autopush_pop_register8(&(instructions_buffer), &(instructions_index), RSI);
                autopush_pop_register8(&(instructions_buffer), &(instructions_index), RDI);
                autopush_pop_register8(&(instructions_buffer), &(instructions_index), RAX);
                autopush_syscall(&(instructions_buffer), &(instructions_index));
                autopush_push_register8(&(instructions_buffer), &(instructions_index), RAX);
                done_anything_invoke = true;
            };

            if string=(function_name, "@syscall5") {
                autopush_pop_register8(&(instructions_buffer), &(instructions_index), R8);
                autopush_pop_register8(&(instructions_buffer), &(instructions_index), R10);
                autopush_pop_register8(&(instructions_buffer), &(instructions_index), RDX);
                autopush_pop_register8(&(instructions_buffer), &(instructions_index), RSI);
                autopush_pop_register8(&(instructions_buffer), &(instructions_index), RDI);
                autopush_pop_register8(&(instructions_buffer), &(instructions_index), RAX);
                autopush_syscall(&(instructions_buffer), &(instructions_index));
                autopush_push_register8(&(instructions_buffer), &(instructions_index), RAX);
                done_anything_invoke = true;
            };

            if !(done_anything_invoke) {
                variable call_instruction = autopush_call_near(&(instructions_buffer), &(instructions_index));
                autoarray8_set(&(calls), call_index, call_instruction);
                autoarray8_set(&(call_targets), call_index, function_name);

                call_index = whole_8+(call_index, 1);
            };
            done_anything = true;
        };

        if =(id, NODE_STRING) {
            variable string_data = @cast_*NodeStringData(pointer_data);
            variable string_value = NodeStringData->value(string_data);
            variable string_id = program_constant_index;
            program_constant_index = @cast_whole_8(+(program_constant_index, 1));

            variable id_string: any_24;
            whole_8_to_string(string_id, &(id_string));

            variable string_data_index = autopush_data_string(&(data_buffer), &(data_buffer_index), string_value);

            autopush_push_data(&(instructions_buffer), &(instructions_index), &(data_indexes_to_adjust), &(data_indexes_to_adjust_index), string_data_index);

            done_anything = true;
        };

        if =(id, NODE_DECLARE) {
            variable declare_data = @cast_*NodeDeclareData(pointer_data);
            variable variable_name = NodeDeclareData->name(declare_data);
            variable variable_type = NodeDeclareData->type(declare_data);

            autoarray8_set(&(variable_names), variable_index, variable_name);
            autoarray8_set(&(variable_types), variable_index, variable_type);
            autoarray8_set(&(variable_sizes), variable_index, get_size_linux_x86-64(variable_type, nodes, node_count));
            variable_index = whole_8+(variable_index, 1);

            done_anything = true;
        };

        if =(id, NODE_ASSIGN) {
            variable assign_data = @cast_*NodeAssignData(pointer_data);
            variable variable_name = NodeAssignData->name(assign_data);
            variable variable_type = autostringarraymap_get(&(variable_names), &(variable_types), variable_name, variable_index);

            if !(=(variable_type, 0)) {
                variable size = get_size_linux_x86-64(variable_type, nodes, node_count);
                variable variable_index_thing = autostringarraymap_get_index(&(variable_names), variable_name, variable_index);
                variable location = 0;
                variable j = 0;
                while <(j, variable_index_thing) {
                    location = @cast_whole_8(+(location, @cast_whole_8(autoarray8_get(&(variable_sizes), j))));
                    j = whole_8+(j, 1);
                };

                variable j = 0;
                while <(j, size) {
                    variable done_anything_assign = false;

                    if >(-(size, j), 7) {
                        autopush_mov_register8_pointer_offset_register8(&(instructions_buffer), &(instructions_index), RSP, j, RAX);
                        autopush_mov_register8_register8_pointer_offset(&(instructions_buffer), &(instructions_index), RAX, RBP, whole_8-(0, @cast_whole_8(-(+(size, location), j))));

                        j = whole_8+(j, 8);
                        done_anything_assign = true;
                    };
                    if &&(>(-(size, j), 3), !(done_anything_assign)) {
                        autopush_mov_register8_pointer_offset_register4(&(instructions_buffer), &(instructions_index), RSP, j, EAX);
                        autopush_mov_register4_register8_pointer_offset(&(instructions_buffer), &(instructions_index), EAX, RBP, whole_8-(0, @cast_whole_8(-(+(size, location), j))));

                        j = whole_8+(j, 4);
                        done_anything_assign = true;
                    };
                    if &&(>(-(size, j), 1), !(done_anything_assign)) {
                        autopush_mov_register8_pointer_offset_register2(&(instructions_buffer), &(instructions_index), RSP, j, AX);
                        autopush_mov_register2_register8_pointer_offset(&(instructions_buffer), &(instructions_index), AX, RBP, whole_8-(0, @cast_whole_8(-(+(size, location), j))));

                        j = whole_8+(j, 2);
                        done_anything_assign = true;
                    };
                    if &&(>(-(size, j), 0), !(done_anything_assign)) {
                        autopush_mov_register8_pointer_offset_register1(&(instructions_buffer), &(instructions_index), RSP, j, AL);
                        autopush_mov_register1_register8_pointer_offset(&(instructions_buffer), &(instructions_index), AL, RBP, whole_8-(0, @cast_whole_8(-(+(size, location), j))));

                        j = whole_8+(j, 1);
                        done_anything_assign = true;
                    };
                };
                
                autopush_add_register8_whole_8(&(instructions_buffer), &(instructions_index), RSP, size);
            } else {
                variable global_name = brk_allocate(whole_8+(length(variable_name), 2));
                copy("_", global_name, 1);
                copy(variable_name, @cast_*(+(global_name, 1)), length(variable_name));

                variable_type = autostringarraymap_get(&(globals), &(global_types), variable_name, global_index);
                variable size = get_size_linux_x86-64(variable_type, nodes, node_count);

                variable global_location = @cast_BssIndex(autostringarraymap_get(&(globals), &(global_locations), variable_name, global_index));

                variable j = 0;
                while <(j, size) {
                    variable done_anything_assign = false;

                    if >(-(size, j), 7) {
                        autopush_mov_register8_pointer_offset_register8(&(instructions_buffer), &(instructions_index), RSP, j, RAX);
                        autopush_mov_register8_bss_pointer_offset(&(instructions_buffer), &(instructions_index), &(bss_indexes_to_adjust_relative), &(bss_indexes_to_adjust_relative_index), RAX, global_location, j);

                        j = whole_8+(j, 8);
                        done_anything_assign = true;
                    };
                    if &&(>(-(size, j), 3), !(done_anything_assign)) {
                        autopush_string(&(buffer), &(buffer_index), "mov eax, [rsp+");
                        autopush_whole_8(&(buffer), &(buffer_index), j);
                        autopush_string_with_newline(&(buffer), &(buffer_index), "]");

                        autopush_string(&(buffer), &(buffer_index), "mov [");
                        autopush_string(&(buffer), &(buffer_index), global_name);
                        autopush_string(&(buffer), &(buffer_index), "+");
                        autopush_whole_8(&(buffer), &(buffer_index), j);
                        autopush_string_with_newline(&(buffer), &(buffer_index), "], eax");

                        j = whole_8+(j, 4);
                        done_anything_assign = true;
                    };
                    if &&(>(-(size, j), 1), !(done_anything_assign)) {
                        autopush_string(&(buffer), &(buffer_index), "mov ax, [rsp+");
                        autopush_whole_8(&(buffer), &(buffer_index), j);
                        autopush_string_with_newline(&(buffer), &(buffer_index), "]");

                        autopush_string(&(buffer), &(buffer_index), "mov [");
                        autopush_string(&(buffer), &(buffer_index), global_name);
                        autopush_string(&(buffer), &(buffer_index), "+");
                        autopush_whole_8(&(buffer), &(buffer_index), j);
                        autopush_string_with_newline(&(buffer), &(buffer_index), "], ax");

                        j = whole_8+(j, 2);
                        done_anything_assign = true;
                    };
                    if &&(>(-(size, j), 0), !(done_anything_assign)) {
                        autopush_string(&(buffer), &(buffer_index), "mov al, [rsp+");
                        autopush_whole_8(&(buffer), &(buffer_index), j);
                        autopush_string_with_newline(&(buffer), &(buffer_index), "]");

                        autopush_string(&(buffer), &(buffer_index), "mov [");
                        autopush_string(&(buffer), &(buffer_index), global_name);
                        autopush_string(&(buffer), &(buffer_index), "+");
                        autopush_whole_8(&(buffer), &(buffer_index), j);
                        autopush_string_with_newline(&(buffer), &(buffer_index), "], al");

                        j = whole_8+(j, 1);
                        done_anything_assign = true;
                    };
                };

                autopush_add_register8_whole_8(&(instructions_buffer), &(instructions_index), RSP, size);
            };

            done_anything = true;
        };

        if =(id, NODE_RETRIEVE) {
            variable next_id = nodes_get_id(nodes, whole_8+(i, 1));

            variable variable_name = NodeRetrieveData->name(@cast_*NodeRetrieveData(nodes_get_pointer_data(nodes, i)));
            variable variable_type = autostringarraymap_get(&(variable_names), &(variable_types), variable_name, variable_index);
            if !(=(variable_type, 0)) {
                variable size = get_size_linux_x86-64(variable_type, nodes, node_count);
                variable variable_index_thing = autostringarraymap_get_index(&(variable_names), variable_name, variable_index);
                variable location = 0;
                variable j = 0;
                while <(j, variable_index_thing) {
                    location = @cast_whole_8(+(location, @cast_whole_8(autoarray8_get(&(variable_sizes), j))));
                    j = whole_8+(j, 1);
                };

                if =(next_id, NODE_POINTER) {
                    variable thing = instructions_index;
                    autopush_lea_register8_offset_register8(&(instructions_buffer), &(instructions_index), RBP, whole_8-(0, whole_8+(size, location)), RAX);
                    autopush_push_register8(&(instructions_buffer), &(instructions_index), RAX);
                } else {
                    autopush_sub_register8_whole_8(&(instructions_buffer), &(instructions_index), RSP, size);

                    variable j = 0;
                    while <(j, size) {
                        variable done_anything_assign = false;

                        if >(-(size, j), 7) {
                            autopush_mov_register8_pointer_offset_register8(&(instructions_buffer), &(instructions_index), RBP, @cast_whole_8(-(0, -(+(size, location), j))), RAX);
                            autopush_mov_register8_register8_pointer_offset(&(instructions_buffer), &(instructions_index), RAX, RSP, j);
                            j = whole_8+(j, 8);
                            done_anything_assign = true;
                        };
                        if &&(>(-(size, j), 3), !(done_anything_assign)) {
                            autopush_mov_register8_pointer_offset_register4(&(instructions_buffer), &(instructions_index), RBP, @cast_whole_8(-(0, -(+(size, location), j))), EAX);
                            autopush_mov_register4_register8_pointer_offset(&(instructions_buffer), &(instructions_index), EAX, RSP, j);
                            j = whole_8+(j, 4);
                            done_anything_assign = true;
                        };
                        if &&(>(-(size, j), 1), !(done_anything_assign)) {
                            autopush_mov_register8_pointer_offset_register2(&(instructions_buffer), &(instructions_index), RBP, @cast_whole_8(-(0, -(+(size, location), j))), AX);
                            autopush_mov_register2_register8_pointer_offset(&(instructions_buffer), &(instructions_index), AX, RSP, j);

                            j = whole_8+(j, 2);
                            done_anything_assign = true;
                        };
                        if &&(>(-(size, j), 0), !(done_anything_assign)) {
                            autopush_mov_register8_pointer_offset_register1(&(instructions_buffer), &(instructions_index), RBP, @cast_whole_8(-(0, -(+(size, location), j))), AL);
                            autopush_mov_register1_register8_pointer_offset(&(instructions_buffer), &(instructions_index), AL, RSP, j);

                            j = whole_8+(j, 1);
                            done_anything_assign = true;
                        };
                    };
                };

            } else {
                variable function_argument_names2 = autostringarraymap_get(&(functions), &(function_argument_names), current_function, index);
                variable function_arguments2 = autostringarraymap_get(&(functions), &(function_arguments), current_function, index);

                variable_type = stringarraymap_get(function_argument_names2, function_arguments2, variable_name, array8_length(function_arguments2));

                if !(=(variable_type, 0)) {
                    variable size = get_size_linux_x86-64(variable_type, nodes, node_count);
                    variable location = get_size_multiple_reversed_linux_x86-64(function_arguments2, stringarraymap_get_index(function_argument_names2, variable_name, array8_length(function_argument_names2)), nodes, node_count);

                    if =(next_id, NODE_POINTER) {
                        autopush_lea_register8_offset_register8(&(instructions_buffer), &(instructions_index), RBP, whole_8+(16, location), RAX);
                        autopush_push_register8(&(instructions_buffer), &(instructions_index), RAX);
                    } else {
                        autopush_sub_register8_whole_8(&(instructions_buffer), &(instructions_index), RSP, size);

                        variable j = 0;
                        while <(j, size) {
                            variable done_anything_assign = false;
                            if >(-(size, j), 7) {
                                autopush_mov_register8_pointer_offset_register8(&(instructions_buffer), &(instructions_index), RBP, @cast_whole_8(+(+(16, location), j)), RAX);
                                autopush_mov_register8_register8_pointer_offset(&(instructions_buffer), &(instructions_index), RAX, RSP, j);
                                j = whole_8+(j, 8);
                                done_anything_assign = true;
                            };
                            if &&(>(-(size, j), 3), !(done_anything_assign)) {
                                autopush_mov_register8_pointer_offset_register4(&(instructions_buffer), &(instructions_index), RBP, @cast_whole_8(+(+(16, location), j)), EAX);
                                autopush_mov_register4_register8_pointer_offset(&(instructions_buffer), &(instructions_index), EAX, RSP, j);
                                j = whole_8+(j, 4);
                                done_anything_assign = true;
                            };
                            if &&(>(-(size, j), 1), !(done_anything_assign)) {
                                autopush_mov_register8_pointer_offset_register2(&(instructions_buffer), &(instructions_index), RBP, @cast_whole_8(+(+(16, location), j)), AX);
                                autopush_mov_register2_register8_pointer_offset(&(instructions_buffer), &(instructions_index), AX, RSP, j);
                                j = whole_8+(j, 2);
                                done_anything_assign = true;
                            };
                            if &&(>(-(size, j), 0), !(done_anything_assign)) {
                                autopush_mov_register8_pointer_offset_register1(&(instructions_buffer), &(instructions_index), RBP, @cast_whole_8(+(+(16, location), j)), AL);
                                autopush_mov_register1_register8_pointer_offset(&(instructions_buffer), &(instructions_index), AL, RSP, j);
                                j = whole_8+(j, 1);
                                done_anything_assign = true;
                            };
                        };
                    };
                } else {
                    variable_type = autostringarraymap_get(&(globals), &(global_types), variable_name, global_index);

                    if !(=(variable_type, 0)) {
                        variable global_name = brk_allocate(whole_8+(length(variable_name), 2));
                        copy("_", global_name, 1);
                        copy(variable_name, @cast_*(+(global_name, 1)), length(variable_name));

                        variable size = get_size_linux_x86-64(variable_type, nodes, node_count);

                        variable global_index2 = @cast_BssIndex(autostringarraymap_get(&(globals), &(global_locations), variable_name, global_index));

                        if =(next_id, NODE_POINTER) {
                            autopush_push_bss(&(instructions_buffer), &(instructions_index), &(bss_indexes_to_adjust), &(bss_indexes_to_adjust_index), global_index2);
                        } else {
                            autopush_sub_register8_whole_8(&(instructions_buffer), &(instructions_index), RSP, size);

                            variable j = 0;
                            while <(j, size) {
                                if >(-(size, j), 7) {
                                    autopush_mov_bss_offset_pointer_register8(&(instructions_buffer), &(instructions_index), &(bss_indexes_to_adjust_relative), &(bss_indexes_to_adjust_relative_index),  global_index2, j, RAX);
                                    autopush_mov_register8_register8_pointer_offset(&(instructions_buffer), &(instructions_index), RAX, RSP, j);
                                    j = whole_8+(j, 8);
                                    done_anything_assign = true;
                                };
                                if &&(>(-(size, j), 3), !(done_anything_assign)) {
                                    autopush_mov_bss_offset_pointer_register4(&(instructions_buffer), &(instructions_index), &(bss_indexes_to_adjust_relative), &(bss_indexes_to_adjust_relative_index),  global_index2, j, EAX);
                                    autopush_mov_register4_register8_pointer_offset(&(instructions_buffer), &(instructions_index), EAX, RSP, j);
                                    j = whole_8+(j, 4);
                                    done_anything_assign = true;
                                };
                                if &&(>(-(size, j), 1), !(done_anything_assign)) {
                                    autopush_mov_bss_offset_pointer_register2(&(instructions_buffer), &(instructions_index), &(bss_indexes_to_adjust_relative), &(bss_indexes_to_adjust_relative_index),  global_index2, j, AX);
                                    autopush_mov_register2_register8_pointer_offset(&(instructions_buffer), &(instructions_index), AX, RSP, j);
                                    j = whole_8+(j, 2);
                                    done_anything_assign = true;
                                };
                                if &&(>(-(size, j), 0), !(done_anything_assign)) {
                                    autopush_mov_bss_offset_pointer_register1(&(instructions_buffer), &(instructions_index), &(bss_indexes_to_adjust_relative), &(bss_indexes_to_adjust_relative_index),  global_index2, j, AL);
                                    autopush_mov_register1_register8_pointer_offset(&(instructions_buffer), &(instructions_index), AL, RSP, j);
                                    j = whole_8+(j, 1);
                                    done_anything_assign = true;
                                };
                            };
                        };
                    } else {
                        variable_type = autostringarraymap_get(&(constants), &(constant_types), variable_name, constant_index);

                        variable constant_name = brk_allocate(whole_8+(length(variable_name), 2));
                        copy("_", constant_name, 1);
                        copy(variable_name, @cast_*(+(constant_name, 1)), length(variable_name));

                        variable constant_location = @cast_DataIndex(autostringarraymap_get(&(constants), &(constant_locations), variable_name, constant_index));

                        variable size = get_size_linux_x86-64(variable_type, nodes, node_count);

                        if =(next_id, NODE_POINTER) {
                            autopush_push_data(&(instructions_buffer), &(instructions_index), &(data_indexes_to_adjust), &(data_indexes_to_adjust_index), constant_location);
                        } else {
                            autopush_sub_register8_whole_8(&(instructions_buffer), &(instructions_index), RSP, size);

                            variable j = 0;
                            while <(j, size) {
                                variable done_anything_assign = false;
                                if >(-(size, j), 7) {
                                    autopush_mov_data_offset_pointer_register8(&(instructions_buffer), &(instructions_index), &(data_indexes_to_adjust_relative), &(data_indexes_to_adjust_relative_index), constant_location, j, RAX);
                                    autopush_mov_register8_register8_pointer_offset(&(instructions_buffer), &(instructions_index), RAX, RSP, j);
                                    j = whole_8+(j, 8);
                                    done_anything_assign = true;
                                };
                                if &&(>(-(size, j), 3), !(done_anything_assign)) {
                                    autopush_mov_data_offset_pointer_register4(&(instructions_buffer), &(instructions_index), &(data_indexes_to_adjust_relative), &(data_indexes_to_adjust_relative_index), constant_location, j, EAX);
                                    autopush_mov_register4_register8_pointer_offset(&(instructions_buffer), &(instructions_index), EAX, RSP, j);
                                    j = whole_8+(j, 4);
                                    done_anything_assign = true;
                                };
                                if &&(>(-(size, j), 1), !(done_anything_assign)) {
                                    autopush_mov_data_offset_pointer_register2(&(instructions_buffer), &(instructions_index), &(data_indexes_to_adjust_relative), &(data_indexes_to_adjust_relative_index), constant_location, j, AX);
                                    autopush_mov_register2_register8_pointer_offset(&(instructions_buffer), &(instructions_index), AX, RSP, j);
                                    j = whole_8+(j, 2);
                                    done_anything_assign = true;
                                };
                                if &&(>(-(size, j), 0), !(done_anything_assign)) {
                                    autopush_mov_data_offset_pointer_register1(&(instructions_buffer), &(instructions_index), &(data_indexes_to_adjust_relative), &(data_indexes_to_adjust_relative_index), constant_location, j, AL);
                                    autopush_mov_register1_register8_pointer_offset(&(instructions_buffer), &(instructions_index), AL, RSP, j);
                                    j = whole_8+(j, 1);
                                    done_anything_assign = true;
                                };
                            };
                        };
                    };

                };
                
            };

            done_anything = true;
        };

        if =(id, NODE_RETURN) {
            variable arguments_size = get_size_multiple_linux_x86-64(autostringarraymap_get(&(functions), &(function_arguments), current_function, index), 999, nodes, node_count);
            variable returns_size = get_size_multiple_linux_x86-64(autostringarraymap_get(&(functions), &(function_returns), current_function, index), 999, nodes, node_count);
            variable returns_size_rounded = returns_size;
            if !(=(%(returns_size_rounded, 8), 0)) {
                returns_size_rounded = whole_8+(returns_size_rounded, @cast_whole_8(-(8, %(returns_size, 8))));
            };

            variable j = 8;
            variable k = whole_8+(returns_size, 8);

            variable thing = instructions_index;
            autopush_mov_register8_pointer_offset_register8(&(instructions_buffer), &(instructions_index), RBP, 8, RCX);
            autopush_mov_register8_pointer_offset_register8(&(instructions_buffer), &(instructions_index), RBP, 0, RDX);

            returns_size = whole_8+(returns_size, 8);

            while <(j, returns_size) {
                variable done_anything_assign = false;

                if >(-(returns_size, j), 7) {
                    k = @cast_whole_8(-(k, 8));

                    autopush_mov_register8_pointer_offset_register8(&(instructions_buffer), &(instructions_index), RSP, @cast_whole_8(-(-(returns_size, j), 8)), RAX);
                    autopush_mov_register8_register8_pointer_offset(&(instructions_buffer), &(instructions_index), RAX, RBP, @cast_whole_8(+(+(16, +(-(arguments_size, returns_size), k)), 0)));

                    j = whole_8+(j, 8);
                };
                if &&(>(-(returns_size, j), 3), !(done_anything_assign)) {
                    k = @cast_whole_8(-(k, 4));

                    autopush_mov_register8_pointer_offset_register4(&(instructions_buffer), &(instructions_index), RSP, @cast_whole_8(-(-(returns_size, j), 4)), EAX);
                    autopush_mov_register4_register8_pointer_offset(&(instructions_buffer), &(instructions_index), EAX, RBP, @cast_whole_8(+(+(16, +(-(arguments_size, returns_size), k)), 0)));

                    j = whole_8+(j, 4);
                };
                if &&(>(-(returns_size, j), 1), !(done_anything_assign)) {
                    k = @cast_whole_8(-(k, 2));

                    autopush_mov_register8_pointer_offset_register2(&(instructions_buffer), &(instructions_index), RSP, @cast_whole_8(-(-(returns_size, j), 2)), AX);
                    autopush_mov_register2_register8_pointer_offset(&(instructions_buffer), &(instructions_index), AX, RBP, @cast_whole_8(+(+(16, +(-(arguments_size, returns_size), k)), 0)));

                    j = whole_8+(j, 2);
                };
                if &&(>(-(returns_size, j), 0), !(done_anything_assign)) {
                    k = @cast_whole_8(-(k, 1));

                    autopush_mov_register8_pointer_offset_register1(&(instructions_buffer), &(instructions_index), RSP, @cast_whole_8(-(-(returns_size, j), 1)), AL);
                    autopush_mov_register1_register8_pointer_offset(&(instructions_buffer), &(instructions_index), AL, RBP, @cast_whole_8(+(+(16, +(-(arguments_size, returns_size), k)), 0)));

                    j = whole_8+(j, 1);
                };
            };

            autopush_mov_register8_register8(&(instructions_buffer), &(instructions_index), RBP, RSP);

            autopush_add_register8_whole_8(&(instructions_buffer), &(instructions_index), RSP, @cast_whole_8(+(+(16, +(-(arguments_size, returns_size), k)), 0)));

            returns_size = @cast_whole_8(-(returns_size, 8));

            autopush_push_register8(&(instructions_buffer), &(instructions_index), RDX);
            autopush_pop_register8(&(instructions_buffer), &(instructions_index), RBP);
            autopush_push_register8(&(instructions_buffer), &(instructions_index), RCX);
            autopush_ret(&(instructions_buffer), &(instructions_index));
                
            done_anything = true;
        };

        if =(id, NODE_POINTER) {
            done_anything = true;
        };

        if =(id, NODE_JUMP_CONDITIONAL) {
            variable jump_conditional_data = @cast_*NodeJumpConditionalData(pointer_data);
            variable target = NodeJumpConditionalData->target_id(jump_conditional_data);
            variable conditional = NodeJumpConditionalData->desired_state(jump_conditional_data);

            autopush_mov_whole_8_register8(&(instructions_buffer), &(instructions_index), RAX, 0);
            autopush_mov_register8_pointer_offset_register1(&(instructions_buffer), &(instructions_index), RSP, 0, AL);
            autopush_add_register8_whole_8(&(instructions_buffer), &(instructions_index), RSP, 1);
            autopush_mov_whole_8_register8(&(instructions_buffer), &(instructions_index), RBX, 0);
            autopush_mov_whole_8_register8(&(instructions_buffer), &(instructions_index), RCX, 1);

            if @cast_boolean(conditional) {
                autopush_cmp_register8_register8(&(instructions_buffer), &(instructions_index), RAX, RCX);
                done_anything = true;
            } else {
                autopush_cmp_register8_register8(&(instructions_buffer), &(instructions_index), RAX, RBX);
            };

            variable jump_instruction = autopush_je_near(&(instructions_buffer), &(instructions_index));
            autoarray8_set(&(jes), je_index, jump_instruction);
            autoarray8_set(&(je_targets), je_index, target);

            je_index = whole_8+(je_index, 1);
            done_anything = true;
        };

        if =(id, NODE_JUMP) {
            variable jump_data = @cast_*NodeJumpData(pointer_data);
            variable target = NodeJumpData->target_id(jump_data);

            variable jump_instruction = autopush_jmp_near(&(instructions_buffer), &(instructions_index));
            autoarray8_set(&(jmps), jmp_index, jump_instruction);
            autoarray8_set(&(jmp_targets), jmp_index, target);

            jmp_index = whole_8+(jmp_index, 1);
            done_anything = true;
        };

        if =(id, NODE_TARGET) {
            variable target_data = @cast_*NodeTargetData(pointer_data);
            variable target = NodeTargetData->id(target_data);
            
            autoarray8_set(&(targets), target, get_instruction(&(instructions_buffer), &(instructions_index)));
            done_anything = true;
        };

        if =(id, NODE_ENDFUNCTION) {
            done_anything = true;
        };

        if =(id, NODE_STRUCTURE) {
            done_anything = true;
        };

        if =(id, NODE_GLOBAL) {
            variable global_data = @cast_*NodeGlobalData(pointer_data);
            variable name2 = NodeGlobalData->name(global_data);
            variable type = NodeGlobalData->type(global_data);
            variable global_name = brk_allocate(whole_8+(length(name2), 2));
            copy("_", global_name, 1);
            copy(name2, @cast_*(+(global_name, 1)), length(name2));
            
            variable size = get_size_linux_x86-64(type, nodes, node_count);

            autopush_string(&(bss_buffer), &(bss_buffer_index), global_name);
            autopush_string(&(bss_buffer), &(bss_buffer_index), ": rb ");
            autopush_whole_8(&(bss_buffer), &(bss_buffer_index), size);
            autopush_string_with_newline(&(bss_buffer), &(bss_buffer_index), "");
            
            done_anything = true;
        };

        if =(id, NODE_CONSTANT) {
            variable constant_data = @cast_*NodeConstantData(pointer_data);
            variable name3 = NodeConstantData->name(constant_data);
            variable type2 = NodeConstantData->type(constant_data);
            //TODO: reassigning locals should warn
            variable value2 = NodeConstantData->value(constant_data);

            variable constant_name = brk_allocate(whole_8+(length(name3), 2));
            copy("_", constant_name, 1);
            copy(name3, @cast_*(+(constant_name, 1)), length(name3));

            done_anything = true;
        };

        if =(id, NODE_ZERO) {
            variable zero_data = @cast_*NodeZeroData(pointer_data);
            variable type2 = NodeZeroData->type(zero_data);

            variable size = get_size_linux_x86-64(type2, nodes, node_count);

            autopush_sub_register8_whole_8(&(instructions_buffer), &(instructions_index), RSP, size);

            variable j = 0;
            while <(j, size) {
                variable done_anything_assign = false;

                if >(-(size, j), 7) {
                    autopush_mov_whole_8_register8(&(instructions_buffer), &(instructions_index), RAX, 0);
                    autopush_mov_register8_register8_pointer_offset(&(instructions_buffer), &(instructions_index), RAX, RSP, j);

                    j = whole_8+(j, 8);
                    done_anything_assign = true;
                };
                if &&(>(-(size, j), 3), !(done_anything_assign)) {
                    autopush_mov_whole_8_register8(&(instructions_buffer), &(instructions_index), RAX, 0);
                    autopush_mov_register4_register8_pointer_offset(&(instructions_buffer), &(instructions_index), EAX, RSP, j);

                    j = whole_8+(j, 4);
                    done_anything_assign = true;
                };
                if &&(>(-(size, j), 1), !(done_anything_assign)) {
                    autopush_mov_whole_8_register8(&(instructions_buffer), &(instructions_index), RAX, 0);
                    autopush_mov_register2_register8_pointer_offset(&(instructions_buffer), &(instructions_index), AX, RSP, j);

                    j = whole_8+(j, 2);
                    done_anything_assign = true;
                };
                if &&(>(-(size, j), 0), !(done_anything_assign)) {
                    autopush_mov_whole_8_register8(&(instructions_buffer), &(instructions_index), RAX, 0);
                    autopush_mov_register1_register8_pointer_offset(&(instructions_buffer), &(instructions_index), AL, RSP, j);

                    j = whole_8+(j, 1);
                    done_anything_assign = true;
                };
            };

            done_anything = true;
        };
        if =(id, NODE_INCLUDE) {
            done_anything = true;
        };

        if !(done_anything) {
            print("Unhandled ");
            @print_integer(id);
        };

        i = @cast_whole_8(+(i, 1));
    };

    variable print_whole_8_index = get_instruction(&(instructions_buffer), &(instructions_index));
    autopush_byte(&(instructions_buffer), &(instructions_index), byte(94));
    autopush_byte(&(instructions_buffer), &(instructions_index), byte(95));
    autopush_byte(&(instructions_buffer), &(instructions_index), byte(87));
    autopush_byte(&(instructions_buffer), &(instructions_index), byte(86));
    autopush_byte(&(instructions_buffer), &(instructions_index), byte(73));
    autopush_byte(&(instructions_buffer), &(instructions_index), byte(185));
    autopush_byte(&(instructions_buffer), &(instructions_index), byte(205));
    autopush_byte(&(instructions_buffer), &(instructions_index), byte(204));
    autopush_byte(&(instructions_buffer), &(instructions_index), byte(204));
    autopush_byte(&(instructions_buffer), &(instructions_index), byte(204));
    autopush_byte(&(instructions_buffer), &(instructions_index), byte(204));
    autopush_byte(&(instructions_buffer), &(instructions_index), byte(204));
    autopush_byte(&(instructions_buffer), &(instructions_index), byte(204));
    autopush_byte(&(instructions_buffer), &(instructions_index), byte(204));
    autopush_byte(&(instructions_buffer), &(instructions_index), byte(72));
    autopush_byte(&(instructions_buffer), &(instructions_index), byte(131));
    autopush_byte(&(instructions_buffer), &(instructions_index), byte(236));
    autopush_byte(&(instructions_buffer), &(instructions_index), byte(40));
    autopush_byte(&(instructions_buffer), &(instructions_index), byte(198));
    autopush_byte(&(instructions_buffer), &(instructions_index), byte(68));
    autopush_byte(&(instructions_buffer), &(instructions_index), byte(36));
    autopush_byte(&(instructions_buffer), &(instructions_index), byte(31));
    autopush_byte(&(instructions_buffer), &(instructions_index), byte(10));
    autopush_byte(&(instructions_buffer), &(instructions_index), byte(72));
    autopush_byte(&(instructions_buffer), &(instructions_index), byte(141));
    autopush_byte(&(instructions_buffer), &(instructions_index), byte(76));
    autopush_byte(&(instructions_buffer), &(instructions_index), byte(36));
    autopush_byte(&(instructions_buffer), &(instructions_index), byte(30));
    autopush_byte(&(instructions_buffer), &(instructions_index), byte(72));
    autopush_byte(&(instructions_buffer), &(instructions_index), byte(137));
    autopush_byte(&(instructions_buffer), &(instructions_index), byte(248));
    autopush_byte(&(instructions_buffer), &(instructions_index), byte(76));
    autopush_byte(&(instructions_buffer), &(instructions_index), byte(141));
    autopush_byte(&(instructions_buffer), &(instructions_index), byte(68));
    autopush_byte(&(instructions_buffer), &(instructions_index), byte(36));
    autopush_byte(&(instructions_buffer), &(instructions_index), byte(32));
    autopush_byte(&(instructions_buffer), &(instructions_index), byte(73));
    autopush_byte(&(instructions_buffer), &(instructions_index), byte(247));
    autopush_byte(&(instructions_buffer), &(instructions_index), byte(225));
    autopush_byte(&(instructions_buffer), &(instructions_index), byte(72));
    autopush_byte(&(instructions_buffer), &(instructions_index), byte(137));
    autopush_byte(&(instructions_buffer), &(instructions_index), byte(248));
    autopush_byte(&(instructions_buffer), &(instructions_index), byte(73));
    autopush_byte(&(instructions_buffer), &(instructions_index), byte(41));
    autopush_byte(&(instructions_buffer), &(instructions_index), byte(200));
    autopush_byte(&(instructions_buffer), &(instructions_index), byte(72));
    autopush_byte(&(instructions_buffer), &(instructions_index), byte(193));
    autopush_byte(&(instructions_buffer), &(instructions_index), byte(234));
    autopush_byte(&(instructions_buffer), &(instructions_index), byte(3));
    autopush_byte(&(instructions_buffer), &(instructions_index), byte(72));
    autopush_byte(&(instructions_buffer), &(instructions_index), byte(141));
    autopush_byte(&(instructions_buffer), &(instructions_index), byte(52));
    autopush_byte(&(instructions_buffer), &(instructions_index), byte(146));
    autopush_byte(&(instructions_buffer), &(instructions_index), byte(72));
    autopush_byte(&(instructions_buffer), &(instructions_index), byte(1));
    autopush_byte(&(instructions_buffer), &(instructions_index), byte(246));
    autopush_byte(&(instructions_buffer), &(instructions_index), byte(72));
    autopush_byte(&(instructions_buffer), &(instructions_index), byte(41));
    autopush_byte(&(instructions_buffer), &(instructions_index), byte(240));
    autopush_byte(&(instructions_buffer), &(instructions_index), byte(131));
    autopush_byte(&(instructions_buffer), &(instructions_index), byte(192));
    autopush_byte(&(instructions_buffer), &(instructions_index), byte(48));
    autopush_byte(&(instructions_buffer), &(instructions_index), byte(136));
    autopush_byte(&(instructions_buffer), &(instructions_index), byte(1));
    autopush_byte(&(instructions_buffer), &(instructions_index), byte(72));
    autopush_byte(&(instructions_buffer), &(instructions_index), byte(137));
    autopush_byte(&(instructions_buffer), &(instructions_index), byte(248));
    autopush_byte(&(instructions_buffer), &(instructions_index), byte(72));
    autopush_byte(&(instructions_buffer), &(instructions_index), byte(137));
    autopush_byte(&(instructions_buffer), &(instructions_index), byte(215));
    autopush_byte(&(instructions_buffer), &(instructions_index), byte(72));
    autopush_byte(&(instructions_buffer), &(instructions_index), byte(137));
    autopush_byte(&(instructions_buffer), &(instructions_index), byte(202));
    autopush_byte(&(instructions_buffer), &(instructions_index), byte(72));
    autopush_byte(&(instructions_buffer), &(instructions_index), byte(131));
    autopush_byte(&(instructions_buffer), &(instructions_index), byte(233));
    autopush_byte(&(instructions_buffer), &(instructions_index), byte(1));
    autopush_byte(&(instructions_buffer), &(instructions_index), byte(72));
    autopush_byte(&(instructions_buffer), &(instructions_index), byte(131));
    autopush_byte(&(instructions_buffer), &(instructions_index), byte(248));
    autopush_byte(&(instructions_buffer), &(instructions_index), byte(9));
    autopush_byte(&(instructions_buffer), &(instructions_index), byte(119));
    autopush_byte(&(instructions_buffer), &(instructions_index), byte(201));
    autopush_byte(&(instructions_buffer), &(instructions_index), byte(72));
    autopush_byte(&(instructions_buffer), &(instructions_index), byte(141));
    autopush_byte(&(instructions_buffer), &(instructions_index), byte(68));
    autopush_byte(&(instructions_buffer), &(instructions_index), byte(36));
    autopush_byte(&(instructions_buffer), &(instructions_index), byte(32));
    autopush_byte(&(instructions_buffer), &(instructions_index), byte(191));
    autopush_byte(&(instructions_buffer), &(instructions_index), byte(1));
    autopush_byte(&(instructions_buffer), &(instructions_index), byte(0));
    autopush_byte(&(instructions_buffer), &(instructions_index), byte(0));
    autopush_byte(&(instructions_buffer), &(instructions_index), byte(0));
    autopush_byte(&(instructions_buffer), &(instructions_index), byte(72));
    autopush_byte(&(instructions_buffer), &(instructions_index), byte(41));
    autopush_byte(&(instructions_buffer), &(instructions_index), byte(194));
    autopush_byte(&(instructions_buffer), &(instructions_index), byte(49));
    autopush_byte(&(instructions_buffer), &(instructions_index), byte(192));
    autopush_byte(&(instructions_buffer), &(instructions_index), byte(72));
    autopush_byte(&(instructions_buffer), &(instructions_index), byte(141));
    autopush_byte(&(instructions_buffer), &(instructions_index), byte(116));
    autopush_byte(&(instructions_buffer), &(instructions_index), byte(20));
    autopush_byte(&(instructions_buffer), &(instructions_index), byte(32));
    autopush_byte(&(instructions_buffer), &(instructions_index), byte(76));
    autopush_byte(&(instructions_buffer), &(instructions_index), byte(137));
    autopush_byte(&(instructions_buffer), &(instructions_index), byte(194));
    autopush_byte(&(instructions_buffer), &(instructions_index), byte(72));
    autopush_byte(&(instructions_buffer), &(instructions_index), byte(199));
    autopush_byte(&(instructions_buffer), &(instructions_index), byte(192));
    autopush_byte(&(instructions_buffer), &(instructions_index), byte(1));
    autopush_byte(&(instructions_buffer), &(instructions_index), byte(0));
    autopush_byte(&(instructions_buffer), &(instructions_index), byte(0));
    autopush_byte(&(instructions_buffer), &(instructions_index), byte(0));
    autopush_byte(&(instructions_buffer), &(instructions_index), byte(15));
    autopush_byte(&(instructions_buffer), &(instructions_index), byte(5));
    autopush_byte(&(instructions_buffer), &(instructions_index), byte(72));
    autopush_byte(&(instructions_buffer), &(instructions_index), byte(131));
    autopush_byte(&(instructions_buffer), &(instructions_index), byte(196));
    autopush_byte(&(instructions_buffer), &(instructions_index), byte(40));
    autopush_byte(&(instructions_buffer), &(instructions_index), byte(88));
    autopush_byte(&(instructions_buffer), &(instructions_index), byte(72));
    autopush_byte(&(instructions_buffer), &(instructions_index), byte(131));
    autopush_byte(&(instructions_buffer), &(instructions_index), byte(196));
    autopush_byte(&(instructions_buffer), &(instructions_index), byte(8));
    autopush_byte(&(instructions_buffer), &(instructions_index), byte(80));
    autopush_byte(&(instructions_buffer), &(instructions_index), byte(195));

    variable main_index = autostringarraymap_get(&(functions), &(function_locations), "main", index);
    set_call_value(&(instructions_buffer), main_call, @cast_InstructionIndex(main_index));

    variable i = 0;
    while <(i, call_index) {
        variable call_instruction2 = @cast_InstructionIndex(autoarray8_get(&(calls), i));
        variable call_name = @cast_*(autoarray8_get(&(call_targets), i));

        variable function_index: InstructionIndex;

        if string=(call_name, "@print_integer") {
            function_index = print_whole_8_index;
        };

        if !(string=(call_name, "@print_integer")) {
            function_index = @cast_InstructionIndex(autostringarraymap_get(&(functions), &(function_locations), call_name, index));
        };

        set_call_value(&(instructions_buffer), call_instruction2, function_index);
        i = whole_8+(i, 1);
    };

    variable i = 0;
    while <(i, jmp_index) {
        variable jmp_instruction2 = @cast_InstructionIndex(autoarray8_get(&(jmps), i));
        variable jmp_target = @cast_whole_8(autoarray8_get(&(jmp_targets), i));
        variable target_location = autoarray8_get(&(targets), jmp_target);
        set_jmp_value(&(instructions_buffer), jmp_instruction2, @cast_InstructionIndex(target_location));
        i = whole_8+(i, 1);
    };

    variable i = 0;
    while <(i, je_index) {
        variable jmp_instruction2 = @cast_InstructionIndex(autoarray8_get(&(jes), i));
        variable jmp_target = @cast_whole_8(autoarray8_get(&(je_targets), i));
        variable target_location = autoarray8_get(&(targets), jmp_target);
        set_je_value(&(instructions_buffer), jmp_instruction2, @cast_InstructionIndex(target_location));
        i = whole_8+(i, 1);
    };

    if =(name, 0) {
        println("No input files provided!");
        exit(1);
    };

    variable name_new = brk_allocate(whole_8-(length(name), 6));
    copy(name, name_new, whole_8-(length(name), 7));

    variable asm_output = autobuffer_new(32);
    variable asm_output_length: whole_8 = 0;
    autopush_string(&(asm_output), &(asm_output_length), "build/");
    autopush_string(&(asm_output), &(asm_output_length), name_new);

    variable start_address = 4194304;

    variable i = 0;
    while <(i, data_indexes_to_adjust_index) {
        variable index = @cast_whole_8(autoarray8_get(&(data_indexes_to_adjust), i));
        variable value_new = @cast_whole_8(+(@cast_whole_8(medium_to_integer(autobuffer_get_any_4(&(instructions_buffer), index))), +(instructions_index, 232)));
        autobuffer_set_any_4(&(instructions_buffer), whole_8_to_medium(whole_8+(value_new, whole_8+(start_address, 4096))), index);
        i = @cast_whole_8(+(i, 1));
    };

    variable i = 0;
    while <(i, bss_indexes_to_adjust_index) {
        variable index = @cast_whole_8(autoarray8_get(&(bss_indexes_to_adjust), i));
        variable value_new = @cast_whole_8(+(@cast_whole_8(medium_to_integer(autobuffer_get_any_4(&(instructions_buffer), index))), +(+(instructions_index, 232), data_buffer_index)));
        autobuffer_set_any_4(&(instructions_buffer), whole_8_to_medium(whole_8+(value_new, whole_8+(start_address, 8192))), index);
        i = @cast_whole_8(+(i, 1));
    };

    variable i = 0;
    while <(i, data_indexes_to_adjust_relative_index) {
        variable index = @cast_whole_8(autoarray8_get(&(data_indexes_to_adjust_relative), i));
        variable value_new = @cast_whole_8(+(@cast_whole_8(medium_to_integer(autobuffer_get_any_4(&(instructions_buffer), index))), instructions_index));
        variable actual_value = @cast_whole_8(medium_to_integer(autobuffer_get_any_4(&(instructions_buffer), index)));
        autobuffer_set_any_4(&(instructions_buffer), whole_8_to_medium(whole_8+(whole_8-(value_new, whole_8+(index, 4)), 4096)), index);
        i = @cast_whole_8(+(i, 1));
    };

    variable i = 0;
    while <(i, bss_indexes_to_adjust_relative_index) {
        variable index = @cast_whole_8(autoarray8_get(&(bss_indexes_to_adjust_relative), i));
        variable value_new = @cast_whole_8(+(@cast_whole_8(medium_to_integer(autobuffer_get_any_4(&(instructions_buffer), index))), +(instructions_index, data_buffer_index)));
        variable actual_value = @cast_whole_8(medium_to_integer(autobuffer_get_any_4(&(instructions_buffer), index)));
        autobuffer_set_any_4(&(instructions_buffer), whole_8_to_medium(whole_8+(whole_8-(value_new, whole_8+(index, 4)), 8192)), index);
        i = @cast_whole_8(+(i, 1));
    };

    autobuffer_set(&(output), AutoBuffer->buffer(&(instructions_buffer)), 232, instructions_index);
    autobuffer_set(&(output), AutoBuffer->buffer(&(data_buffer)), @cast_whole_8(+(232, instructions_index)), data_buffer_index);

    variable program_header: ELF64ProgramHeader;
    ELF64ProgramHeader<-type(&(program_header), whole_8_to_medium(1));
    ELF64ProgramHeader<-location(&(program_header), 0);
    ELF64ProgramHeader<-virtual_address(&(program_header), start_address);
    ELF64ProgramHeader<-physical_address(&(program_header), start_address);
    ELF64ProgramHeader<-size_file(&(program_header), @cast_whole_8(+(instructions_index, 232)));
    ELF64ProgramHeader<-size_memory(&(program_header), @cast_whole_8(+(instructions_index, 232)));
    ELF64ProgramHeader<-flags(&(program_header), whole_8_to_medium(5));
    ELF64ProgramHeader<-alignment(&(program_header), 4096);

    variable program_header2: ELF64ProgramHeader;
    ELF64ProgramHeader<-type(&(program_header2), whole_8_to_medium(1));
    ELF64ProgramHeader<-location(&(program_header2), @cast_whole_8(+(instructions_index, 232)));
    ELF64ProgramHeader<-virtual_address(&(program_header2), @cast_whole_8(+(232, +(instructions_index, +(start_address, 4096)))));
    ELF64ProgramHeader<-physical_address(&(program_header2), @cast_whole_8(+(232, +(instructions_index, +(start_address, 4096)))));
    ELF64ProgramHeader<-size_file(&(program_header2), data_buffer_index);
    ELF64ProgramHeader<-size_memory(&(program_header2), data_buffer_index);
    ELF64ProgramHeader<-flags(&(program_header2), whole_8_to_medium(4));
    ELF64ProgramHeader<-alignment(&(program_header2), 4096);

    variable program_header3: ELF64ProgramHeader;
    ELF64ProgramHeader<-type(&(program_header3), whole_8_to_medium(1));
    ELF64ProgramHeader<-location(&(program_header3), @cast_whole_8(+(instructions_index, +(data_buffer_index, 232))));
    ELF64ProgramHeader<-virtual_address(&(program_header3), @cast_whole_8(+(232, +(instructions_index, +(+(start_address, 8192), data_buffer_index)))));
    ELF64ProgramHeader<-physical_address(&(program_header3), @cast_whole_8(+(232, +(instructions_index, +(+(start_address, 8192), data_buffer_index)))));
    ELF64ProgramHeader<-size_file(&(program_header3), 0);
    ELF64ProgramHeader<-size_memory(&(program_header3), bss_index);
    ELF64ProgramHeader<-flags(&(program_header3), whole_8_to_medium(6));
    ELF64ProgramHeader<-alignment(&(program_header3), 4096);

    autobuffer_set(&(output), &(file_header), 0, 64);
    autobuffer_set(&(output), &(program_header), 64, 56);
    autobuffer_set(&(output), &(program_header2), 120, 56);
    autobuffer_set(&(output), &(program_header3), 176, 56);

    variable output_file = sys_open(AutoBuffer->buffer(&(asm_output)), @cast_whole_8(+(+(O_WRONLY, O_CREAT), O_TRUNC)), 452);
    sys_write(output_file, AutoBuffer->buffer(&(output)), AutoBuffer->size(&(output)));
    sys_close(output_file);
};

function indexof(string: *, character: any_1, start: whole_8): whole_8 {
    variable length = length(string);

    variable i = start;
    while <(i, length) {
        if =(any_1->(@cast_*any_1(+(string, i))), character) {
            return i;
        };
        i = whole_8+(i, 1);
    };

    return 999;
};

function whole_8-(value1: whole_8, value2: whole_8): whole_8 {
    return @cast_whole_8(-(value1, value2));
};

function whole_8*(value1: whole_8, value2: whole_8): whole_8 {
    return @cast_whole_8(*(value1, value2));
};

function print(string: *) {
    sys_write(STDOUT, string, length(string));
};

function println(string: *) {
    print(string);

    variable new_line: whole_8 = 10;
    sys_write(STDOUT, &(new_line), 1);
};

function get_contents(name: *): * {
    variable descriptor = sys_open(name, O_RDONLY, 0);

    variable stat: Stat;
    sys_fstat(descriptor, &(stat));

    variable contents = brk_allocate(whole_8+(Stat->size(&(stat)), 1));

    sys_read(descriptor, contents, Stat->size(&(stat)));

    return contents;
};

function exit(code: whole_8) {
    sys_exit(code);
};

function array8_set(array: *, index: whole_8, value: any_8) {
    variable index_pointer = @cast_*any_8(+(array, *(index, 8)));
    any_8<-(index_pointer, value);
};

function array8_get(array: *, index: whole_8): any_8 {
    variable index_pointer = @cast_*any_8(+(array, *(index, 8)));
    return any_8->(index_pointer);
};

function array8_length(array: *): whole_8 {
    variable k = 0;
    while !(=(@cast_whole_8(array8_get(array, k)), 0)) {
        k = whole_8+(k, 1);
    };
    return k;
};

function stack8_push(stack: *, stack_pointer: *whole_8, value: any_8) {
    variable index_pointer = @cast_*any_8(+(stack, *(whole_8->(stack_pointer), 8)));
    any_8<-(index_pointer, value);
    increment_whole_8_pointer(stack_pointer, 1);
};

function stack8_pop(stack: *, stack_pointer: *whole_8): any_8 {
    decrement_whole_8_pointer(stack_pointer, 1);
    variable index_pointer = @cast_*any_8(+(stack, *(whole_8->(stack_pointer), 8)));
    return any_8->(index_pointer);
};

function autostack8_push(buffer: *AutoBuffer, stack_pointer: *whole_8, value: any_8) {
    autobuffer_set_whole_8(buffer, @cast_whole_8(value), whole_8*(whole_8->(stack_pointer), 8));
    increment_whole_8_pointer(stack_pointer, 1);
};

function autostack8_pop(buffer: *AutoBuffer, stack_pointer: *whole_8): any_8 {
    decrement_whole_8_pointer(stack_pointer, 1);
    variable index_pointer = @cast_*any_8(autobuffer_get(buffer, whole_8*(whole_8->(stack_pointer), 8)));
    return any_8->(index_pointer);
};

function autostringarraymap_get(keys: *AutoBuffer, values: *AutoBuffer, wanted: *, size: whole_8): * {
    variable j = 0;
    while <(j, size) {
        if string=(@cast_*(autoarray8_get(keys, j)), wanted) {
            return @cast_*(autoarray8_get(values, j));
        };
        j = whole_8+(j, 1);
    };

    return @cast_*(0);
};

function autostringarraymap_get_index(keys: *AutoBuffer, wanted: *, size: whole_8): whole_8 {
    variable j = 0;
    while <(j, size) {
        if string=(@cast_*(autoarray8_get(keys, j)), wanted) {
            return j;
        };
        j = whole_8+(j, 1);
    };

    return 999;
};
