constant NODE_FUNCTION: whole_8 = 0;

structure NodeFunctionData {
    name: *;
    argument_names: *;
    argument_types: *;
    returns: *;
};

constant NODE_ENDFUNCTION: whole_8 = 1;

constant NODE_RETRIEVE: whole_8 = 2;

structure NodeRetrieveData {
    name: *;
};

constant NODE_STRING: whole_8 = 3;

structure NodeStringData {
    value: *;
};

constant NODE_NUMBER: whole_8 = 4;

structure NodeNumberData {
    value: whole_8;
    type: whole_8;
    size: whole_8;
};

constant NODE_INVOKE: whole_8 = 5;

structure NodeInvokeData {
    name: *;
};

constant NODE_DECLARE: whole_8 = 6;

structure NodeDeclareData {
    name: *;
    type: *;
};

constant NODE_ASSIGN: whole_8 = 7;

structure NodeAssignData {
    name: *;
};

constant NODE_RETURN: whole_8 = 8;

constant NODE_STRUCTURE: whole_8 = 9;

structure NodeStructureData {
    name: *;
    item_names: *;
    item_types: *;
};

constant NODE_POINTER: whole_8 = 10;

constant NODE_BOOLEAN: whole_8 = 11;

structure NodeBooleanData {
    value: boolean;
};

constant NODE_JUMP_CONDITIONAL: whole_8 = 12;

structure NodeJumpConditionalData {
    target_id: whole_8;
    desired_state: boolean;
};

constant NODE_TARGET: whole_8 = 13;

structure NodeTargetData {
    id: whole_8;
};

constant NODE_JUMP: whole_8 = 14;

structure NodeJumpData {
    target_id: whole_8;
};

constant NODE_GLOBAL: whole_8 = 15;

structure NodeGlobalData {
    name: *;
    type: *;
};

constant NODE_CONSTANT: whole_8 = 16;

structure NodeConstantData {
    name: *;
    type: *;
    value: any_8;
};

constant NODE_INCLUDE: whole_8 = 17;

structure NodeIncludeData {
    path: *;
};

constant NODE_SCOPE: whole_8 = 18;
    
structure NodeScopeData {
    
};

constant NODE_ENDSCOPE: whole_8 = 19;

structure NodeEndScopeData {
};

constant NODE_SIZE: whole_8 = 72;

structure NodeLocationData {
    file: *;
    row: whole_8;
    column: whole_8;
};

function nodes_get_id(nodes: *Nodes, index: whole_8): whole_8 {
    return AutoBuffer.get_whole_8(&(Nodes->buffer(nodes)), *(index, NODE_SIZE));
};

function nodes_get_pointer_data(nodes: *Nodes, index: whole_8): * {
    return AutoBuffer.get(&(Nodes->buffer(nodes)), +(*(index, NODE_SIZE), 32));
};

function nodes_get_location_data(nodes: *Nodes, index: whole_8): *NodeLocationData {
    return @cast_*NodeLocationData(AutoBuffer.get(&(Nodes->buffer(nodes)), +(*(index, NODE_SIZE), 8)));
};

function nodes_get_pointer(nodes: *Nodes, index: whole_8): * {
    return AutoBuffer.get(&(Nodes->buffer(nodes)), *(index, NODE_SIZE));
};

function nodes_append_data(nodes: *Nodes, id: whole_8, file_name: *, row: whole_8, column: whole_8): * {
    return @cast_*(+(nodes_append(nodes, id, file_name, row, column), 32));
};

function nodes_append_data_anonymous(nodes: *Nodes, id: whole_8): * {
    return nodes_append_data(nodes, id, "", 0, 0);
};

function nodes_append_anonymous(nodes: *Nodes, id: whole_8): * {
    return nodes_append(nodes, id, "", 0, 0);
};

function nodes_append(nodes: *Nodes, id: whole_8, file_name: *, row: whole_8, column: whole_8): * {
    variable nodes_buffer = &(Nodes->buffer(nodes));
    variable nodes_index = &(Nodes->index(nodes));
    AutoBuffer.register(nodes_buffer, *(whole_8->(nodes_index), NODE_SIZE), NODE_SIZE);
    variable to_return = AutoBuffer.get(nodes_buffer, *(whole_8->(nodes_index), NODE_SIZE));

    AutoBuffer.set_whole_8(nodes_buffer, id, *(whole_8->(nodes_index), NODE_SIZE));
    variable location_data = @cast_*NodeLocationData(AutoBuffer.get(nodes_buffer, +(*(whole_8->(nodes_index), NODE_SIZE), 8)));
    NodeLocationData<-file(location_data, file_name);
    NodeLocationData<-row(location_data, row);
    NodeLocationData<-column(location_data, column);

    increment_whole_8_pointer(nodes_index, 1);

    return to_return;
};

function nodes_append_structure(nodes: *Nodes, name: *) {
    variable structure_data = @cast_*NodeStructureData(nodes_append_data_anonymous(nodes, NODE_STRUCTURE));
    NodeStructureData<-name(structure_data, name);
    NodeStructureData<-item_names(structure_data, &(empty));
    NodeStructureData<-item_types(structure_data, &(empty));
};

function nodes_append_function(nodes: *Nodes, name: *, arguments: *, returns: *) {
    variable function_data = @cast_*NodeFunctionData(nodes_append_data_anonymous(nodes, NODE_FUNCTION));
    NodeFunctionData<-name(function_data, name);
    NodeFunctionData<-argument_types(function_data, arguments);
    NodeFunctionData<-returns(function_data, returns);
    variable _ = nodes_append_anonymous(nodes, NODE_ENDFUNCTION);
};

