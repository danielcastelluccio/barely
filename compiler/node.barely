constant NODE_FUNCTION: whole_8 = 0;

structure NodeFunctionData {
    name: *;
    argument_names: *;
    argument_types: *;
    returns: *;
};

constant NODE_ENDFUNCTION: whole_8 = 1;

constant NODE_RETRIEVE: whole_8 = 2;

structure NodeRetrieveData {
    name: *;
};

constant NODE_STRING: whole_8 = 3;

structure NodeStringData {
    value: *;
};

constant NODE_NUMBER: whole_8 = 4;

structure NodeNumberData {
    value: whole_8;
    type: whole_8;
    size: whole_8;
};

constant NODE_INVOKE: whole_8 = 5;

structure NodeInvokeData {
    name: *;
    has_specifier: boolean;
};

constant NODE_DECLARE: whole_8 = 6;

structure NodeDeclareData {
    name: *;
    type: *;
};

constant NODE_ASSIGN: whole_8 = 7;

structure NodeAssignData {
    name: *;
};

constant NODE_RETURN: whole_8 = 8;

constant NODE_STRUCTURE: whole_8 = 9;

structure NodeStructureData {
    name: *;
    item_names: *;
    item_types: *;
};

constant NODE_POINTER: whole_8 = 10;

constant NODE_BOOLEAN: whole_8 = 11;

structure NodeBooleanData {
    value: boolean;
};

constant NODE_JUMP_CONDITIONAL: whole_8 = 12;

structure NodeJumpConditionalData {
    target_id: whole_8;
    desired_state: boolean;
};

constant NODE_TARGET: whole_8 = 13;

structure NodeTargetData {
    id: whole_8;
};

constant NODE_JUMP: whole_8 = 14;

structure NodeJumpData {
    target_id: whole_8;
};

constant NODE_GLOBAL: whole_8 = 15;

structure NodeGlobalData {
    name: *;
    type: *;
};

constant NODE_DEFINE: whole_8 = 16;

structure NodeDefineData {
    name: *;
    type: *;
    data: *;
};

constant NODE_ENDDEFINE: whole_8 = 24;

constant NODE_SCOPE: whole_8 = 18;
    
structure NodeScopeData {
    
};

constant NODE_ENDSCOPE: whole_8 = 19;

structure NodeEndScopeData {
};

constant NODE_STARTIFBLOCK: whole_8 = 20;

constant NODE_ENDIFBLOCK: whole_8 = 21;

structure NodeEndIfBlockData {
    id: whole_8;
};

constant NODE_ENDSTATEMENT: whole_8 = 22;

constant NODE_INVOKE_POINTER: whole_8 = 23;

constant NODE_SKIP: whole_8 = 24;

structure NodeInvokePointerData {
    ignore: boolean;
};

constant NODE_SIZE: whole_8 = 64;

structure NodeLocationData {
    file: *;
    row: whole_8;
    column: whole_8;
};

define nodes_get_id = function(nodes: *Nodes, index: whole_8): whole_8 {
    return autobuffer_get_whole_8(&(Nodes->buffer(nodes)), *(index, NODE_SIZE));
};

define nodes_get_pointer_data = function(nodes: *Nodes, index: whole_8): * {
    return autobuffer_get(&(Nodes->buffer(nodes)), +(*(index, NODE_SIZE), 32));
};

define nodes_get_location_data = function(nodes: *Nodes, index: whole_8): *NodeLocationData {
    return @cast_*NodeLocationData(autobuffer_get(&(Nodes->buffer(nodes)), +(*(index, NODE_SIZE), 8)));
};

define nodes_get_pointer = function(nodes: *Nodes, index: whole_8): * {
    return autobuffer_get(&(Nodes->buffer(nodes)), *(index, NODE_SIZE));
};

define nodes_append_data = function(nodes: *Nodes, id: whole_8, file_name: *, row: whole_8, column: whole_8): * {
    return @cast_*(+(nodes_append(nodes, id, file_name, row, column), 32));
};

define nodes_append_data_anonymous = function(nodes: *Nodes, id: whole_8): * {
    return nodes_append_data(nodes, id, "", 0, 0);
};

define nodes_append_anonymous = function(nodes: *Nodes, id: whole_8): * {
    return nodes_append(nodes, id, "", 0, 0);
};

define nodes_append = function(nodes: *Nodes, id: whole_8, file_name: *, row: whole_8, column: whole_8): * {
    variable nodes_buffer = &(Nodes->buffer(nodes));
    variable nodes_index = &(Nodes->index(nodes));
    autobuffer_register(nodes_buffer, *(whole_8->(nodes_index), NODE_SIZE), NODE_SIZE);
    variable to_return = autobuffer_get(nodes_buffer, *(whole_8->(nodes_index), NODE_SIZE));

    autobuffer_set_whole_8(nodes_buffer, id, *(whole_8->(nodes_index), NODE_SIZE));
    variable location_data = @cast_*NodeLocationData(autobuffer_get(nodes_buffer, +(*(whole_8->(nodes_index), NODE_SIZE), 8)));
    NodeLocationData<-file(location_data, file_name);
    NodeLocationData<-row(location_data, row);
    NodeLocationData<-column(location_data, column);

    increment_whole_8_pointer(nodes_index, 1);

    return to_return;
};

define nodes_append_structure = function(nodes: *Nodes, name: *) {
    variable structure_data = @cast_*NodeStructureData(nodes_append_data_anonymous(nodes, NODE_STRUCTURE));
    NodeStructureData<-name(structure_data, name);
    NodeStructureData<-item_names(structure_data, &(empty));
    NodeStructureData<-item_types(structure_data, &(empty));
};

define nodes_append_function = function(nodes: *Nodes, name: *, arguments: *, returns: *) {
    variable function_data = @cast_*NodeFunctionData(nodes_append_data_anonymous(nodes, NODE_FUNCTION));
    NodeFunctionData<-name(function_data, name);
    NodeFunctionData<-argument_types(function_data, arguments);
    NodeFunctionData<-returns(function_data, returns);
    variable _ = nodes_append_anonymous(nodes, NODE_ENDFUNCTION);
};

define print_node_info = function(nodes: *Nodes, index: whole_8) {
    variable id = nodes_get_id(nodes, index);
    variable pointer_data = nodes_get_pointer_data(nodes, index);
    if =(id, NODE_RETRIEVE) {
        variable retrieve_data = @cast_*NodeRetrieveData(pointer_data);
        print("Retrieve{name='");
        print(NodeRetrieveData->name(retrieve_data));
        println("'}");
    } else if =(id, NODE_ASSIGN) {
        variable assign_data = @cast_*NodeAssignData(pointer_data);
        print("Assign{name='");
        print(NodeAssignData->name(assign_data));
        println("'}");
    } else if =(id, NODE_DECLARE) {
        variable declare_data = @cast_*NodeDeclareData(pointer_data);
        print("Declare{name='");
        print(NodeDeclareData->name(declare_data));
        println("'}");
    } else if =(id, NODE_INVOKE) {
        variable invoke_data = @cast_*NodeInvokeData(pointer_data);
        print("Invoke{name='");
        print(NodeInvokeData->name(invoke_data));
        println("'}");
    } else if =(id, NODE_POINTER) {
        println("Pointer{}")
    } else if =(id, NODE_INVOKE_POINTER) {
        println("InvokePointer{}")
    } else if =(id, NODE_NUMBER) {
        println("Number{}")
    } else if =(id, NODE_BOOLEAN) {
        println("Boolean{}")
    } else if =(id, NODE_STRING) {
        println("String{}")
    } else if =(id, NODE_ENDSTATEMENT) {
        println("EndStatement{}")
    } else {
        print_whole_8(id);
        println("");
    };
};

