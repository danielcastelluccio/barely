define Node = module {
    define FUNCTION = 0;
    define FunctionData = structure {
        // I find it weird how internal functions still need this but non-internal ones do not
        // Maybe this is just the best way, however, name could potentially be stored elsewhere for internals
        name: *;
        argument_names: *;
        argument_types: *;
        return_types: *;
    };

    define ENDFUNCTION = 1;

    define RETRIEVE = 2;
    define RetrieveData = structure {
        name: *;
        coercion: *;
        has_multiple: boolean;
        uses_previous: boolean;
    };

    define STRING = 3;
    define StringData = structure {
        value: *;
    };

    define NUMBER = 4;
    define NumberData = structure {
        value: whole_8;
        // array of strings
        coersion: *;
    };

    define INVOKE = 5;

    define DECLARE = 6;
    define DeclareData = structure {
        name: *;
        // array of strings
        type: *;
    };

    define ASSIGN = 7;
    define AssignData = structure {
        name: *;
        has_multiple: boolean;
        uses_previous: boolean;
    };

    define RETURN = 8;

    define STRUCTURE = 9;
    define StructureData = structure {
        name: *;
        id: whole_8;
        item_names: *;
        item_types: *;
        is_internal: boolean;
    };

    define BOOLEAN = 10;
    define BooleanData = structure {
        value: boolean;
    };

    define JUMP_CONDITIONAL = 11;
    define JumpConditionalData = structure {
        target_id: whole_8;
        desired_state: boolean;
    };

    define TARGET = 12;
    define TargetData = structure {
        id: whole_8;
    };

    define JUMP = 13;
    define JumpData = structure {
        target_id: whole_8;
    };

    define DEFINE = 14;
    define DefineData = structure {
        name: *;
        type: *;
        data: *;
    };

    define INVOKE_INTERNAL = 15;
    define InvokeInternalData = structure {
        name: *;
        uses_previous: boolean;
        has_multiple: boolean;
    };

    define SCOPE = 16;

    define ENDSCOPE = 17;

    define STARTIFBLOCK = 18;

    define ENDIFBLOCK = 19;
    define EndIfBlockData = structure {
        id: whole_8;
        is_last: boolean;
        is_bare_else: boolean;
    };

    define ENDSTATEMENT = 20;

    define ENDDEFINE = 21;
    define EndDefineData = structure {
        name: *;
        type: *;
        value: any_8;
    };

    define SKIP = 22;

    define MODULE = 23;

    define ENDMODULE = 24;

    define CAST = 25;
    define CastData = structure {
        type: *;
    };

    define SIZE_OF = 26;
    define SizeOfData = structure {
        type: *;
    };

    define SIZE = 80;

    define LocationData = structure {
        file: *;
        row: whole_8;
        column: whole_8;
    };
};

define Nodes = module {
    define Data = structure {
        buffer: AutoBuffer;
        index: whole_8;
    };

    define new = function(size: whole_8): 'Data {
        declare nodes: Nodes'Data;
        nodes.buffer = autobuffer_new(size * Node'SIZE);
        nodes.index = 0;
        return nodes;
    };

    define get_id = function(nodes: *'Data, index: whole_8): whole_8 {
        return autobuffer_get_whole_8(&nodes.buffer, index * Node'SIZE);
    };

    define get_pointer_data = function(nodes: *'Data, index: whole_8): * {
        return autobuffer_get(&nodes.buffer, (index * Node'SIZE) + 32);
    };

    define get_id_pointer = function(nodes: *'Data, index: whole_8): *whole_8 {
        return cast(*whole_8, 'get_pointer(nodes, index));
    };

    define get_location_data = function(nodes: *'Data, index: whole_8): *Node'LocationData {
        return cast(*Node'LocationData, autobuffer_get(&nodes.buffer, (index * Node'SIZE) + 8));
    };

    define get_pointer = function(nodes: *'Data, index: whole_8): * {
        return autobuffer_get(&nodes.buffer, (index * Node'SIZE));
    };

    define append_data = function(nodes: *'Data, id: whole_8, file_name: *, row: whole_8, column: whole_8): * {
        return cast(*, 'append(nodes, id, file_name, row, column) + 32);
    };

    define append_data_anonymous = function(nodes: *'Data, id: whole_8): * {
        return 'append_data(nodes, id, "", 0, 0);
    };

    define append_anonymous = function(nodes: *'Data, id: whole_8): * {
        return 'append(nodes, id, "", 0, 0);
    };

    define append = function(nodes: *'Data, id: whole_8, file_name: *, row: whole_8, column: whole_8): * {
        declare nodes_buffer = &nodes.buffer;
        declare nodes_index = &nodes.index;
        declare node_pointer = autobuffer_get_size(nodes_buffer, (nodes_index.* * Node'SIZE), Node'SIZE);

        declare id_pointer = 'get_id_pointer(nodes, nodes_index.*);
        id_pointer.* = id;

        declare location_data = 'get_location_data(nodes, nodes_index.*);
        location_data.file = file_name;
        location_data.row = row;
        location_data.column = column;

        increment_whole_8_pointer(nodes_index, 1);

        return node_pointer;
    };

    define set_skip = function(nodes: *'Data, index: whole_8) {
        'set_id(nodes, index, Node'SKIP);
    };

    define set_id = function(nodes: *'Data, index: whole_8, id: whole_8) {
        declare node_id = 'get_id_pointer(nodes, index);
        node_id.* = id;
    };

    define append_structure = function(nodes: *'Data, name: *, size: whole_8) {
        declare structure_data = cast(*Node'StructureData, 'append_data_anonymous(nodes, Node'STRUCTURE));
        structure_data.name = name;
        structure_data.item_names = &empty;
        structure_data.item_types = &empty;
        structure_data.is_internal = true;
    };

    define append_structure_any = function(nodes: *'Data, name: *) {
        declare structure_data = cast(*Node'StructureData, 'append_data_anonymous(nodes, Node'STRUCTURE));
        structure_data.name = name;
        structure_data.item_names = &empty;
        structure_data.item_types = &empty;
        structure_data.is_internal = true;
    };

    define append_function = function(nodes: *'Data, name: *, arguments: *, returns: *) {
        declare function_data = cast(*Node'FunctionData, 'append_data_anonymous(nodes, Node'FUNCTION));
        function_data.name = name;
        function_data.argument_types = arguments;
        function_data.return_types = returns;
        declare _ = 'append_anonymous(nodes, Node'ENDFUNCTION);
    };

    define copy = function(nodes_from: *'Data, nodes_to: *'Data, count: whole_8) {
        autobuffer_set(&nodes_to.buffer, nodes_from.buffer.buffer, nodes_to.index * Node'SIZE, count * Node'SIZE);
        nodes_to.index = nodes_to.index + count;
    };
};

define print_node_info = function(nodes: *Nodes'Data, index: whole_8) {
    declare id = Nodes'get_id(nodes, index);
    declare pointer_data = Nodes'get_pointer_data(nodes, index);
    if id == Node'RETRIEVE {
        declare retrieve_data = cast(*Node'RetrieveData, pointer_data);
        print("Retrieve{names=");
        print(",name=");
        if retrieve_data.has_multiple {
            print("[");
            declare i = 0;
            while i < array8_length(retrieve_data.name) {
                print("'");
                print(cast(*, array8_get(retrieve_data.name, i)));
                print("', ");
                i = i + 1;
            };
            print("]");
        } else {
            print("'");
            print(retrieve_data.name);
            print("'");
        };
        println("}");
    } else if id == Node'INVOKE_INTERNAL {
        declare invoke_data = cast(*Node'InvokeInternalData, pointer_data);
        print("InternalInvoke{name=");
        if invoke_data.has_multiple {
            print("[");
            declare i = 0;
            while i < array8_length(invoke_data.name) {
                print("'");
                print(cast(*, array8_get(invoke_data.name, i)));
                print("', ");
                i = i + 1;
            };
            print("]");
        } else {
            print("'");
            print(invoke_data.name);
            print("'");
        };
        println("}");
    } else if id == Node'ASSIGN {
        declare assign_data = cast(*Node'AssignData, pointer_data);
        print("Assign{name='");
        print(assign_data.name);
        println("'}");
    } else if id == Node'DECLARE {
        declare declare_data = cast(*Node'DeclareData, pointer_data);
        print("Declare{name='");
        print(declare_data.name);
        println("'}");
    } else if id == Node'INVOKE {
        println("Invoke{}");
    } else if id == Node'NUMBER {
        declare number_data = cast(*Node'NumberData, pointer_data);
        print("Number{value=")
        print_whole_8(number_data.value);
        println("}");
    } else if id == Node'BOOLEAN {
        println("Boolean{}")
    } else if id == Node'STRING {
        println("String{}")
    } else if id == Node'SKIP {
        println("Skip{}")
    } else if id == Node'ENDIFBLOCK {
        declare data = cast(*Node'EndIfBlockData, pointer_data);
        print("EndIfBlock{is_last=")
        if data.is_last {
            print("true");
        } else {
            print("false");
        };
        print(",is_bare_else=");
        if data.is_bare_else {
            print("true");
        } else {
            print("false");
        };
        println("}");
    } else if id == Node'ENDSTATEMENT {
        println("EndStatement{}")
    } else {
        print_whole_8(id);
        println("");
    };
};

macro #nodes_append_data(nodes, id, type, location) {
    cast(*type, Nodes'append_data(nodes, id, location))
};

macro #nodes_get_pointer_data(nodes, type, index) {
    cast(*type, Nodes'get_pointer_data(nodes, index))
};
