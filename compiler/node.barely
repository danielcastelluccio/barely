define NODE_FUNCTION = 0;

define NodeFunctionData = structure {
    name: *;
    argument_names: *;
    argument_types: *;
    returns: *;
};

define NODE_ENDFUNCTION = 1;

define NODE_RETRIEVE = 2;

define NodeRetrieveData = structure {
    name: *;
    using_module: boolean;
    is_module: boolean;
};

define NODE_STRING = 3;

define NodeStringData = structure {
    value: *;
};

define NODE_NUMBER = 4;

define NodeNumberData = structure {
    value: whole_8;
    type: whole_8;
    size: whole_8;
};

define NODE_INVOKE = 5;

define NodeInvokeData = structure {
    name: *;
    has_specifier: boolean;
    is_pointer: boolean;
};

define NODE_DECLARE = 6;

define NodeDeclareData = structure {
    name: *;
    type: *;
};

define NODE_ASSIGN = 7;

define NodeAssignData = structure {
    name: *;
};

define NODE_RETURN = 8;

define NODE_STRUCTURE = 9;

define NodeStructureData = structure {
    name: *;
    item_names: *;
    item_types: *;
    is_internal: boolean;
};

define NODE_POINTER = 10;

define NODE_BOOLEAN = 11;

define NodeBooleanData = structure {
    value: boolean;
};

define NODE_JUMP_CONDITIONAL = 12;

define NodeJumpConditionalData = structure {
    target_id: whole_8;
    desired_state: boolean;
};

define NODE_TARGET = 13;

define NodeTargetData = structure {
    id: whole_8;
};

define NODE_JUMP = 14;

define NodeJumpData = structure {
    target_id: whole_8;
};

define NODE_GLOBAL = 15;

define NodeGlobalData = structure {
    name: *;
    type: *;
};

define NODE_DEFINE = 16;

define NodeDefineData = structure {
    name: *;
    type: *;
    data: *;
};

define NODE_SCOPE = 18;

define NODE_ENDSCOPE = 19;

define NODE_STARTIFBLOCK = 20;

define NODE_ENDIFBLOCK = 21;

define NodeEndIfBlockData = structure {
    id: whole_8;
    is_last: boolean;
    is_bare_else: boolean;
};

define NODE_ENDSTATEMENT = 22;

define NodeInvokePointerData = structure {
    ignore: boolean;
};

define NODE_ENDDEFINE = 24;

define NodeEndDefineData = structure {
    type: *;
};

define NODE_SKIP = 25;

define NODE_MODULE = 26;

define NODE_ENDMODULE = 27;

define NODE_SIZE = 64;

define NodeLocationData = structure {
    file: *;
    row: whole_8;
    column: whole_8;
};

define nodes_get_id = function(nodes: *Nodes, index: whole_8): whole_8 {
    return autobuffer_get_whole_8(&(Nodes.>buffer(nodes)), *(index, NODE_SIZE));
};

define nodes_get_pointer_data = function(nodes: *Nodes, index: whole_8): * {
    return autobuffer_get(&(Nodes.>buffer(nodes)), +(*(index, NODE_SIZE), 32));
};

define nodes_get_id_pointer = function(nodes: *Nodes, index: whole_8): *whole_8 {
    return whole_8.*cast(nodes_get_pointer(nodes, index));
};

define nodes_get_location_data = function(nodes: *Nodes, index: whole_8): *NodeLocationData {
    return NodeLocationData.*cast(autobuffer_get(&(Nodes.>buffer(nodes)), +(*(index, NODE_SIZE), 8)));
};

define nodes_get_pointer = function(nodes: *Nodes, index: whole_8): * {
    return autobuffer_get(&(Nodes.>buffer(nodes)), *(index, NODE_SIZE));
};

define nodes_append_data = function(nodes: *Nodes, id: whole_8, file_name: *, row: whole_8, column: whole_8): * {
    return *.cast(+(nodes_append(nodes, id, file_name, row, column), 32));
};

define nodes_append_data_anonymous = function(nodes: *Nodes, id: whole_8): * {
    return nodes_append_data(nodes, id, "", 0, 0);
};

define nodes_append_anonymous = function(nodes: *Nodes, id: whole_8): * {
    return nodes_append(nodes, id, "", 0, 0);
};

define nodes_append = function(nodes: *Nodes, id: whole_8, file_name: *, row: whole_8, column: whole_8): * {
    variable nodes_buffer = &(Nodes.>buffer(nodes));
    variable nodes_index = &(Nodes.>index(nodes));
    variable node_pointer = autobuffer_get_size(nodes_buffer, *(whole_8.>(nodes_index), NODE_SIZE), NODE_SIZE);

    variable id_pointer = nodes_get_id_pointer(nodes, whole_8.>(nodes_index));
    whole_8.<(id_pointer, id);

    variable location_data = nodes_get_location_data(nodes, whole_8.>(nodes_index));
    NodeLocationData.<file(location_data, file_name);
    NodeLocationData.<row(location_data, row);
    NodeLocationData.<column(location_data, column);

    increment_whole_8_pointer(nodes_index, 1);

    return node_pointer;
};

define nodes_set_skip = function(nodes: *Nodes, index: whole_8) {
    variable node_id = nodes_get_id_pointer(nodes, index);
    whole_8.<(node_id, NODE_SKIP);
};

define nodes_append_structure_old = function(nodes: *Nodes, name: *) {
    variable structure_data = NodeStructureData.*cast(nodes_append_data_anonymous(nodes, NODE_STRUCTURE));
    NodeStructureData.<name(structure_data, name);
    NodeStructureData.<item_names(structure_data, &(empty));
    NodeStructureData.<item_types(structure_data, &(empty));
};

define nodes_append_structure = function(nodes: *Nodes, name: *, any_size_type: *) {
    variable define_data = NodeDefineData.*cast(nodes_append_data_anonymous(nodes, NODE_DEFINE));
    NodeDefineData.<name(define_data, name);

    variable structure_type = concatenate3_brk_allocate("structure[_:", any_size_type, "]");
    NodeDefineData.<type(define_data, structure_type);

    variable item_names = create_size_one_array8_brk_allocate("_");
    variable item_types = create_size_one_array8_brk_allocate(any_size_type);

    variable structure_data = NodeStructureData.*cast(nodes_append_data_anonymous(nodes, NODE_STRUCTURE));
    NodeStructureData.<item_names(structure_data, item_names);
    NodeStructureData.<item_types(structure_data, item_types);

    variable _ = nodes_append_anonymous(nodes, NODE_ENDDEFINE);
};

define nodes_append_structure_any = function(nodes: *Nodes, name: *) {
    variable structure_data = NodeStructureData.*cast(nodes_append_data_anonymous(nodes, NODE_STRUCTURE));
    NodeStructureData.<name(structure_data, name);
    NodeStructureData.<item_names(structure_data, &(empty));
    NodeStructureData.<item_types(structure_data, &(empty));
    NodeStructureData.<is_internal(structure_data, true);
};

define nodes_append_pseudo_function = function(nodes: *Nodes, name: *, argument_types: *, returns: *) {
    variable function_data = NodeFunctionData.*cast(nodes_append_data_anonymous(nodes, NODE_FUNCTION));
    NodeFunctionData.<name(function_data, name);
    NodeFunctionData.<argument_types(function_data, argument_types);
    NodeFunctionData.<returns(function_data, returns);

    variable _ = nodes_append_anonymous(nodes, NODE_ENDFUNCTION);
};

define nodes_append_function = function(nodes: *Nodes, name: *, arguments: *, returns: *) {
    variable function_data = NodeFunctionData.*cast(nodes_append_data_anonymous(nodes, NODE_FUNCTION));
    NodeFunctionData.<name(function_data, name);
    NodeFunctionData.<argument_types(function_data, arguments);
    NodeFunctionData.<returns(function_data, returns);
    variable _ = nodes_append_anonymous(nodes, NODE_ENDFUNCTION);
};

define print_node_info = function(nodes: *Nodes, index: whole_8) {
    variable id = nodes_get_id(nodes, index);
    variable pointer_data = nodes_get_pointer_data(nodes, index);
    if =(id, NODE_RETRIEVE) {
        variable retrieve_data = NodeRetrieveData.*cast(pointer_data);
        print("Retrieve{name='");
        print(NodeRetrieveData.>name(retrieve_data));
        println("'}");
    } else if =(id, NODE_ASSIGN) {
        variable assign_data = NodeAssignData.*cast(pointer_data);
        print("Assign{name='");
        print(NodeAssignData.>name(assign_data));
        println("'}");
    } else if =(id, NODE_DECLARE) {
        variable declare_data = NodeDeclareData.*cast(pointer_data);
        print("Declare{name='");
        print(NodeDeclareData.>name(declare_data));
        println("'}");
    } else if =(id, NODE_INVOKE) {
        variable invoke_data = NodeInvokeData.*cast(pointer_data);
        print("Invoke{name='");
        if !(=(NodeInvokeData.>name(invoke_data), 0)) {
            print(NodeInvokeData.>name(invoke_data));
        };
        println("'}");
    } else if =(id, NODE_POINTER) {
        println("Pointer{}")
    } else if =(id, NODE_NUMBER) {
        println("Number{}")
    } else if =(id, NODE_BOOLEAN) {
        println("Boolean{}")
    } else if =(id, NODE_STRING) {
        println("String{}")
    } else if =(id, NODE_ENDSTATEMENT) {
        println("EndStatement{}")
    } else {
        print_whole_8(id);
        println("");
    };
};

