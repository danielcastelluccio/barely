constant SYS_READ: whole_8 = 0;

constant SYS_WRITE: whole_8 = 1;
constant STDOUT: whole_8 = 1;

constant SYS_OPEN: whole_8 = 2;
constant O_RDONLY: whole_8 = 0;
constant O_WRONLY: whole_8 = 1;
constant O_CREAT: whole_8 = 64;
constant O_TRUNC: whole_8 = 512;

constant SYS_CLOSE: whole_8 = 3;

constant SYS_STAT: whole_8 = 4;

constant SYS_FSTAT: whole_8 = 5;

constant SYS_BRK: whole_8 = 12;

constant SYS_FORK: whole_8 = 57;

constant SYS_EXECVE: whole_8 = 59;

constant SYS_EXIT: whole_8 = 60;

constant SYS_MKDIR: whole_8 = 83;

define sys_read = function(fd: whole_8, buffer: *, length: whole_8) {
    variable _: any_8 = @syscall3(SYS_READ, fd, buffer, length);
};

define sys_write = function(fd: whole_8, buffer: *, length: whole_8) {
    variable _: any_8 = @syscall3(SYS_WRITE, fd, buffer, length);
};

define sys_open = function(path: *, flags: whole_8, mode: whole_8): whole_8 {
    return @cast_whole_8(@syscall3(SYS_OPEN, path, flags, mode));
};

define sys_close = function(fd: whole_8) {
    variable _: any_8 = @syscall1(SYS_CLOSE, fd);
};

define Stat = structure {
    nonsense_0: any_48;
    size: whole_8;
    nonsense_1: any_88;
};

define sys_stat = function(name: *, buffer: *Stat) {
    variable _ = @syscall2(SYS_STAT, name, buffer);
};

define sys_fstat = function(fd: whole_8, buffer: *Stat) {
    variable _ = @syscall2(SYS_FSTAT, fd, buffer);
};

define sys_brk = function(location: *): * {
    return @cast_*(@syscall1(SYS_BRK, location));
};

define sys_fork = function(): whole_8 {
    return @cast_whole_8(@syscall0(SYS_FORK));
};

define sys_execve = function(file: *, args: *, env: **): whole_8 {
    return @cast_whole_8(@syscall3(SYS_EXECVE, file, args, env));
};

define sys_exit = function(code: whole_8) {
    variable _ = @syscall1(SYS_EXIT, code);
};

define sys_mkdir = function(path: *, mode: whole_8) {
    variable _ = @syscall2(SYS_MKDIR, path, mode);
};
