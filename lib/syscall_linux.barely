constant SYS_READ: integer = 0;

constant SYS_WRITE: integer = 1;
constant STDOUT: integer = 1;

constant SYS_OPEN: integer = 2;
constant O_RDONLY: integer = 0;
constant O_WRONLY: integer = 1;
constant O_CREAT: integer = 64;
constant O_TRUNC: integer = 512;

constant SYS_CLOSE: integer = 3;

constant SYS_STAT: integer = 4;

constant SYS_FSTAT: integer = 5;

constant SYS_BRK: integer = 12;

constant SYS_FORK: integer = 57;

constant SYS_EXECVE: integer = 59;

constant SYS_EXIT: integer = 60;

constant SYS_MKDIR: integer = 83;

function sys_read(fd: integer, buffer: *, length: integer) {
    variable _: any_8 = @syscall3(SYS_READ, fd, buffer, length);
};

function sys_write(fd: integer, buffer: *, length: integer) {
    variable _: any_8 = @syscall3(SYS_WRITE, fd, buffer, length);
};

function sys_open(path: *, flags: integer, mode: integer): integer {
    return @cast_integer(@syscall3(SYS_OPEN, path, flags, mode));
};

function sys_close(fd: integer) {
    variable _: any_8 = @syscall1(SYS_CLOSE, fd);
};

structure Stat {
    nonsense_0: any_48;
    size: integer;
    nonsense_1: any_88;
};

function sys_stat(name: *, buffer: *Stat) {
    variable _ = @syscall2(SYS_STAT, name, buffer);
};

function sys_fstat(fd: integer, buffer: *Stat) {
    variable _ = @syscall2(SYS_FSTAT, fd, buffer);
};

function sys_brk(location: *): * {
    return @cast_*(@syscall1(SYS_BRK, location));
};

function sys_fork(): integer {
    return @cast_integer(@syscall0(SYS_FORK));
};

function sys_execve(file: *, args: *, env: **): integer {
    return @cast_integer(@syscall3(SYS_EXECVE, file, args, env));
};

function sys_exit(code: integer) {
    variable _ = @syscall1(SYS_EXIT, code);
};

function sys_mkdir(path: *, mode: integer) {
    variable _ = @syscall2(SYS_MKDIR, path, mode);
};
