include "core.barely";
include "lib/syscall_linux.barely";
include "lib/autobuffer.barely";

structure Register1 {
    value: whole_8;
};

structure Register2 {
    value: whole_8;
};

structure Register4 {
    value: whole_8;
};

structure Register8 {
    value: whole_8;
};

constant AL: Register1 = 0;
constant CL: Register1 = 1;
constant DL: Register1 = 2;
constant BL: Register1 = 3;
constant AH: Register1 = 4;
//constant SPL: Register1 = 4;
//constant BPL: Register1 = 5;

constant AX: Register2 = 0;
constant CX: Register2 = 1;
constant DX: Register2 = 2;
constant BX: Register2 = 3;
constant SPX: Register2 = 4;
constant BPX: Register2 = 5;

constant EAX: Register4 = 0;
constant ECX: Register4 = 1;
constant EDX: Register4 = 2;
constant EBX: Register4 = 3;
constant ESP: Register4 = 4;
constant EBp: Register4 = 5;

constant RAX: Register8 = 0;
constant RCX: Register8 = 1;
constant RDX: Register8 = 2;
constant RBX: Register8 = 3;
constant RSP: Register8 = 4;
constant RBP: Register8 = 5;
constant RSI: Register8 = 6;
constant RDI: Register8 = 7;
constant R8: Register8 = 8;
constant R9: Register8 = 9;
constant R10: Register8 = 10;
constant R11: Register8 = 11;
constant R12: Register8 = 12;
constant R13: Register8 = 13;
constant R14: Register8 = 14;
constant R15: Register8 = 15;

structure DataIndex {
    value: whole_8;
};

structure BssIndex {
    value: whole_8;
};

structure InstructionIndex {
    value: whole_8;
};

function autopush_jmp_near(instructions: *AutoBuffer, instruction_index_pointer: *whole_8): InstructionIndex {
    variable current_instruction = whole_8->(instruction_index_pointer);

    autopush_byte(instructions, instruction_index_pointer, 233_whole_1);

    autopush_medium(instructions, instruction_index_pointer, whole_8_to_medium(0));

    return @cast_InstructionIndex(current_instruction);
};

function autopush_je_near(instructions: *AutoBuffer, instruction_index_pointer: *whole_8): InstructionIndex {
    variable current_instruction = whole_8->(instruction_index_pointer);

    autopush_byte(instructions, instruction_index_pointer, 15_whole_1);
    autopush_byte(instructions, instruction_index_pointer, 132_whole_1);

    autopush_medium(instructions, instruction_index_pointer, whole_8_to_medium(0));

    return @cast_InstructionIndex(current_instruction);
};

function autopush_jne_near(instructions: *AutoBuffer, instruction_index_pointer: *whole_8): InstructionIndex {
    variable current_instruction = whole_8->(instruction_index_pointer);

    autopush_byte(instructions, instruction_index_pointer, 15_whole_1);
    autopush_byte(instructions, instruction_index_pointer, 133_whole_1);

    autopush_medium(instructions, instruction_index_pointer, whole_8_to_medium(0));

    return @cast_InstructionIndex(current_instruction);
};

function set_jmp(instructions: *AutoBuffer, instruction_index_pointer: *whole_8, jump: InstructionIndex) {
    variable offset = -(whole_8_to_medium(whole_8->(instruction_index_pointer)), whole_8_to_medium(@cast_whole_8(+(jump, 5))));
    autobuffer_set_any_4(instructions, offset, @cast_whole_8(+(jump, 1)));
};

function set_jmp_value(instructions: *AutoBuffer, jump: InstructionIndex, value: InstructionIndex) {
    variable offset = -(whole_8_to_medium(@cast_whole_8(value)), whole_8_to_medium(@cast_whole_8(+(jump, 5))));
    autobuffer_set_any_4(instructions, offset, @cast_whole_8(+(jump, 1)));
};

function autopush_call_near(instructions: *AutoBuffer, instruction_index_pointer: *whole_8): InstructionIndex {
    variable current_instruction = whole_8->(instruction_index_pointer);

    autopush_byte(instructions, instruction_index_pointer, 232_whole_1);

    autopush_medium(instructions, instruction_index_pointer, 0_whole_4);

    return @cast_InstructionIndex(current_instruction);
};

function autopush_ret(instructions: *AutoBuffer, instruction_index_pointer: *whole_8) {
    autopush_byte(instructions, instruction_index_pointer, 195_whole_1);
};

function set_call(instructions: *AutoBuffer, instruction_index_pointer: *whole_8, call: InstructionIndex) {
    variable offset = -(whole_8_to_medium(whole_8->(instruction_index_pointer)), whole_8_to_medium(@cast_whole_8(+(call, 5))));
    autobuffer_set_any_4(instructions, offset, @cast_whole_8(+(call, 1)));
};

function set_call_value(instructions: *AutoBuffer, call: InstructionIndex, value: InstructionIndex) {
    variable offset = -(whole_8_to_medium(@cast_whole_8(value)), whole_8_to_medium(@cast_whole_8(+(call, 5))));
    autobuffer_set_any_4(instructions, offset, @cast_whole_8(+(call, 1)));
};

function set_je(instructions: *AutoBuffer, instruction_index_pointer: *whole_8, je: InstructionIndex) {
    variable offset = -(whole_8_to_medium(whole_8->(instruction_index_pointer)), whole_8_to_medium(@cast_whole_8(+(je, 6))));
    autobuffer_set_any_4(instructions, offset, @cast_whole_8(+(je, 2)));
};

function set_je_value(instructions: *AutoBuffer, je: InstructionIndex, value: InstructionIndex) {
    variable offset = -(whole_8_to_medium(@cast_whole_8(value)), whole_8_to_medium(@cast_whole_8(+(je, 6))));
    autobuffer_set_any_4(instructions, offset, @cast_whole_8(+(je, 2)));
};

function set_jne(instructions: *AutoBuffer, instruction_index_pointer: *whole_8, jne: InstructionIndex) {
    variable offset = -(whole_8_to_medium(whole_8->(instruction_index_pointer)), whole_8_to_medium(@cast_whole_8(+(jne, 6))));
    autobuffer_set_any_4(instructions, offset, @cast_whole_8(+(jne, 2)));
};

//function autopush_jmp_register(instructions: *AutoBuffer, instruction_index_pointer: *whole_8, register: Register8) {
//    if >(register, 7) {
//        autopush_byte(instructions, instruction_index_pointer, 65_whole_1);
//        autopush_byte(instructions, instruction_index_pointer, byte(255));
//
//        autopush_byte(instructions, instruction_index_pointer, byte(+(register, 24)));
//
//        return;
//    };
//
//    autopush_byte(instructions, instruction_index_pointer, byte(255));
//
//    autopush_byte(instructions, instruction_index_pointer, byte(+(register, 24)));
//};

function autopush_data_string(data: *AutoBuffer, data_index_pointer: *whole_8, string: *): DataIndex {
    variable index = whole_8->(data_index_pointer);

    autopush_string(data, data_index_pointer, string);
    increment_whole_8_pointer(data_index_pointer, 1);

    return @cast_DataIndex(index);
};

function autopush_data_whole_8(data: *AutoBuffer, data_index_pointer: *whole_8, whole_8: whole_8): DataIndex {
    variable index = whole_8->(data_index_pointer);

    variable buffer_index = whole_8->(data_index_pointer);

    autobuffer_set(data, &(whole_8), buffer_index, 8);

    whole_8<-(data_index_pointer, +(8, whole_8->(data_index_pointer)));

    return @cast_DataIndex(index);
};

function get_instruction(instructions: *AutoBuffer, instructions_index_pointer: *whole_8): InstructionIndex {
    variable index = whole_8->(instructions_index_pointer);

    return @cast_InstructionIndex(index);
};

function autopush_mov_data_register8(buffer: *AutoBuffer, buffer_index_pointer: *whole_8, indexes_to_adjust: *AutoBuffer, indexes_to_adjust_index: *whole_8, register: Register8, data_index: DataIndex) {
    autopush_byte(buffer, buffer_index_pointer, 72_whole_1);
    autopush_byte(buffer, buffer_index_pointer, 199_whole_1);
    autopush_byte(buffer, buffer_index_pointer, byte(+(register, 192)));
    autoarray8_set(indexes_to_adjust, whole_8->(indexes_to_adjust_index), whole_8->(buffer_index_pointer));
    autopush_medium(buffer, buffer_index_pointer, whole_8_to_medium(@cast_whole_8(data_index)));

    whole_8<-(indexes_to_adjust_index, +(1, whole_8->(indexes_to_adjust_index)));
};

function autopush_mov_data_offset_register8(buffer: *AutoBuffer, buffer_index_pointer: *whole_8, indexes_to_adjust: *AutoBuffer, indexes_to_adjust_index: *whole_8, register: Register8, data_index: DataIndex, offset: whole_8) {
    autopush_byte(buffer, buffer_index_pointer, 72_whole_1);
    autopush_byte(buffer, buffer_index_pointer, 199_whole_1);
    autopush_byte(buffer, buffer_index_pointer, byte(+(register, 192)));
    autoarray8_set(indexes_to_adjust, whole_8->(indexes_to_adjust_index), whole_8->(buffer_index_pointer));
    autopush_medium(buffer, buffer_index_pointer, whole_8_to_medium(@cast_whole_8(+(data_index, offset))));

    whole_8<-(indexes_to_adjust_index, +(1, whole_8->(indexes_to_adjust_index)));
};

function autopush_push_data(buffer: *AutoBuffer, buffer_index_pointer: *whole_8, indexes_to_adjust: *AutoBuffer, indexes_to_adjust_index: *whole_8, data_index: DataIndex) {
    autopush_byte(buffer, buffer_index_pointer, 104_whole_1);
    autoarray8_set(indexes_to_adjust, whole_8->(indexes_to_adjust_index), whole_8->(buffer_index_pointer));
    autopush_medium(buffer, buffer_index_pointer, whole_8_to_medium(@cast_whole_8(data_index)));

    whole_8<-(indexes_to_adjust_index, +(1, whole_8->(indexes_to_adjust_index)));
};

function autopush_push_bss(buffer: *AutoBuffer, buffer_index_pointer: *whole_8, indexes_to_adjust: *AutoBuffer, indexes_to_adjust_index: *whole_8, bss_index: BssIndex) {
    autopush_byte(buffer, buffer_index_pointer, 104_whole_1);
    autoarray8_set(indexes_to_adjust, whole_8->(indexes_to_adjust_index), whole_8->(buffer_index_pointer));
    autopush_medium(buffer, buffer_index_pointer, whole_8_to_medium(@cast_whole_8(bss_index)));

    whole_8<-(indexes_to_adjust_index, +(1, whole_8->(indexes_to_adjust_index)));
};

function autoarray8_set(buffer: *AutoBuffer, index: whole_8, value: any_8) {
    autobuffer_set_whole_8(buffer, @cast_whole_8(value), *(index, 8));
    autobuffer_register(buffer, +(*(index, 8), 8), 8);
};

function autoarray8_get(buffer: *AutoBuffer, index: whole_8): any_8 {
    return autobuffer_get_whole_8(buffer, *(index, 8));
};

function autopush_mov_whole_8_register8(buffer: *AutoBuffer, buffer_index_pointer: *whole_8, register: Register8, value: whole_8) {
    if >(register, 7) {
        autopush_byte(buffer, buffer_index_pointer, 73_whole_1);
        autopush_byte(buffer, buffer_index_pointer, 199_whole_1);
        autopush_byte(buffer, buffer_index_pointer, byte(+(register, 184)));
        autopush_medium(buffer, buffer_index_pointer, whole_8_to_medium(value));
        return;
    };
    autopush_byte(buffer, buffer_index_pointer, 72_whole_1);
    autopush_byte(buffer, buffer_index_pointer, 199_whole_1);
    autopush_byte(buffer, buffer_index_pointer, byte(+(register, 192)));
    autopush_medium(buffer, buffer_index_pointer, whole_8_to_medium(value));
};

function autopush_mov_medium_register4(buffer: *AutoBuffer, buffer_index_pointer: *whole_8, register: Register4, value: any_4) {
    if >(register, 7) {
        autopush_byte(buffer, buffer_index_pointer, 65_whole_1);
        autopush_byte(buffer, buffer_index_pointer, byte(+(register, 176)));
        autopush_medium(buffer, buffer_index_pointer, value);
        return;
    };
    autopush_byte(buffer, buffer_index_pointer, byte(+(register, 184)));
    autopush_medium(buffer, buffer_index_pointer, value);
};

function autopush_mov_short_register2(buffer: *AutoBuffer, buffer_index_pointer: *whole_8, register: Register2, value: any_2) {
    if >(register, 7) {
        autopush_byte(buffer, buffer_index_pointer, 65_whole_1);
        autopush_byte(buffer, buffer_index_pointer, 102_whole_1);
        autopush_byte(buffer, buffer_index_pointer, byte(+(register, 176)));
        autopush_short(buffer, buffer_index_pointer, value);
        return;
    };
    autopush_byte(buffer, buffer_index_pointer, 102_whole_1);
    autopush_byte(buffer, buffer_index_pointer, byte(+(register, 184)));
    autopush_short(buffer, buffer_index_pointer, value);
};

function autopush_mov_byte_register1(buffer: *AutoBuffer, buffer_index_pointer: *whole_8, register: Register1, value: any_1) {
    if >(register, 7) {
        autopush_byte(buffer, buffer_index_pointer, 65_whole_1);
        autopush_byte(buffer, buffer_index_pointer, byte(+(register, 168)));
        autopush_byte(buffer, buffer_index_pointer, value);
        return;
    };
    autopush_byte(buffer, buffer_index_pointer, byte(+(register, 176)));
    autopush_byte(buffer, buffer_index_pointer, value);
};

function autopush_lea_register8_register8(buffer: *AutoBuffer, buffer_index_pointer: *whole_8, register_from: Register8, register_to: Register8) {
    variable instruction = 72;

    if >(register_to, 7) {
        instruction = +(instruction, 4);
    };

    if >(register_from, 7) {
        instruction = +(instruction, 1);
    };

    autopush_byte(buffer, buffer_index_pointer, byte(instruction));
    autopush_byte(buffer, buffer_index_pointer, 141_whole_1);

    variable value = 0;

    if >(register_to, 7) {
        value = +(value, *(-(register_to, 8), 8));
    };

    if <(register_to, 8) {
        value = +(value, *(register_to, 8));
    };

    if >(register_from, 7) {
        value = +(value, -(register_from, 8));
    };

    if <(register_from, 8) {
        value = +(value, register_from);
    };

    autopush_byte(buffer, buffer_index_pointer, byte(value));
};

function autopush_lea_register8_offset_register8(buffer: *AutoBuffer, buffer_index_pointer: *whole_8, register_from: Register8, offset: whole_8, register_to: Register8) {
    variable instruction = 72;

    if >(register_to, 7) {
        instruction = +(instruction, 4);
    };

    if >(register_from, 7) {
        instruction = +(instruction, 1);
    };

    autopush_byte(buffer, buffer_index_pointer, byte(instruction));
    autopush_byte(buffer, buffer_index_pointer, 141_whole_1);

    variable value = 0;

    if >(register_to, 7) {
        value = +(value, *(-(register_to, 8), 8));
    };

    if <(register_to, 8) {
        value = +(value, *(register_to, 8));
    };

    if >(register_from, 7) {
        value = +(value, -(register_from, 8));
    };

    if <(register_from, 8) {
        value = +(value, register_from);
    };

    autopush_byte(buffer, buffer_index_pointer, byte(+(128, value)));

    if =(register_from, RSP) {
        autopush_byte(buffer, buffer_index_pointer, 36_whole_1);
    };

    autopush_medium(buffer, buffer_index_pointer, whole_8_to_medium(offset));
};

function autopush_mov_data_offset_pointer_register8(buffer: *AutoBuffer, buffer_index_pointer: *whole_8, indexes_to_adjust_relative: *AutoBuffer, indexes_to_adjust_relative_index: *whole_8, data_index: DataIndex, offset: whole_8, register: Register8) {
    variable instruction = 72;

    if >(register, 7) {
        instruction = +(instruction, 4);
    };

    autopush_byte(buffer, buffer_index_pointer, byte(instruction));
    autopush_byte(buffer, buffer_index_pointer, 139_whole_1);

    variable value = 0;

    if >(register, 7) {
        value = +(value, *(-(register, 8), 8));
    };

    if <(register, 8) {
        value = +(value, *(register, 8));
    };

    autopush_byte(buffer, buffer_index_pointer, byte(+(value, 5)));

    autoarray8_set(indexes_to_adjust_relative, whole_8->(indexes_to_adjust_relative_index), whole_8->(buffer_index_pointer));
    autopush_medium(buffer, buffer_index_pointer, whole_8_to_medium(@cast_whole_8(data_index)));

    whole_8<-(indexes_to_adjust_relative_index, +(1, whole_8->(indexes_to_adjust_relative_index)));
};

function autopush_mov_data_offset_pointer_register4(buffer: *AutoBuffer, buffer_index_pointer: *whole_8, indexes_to_adjust_relative: *AutoBuffer, indexes_to_adjust_relative_index: *whole_8, data_index: DataIndex, offset: whole_8, register: Register4) {
    variable instruction = 64;

    if >(register, 7) {
        instruction = +(instruction, 4);
    };

    if !(=(instruction, 64)) {
        autopush_byte(buffer, buffer_index_pointer, byte(instruction));
    };
    autopush_byte(buffer, buffer_index_pointer, 139_whole_1);

    variable value = 0;

    if >(register, 7) {
        value = +(value, *(-(register, 8), 8));
    };

    if <(register, 8) {
        value = +(value, *(register, 8));
    };

    autopush_byte(buffer, buffer_index_pointer, byte(+(value, 5)));

    autoarray8_set(indexes_to_adjust_relative, whole_8->(indexes_to_adjust_relative_index), whole_8->(buffer_index_pointer));
    autopush_medium(buffer, buffer_index_pointer, whole_8_to_medium(@cast_whole_8(data_index)));

    whole_8<-(indexes_to_adjust_relative_index, +(1, whole_8->(indexes_to_adjust_relative_index)));
};

function autopush_mov_data_offset_pointer_register2(buffer: *AutoBuffer, buffer_index_pointer: *whole_8, indexes_to_adjust_relative: *AutoBuffer, indexes_to_adjust_relative_index: *whole_8, data_index: DataIndex, offset: whole_8, register: Register2) {
    variable instruction = 64;

    if >(register, 7) {
        instruction = +(instruction, 4);
    };

    autopush_byte(buffer, buffer_index_pointer, 102_whole_1);
    if !(=(instruction, 64)) {
        autopush_byte(buffer, buffer_index_pointer, byte(instruction));
    };
    autopush_byte(buffer, buffer_index_pointer, 139_whole_1);

    variable value = 0;

    if >(register, 7) {
        value = +(value, *(-(register, 8), 8));
    };

    if <(register, 8) {
        value = +(value, *(register, 8));
    };

    autopush_byte(buffer, buffer_index_pointer, byte(+(value, 5)));

    autoarray8_set(indexes_to_adjust_relative, whole_8->(indexes_to_adjust_relative_index), whole_8->(buffer_index_pointer));
    autopush_medium(buffer, buffer_index_pointer, whole_8_to_medium(@cast_whole_8(data_index)));

    whole_8<-(indexes_to_adjust_relative_index, +(1, whole_8->(indexes_to_adjust_relative_index)));
};

function autopush_mov_data_offset_pointer_register1(buffer: *AutoBuffer, buffer_index_pointer: *whole_8, indexes_to_adjust_relative: *AutoBuffer, indexes_to_adjust_relative_index: *whole_8, data_index: DataIndex, offset: whole_8, register: Register1) {
    variable instruction = 64;

    if >(register, 7) {
        instruction = +(instruction, 4);
    };

    if !(=(instruction, 64)) {
        autopush_byte(buffer, buffer_index_pointer, byte(instruction));
    };
    autopush_byte(buffer, buffer_index_pointer, 138_whole_1);

    variable value = 0;

    if >(register, 7) {
        value = +(value, *(-(register, 8), 8));
    };

    if <(register, 8) {
        value = +(value, *(register, 8));
    };

    autopush_byte(buffer, buffer_index_pointer, byte(+(value, 5)));

    autoarray8_set(indexes_to_adjust_relative, whole_8->(indexes_to_adjust_relative_index), whole_8->(buffer_index_pointer));
    autopush_medium(buffer, buffer_index_pointer, whole_8_to_medium(@cast_whole_8(data_index)));

    whole_8<-(indexes_to_adjust_relative_index, +(1, whole_8->(indexes_to_adjust_relative_index)));
};

function autopush_mov_bss_offset_pointer_register8(buffer: *AutoBuffer, buffer_index_pointer: *whole_8, indexes_to_adjust_relative: *AutoBuffer, indexes_to_adjust_relative_index: *whole_8, data_index: BssIndex, offset: whole_8, register: Register8) {
    variable instruction = 72;

    if >(register, 7) {
        instruction = +(instruction, 4);
    };

    autopush_byte(buffer, buffer_index_pointer, byte(instruction));
    autopush_byte(buffer, buffer_index_pointer, 139_whole_1);

    variable value = 0;

    if >(register, 7) {
        value = +(value, *(-(register, 8), 8));
    };

    if <(register, 8) {
        value = +(value, *(register, 8));
    };

    autopush_byte(buffer, buffer_index_pointer, byte(+(value, 5)));

    autoarray8_set(indexes_to_adjust_relative, whole_8->(indexes_to_adjust_relative_index), whole_8->(buffer_index_pointer));
    autopush_medium(buffer, buffer_index_pointer, whole_8_to_medium(@cast_whole_8(data_index)));

    whole_8<-(indexes_to_adjust_relative_index, +(1, whole_8->(indexes_to_adjust_relative_index)));
};

function autopush_mov_bss_offset_pointer_register4(buffer: *AutoBuffer, buffer_index_pointer: *whole_8, indexes_to_adjust_relative: *AutoBuffer, indexes_to_adjust_relative_index: *whole_8, data_index: BssIndex, offset: whole_8, register: Register4) {
    variable instruction = 64;

    if >(register, 7) {
        instruction = +(instruction, 4);
    };

    if !(=(instruction, 64)) {
        autopush_byte(buffer, buffer_index_pointer, byte(instruction));
    };
    autopush_byte(buffer, buffer_index_pointer, 139_whole_1);

    variable value = 0;

    if >(register, 7) {
        value = +(value, *(-(register, 8), 8));
    };

    if <(register, 8) {
        value = +(value, *(register, 8));
    };

    autopush_byte(buffer, buffer_index_pointer, byte(+(value, 5)));

    autoarray8_set(indexes_to_adjust_relative, whole_8->(indexes_to_adjust_relative_index), whole_8->(buffer_index_pointer));
    autopush_medium(buffer, buffer_index_pointer, whole_8_to_medium(@cast_whole_8(data_index)));

    whole_8<-(indexes_to_adjust_relative_index, +(1, whole_8->(indexes_to_adjust_relative_index)));
};

function autopush_mov_bss_offset_pointer_register2(buffer: *AutoBuffer, buffer_index_pointer: *whole_8, indexes_to_adjust_relative: *AutoBuffer, indexes_to_adjust_relative_index: *whole_8, data_index: BssIndex, offset: whole_8, register: Register2) {
    variable instruction = 64;

    if >(register, 7) {
        instruction = +(instruction, 4);
    };

    autopush_byte(buffer, buffer_index_pointer, 102_whole_1);
    if !(=(instruction, 64)) {
        autopush_byte(buffer, buffer_index_pointer, byte(instruction));
    };
    autopush_byte(buffer, buffer_index_pointer, 139_whole_1);

    variable value = 0;

    if >(register, 7) {
        value = +(value, *(-(register, 8), 8));
    };

    if <(register, 8) {
        value = +(value, *(register, 8));
    };

    autopush_byte(buffer, buffer_index_pointer, byte(+(value, 5)));

    autoarray8_set(indexes_to_adjust_relative, whole_8->(indexes_to_adjust_relative_index), whole_8->(buffer_index_pointer));
    autopush_medium(buffer, buffer_index_pointer, whole_8_to_medium(@cast_whole_8(data_index)));

    whole_8<-(indexes_to_adjust_relative_index, +(1, whole_8->(indexes_to_adjust_relative_index)));
};

function autopush_mov_bss_offset_pointer_register1(buffer: *AutoBuffer, buffer_index_pointer: *whole_8, indexes_to_adjust_relative: *AutoBuffer, indexes_to_adjust_relative_index: *whole_8, data_index: BssIndex, offset: whole_8, register: Register1) {
    variable instruction = 64;

    if >(register, 7) {
        instruction = +(instruction, 4);
    };

    if !(=(instruction, 64)) {
        autopush_byte(buffer, buffer_index_pointer, byte(instruction));
    };
    autopush_byte(buffer, buffer_index_pointer, 138_whole_1);

    variable value = 0;

    if >(register, 7) {
        value = +(value, *(-(register, 8), 8));
    };

    if <(register, 8) {
        value = +(value, *(register, 8));
    };

    autopush_byte(buffer, buffer_index_pointer, byte(+(value, 5)));

    autoarray8_set(indexes_to_adjust_relative, whole_8->(indexes_to_adjust_relative_index), whole_8->(buffer_index_pointer));
    autopush_medium(buffer, buffer_index_pointer, whole_8_to_medium(@cast_whole_8(data_index)));

    whole_8<-(indexes_to_adjust_relative_index, +(1, whole_8->(indexes_to_adjust_relative_index))));
};

function autopush_mov_register8_bss_pointer_offset(buffer: *AutoBuffer, buffer_index_pointer: *whole_8, indexes_to_adjust_relative: *AutoBuffer, indexes_to_adjust_relative_index: *whole_8, register: Register8, data_index: BssIndex, offset: whole_8) {
    variable instruction = 72;

    if >(register, 7) {
        instruction = +(instruction, 4);
    };

    autopush_byte(buffer, buffer_index_pointer, byte(instruction));
    autopush_byte(buffer, buffer_index_pointer, 137_whole_1);

    variable value = 0;

    if >(register, 7) {
        value = +(value, *(-(register, 8), 8));
    };

    if <(register, 8) {
        value = +(value, *(register, 8));
    };

    autopush_byte(buffer, buffer_index_pointer, byte(+(value, 5)));

    autoarray8_set(indexes_to_adjust_relative, whole_8->(indexes_to_adjust_relative_index), whole_8->(buffer_index_pointer));
    autopush_medium(buffer, buffer_index_pointer, whole_8_to_medium(@cast_whole_8(+(data_index, offset))));

    whole_8<-(indexes_to_adjust_relative_index, +(1, whole_8->(indexes_to_adjust_relative_index)));
};

function autopush_mov_register8_register8(buffer: *AutoBuffer, buffer_index_pointer: *whole_8, register_from: Register8, register_to: Register8) {
    variable instruction = 72;

    if >(register_to, 7) {
        instruction = +(instruction, 1);
    };

    if >(register_from, 7) {
        instruction = +(instruction, 4);
    };

    autopush_byte(buffer, buffer_index_pointer, byte(instruction));
    autopush_byte(buffer, buffer_index_pointer, 137_whole_1);

    variable value = 0;

    if >(register_to, 7) {
        value = +(value, -(register_to, 8));
    };

    if <(register_to, 8) {
        value = +(value, register_to);
    };

    if >(register_from, 7) {
        value = +(value, *(-(register_from, 8), 8));
    };

    if <(register_from, 8) {
        value = +(value, *(register_from, 8));
    };

    autopush_byte(buffer, buffer_index_pointer, byte(+(192, value)));
};

function autopush_cmp_register8_register8(buffer: *AutoBuffer, buffer_index_pointer: *whole_8, register1: Register8, register2: Register8) {
    variable instruction = 72;

    if >(register1, 7) {
        instruction = +(instruction, 1);
    };

    if >(register2, 7) {
        instruction = +(instruction, 4);
    };

    autopush_byte(buffer, buffer_index_pointer, byte(instruction));
    autopush_byte(buffer, buffer_index_pointer, 57_whole_1);

    variable value = 0;

    if >(register1, 7) {
        value = +(value, -(register1, 8));
    };

    if <(register1, 8) {
        value = +(value, register1);
    };

    if >(register2, 7) {
        value = +(value, *(-(register2, 8), 8));
    };

    if <(register2, 8) {
        value = +(value, *(register2, 8));
    };

    autopush_byte(buffer, buffer_index_pointer, byte(+(192, value)));
};

function autopush_cmp_register4_register4(buffer: *AutoBuffer, buffer_index_pointer: *whole_8, register1: Register4, register2: Register4) {
    variable instruction = 64;

    if >(register1, 7) {
        instruction = +(instruction, 1);
    };

    if >(register2, 7) {
        instruction = +(instruction, 4);
    };

    if !(=(instruction, 64)) {
        autopush_byte(buffer, buffer_index_pointer, byte(instruction));
    };
    autopush_byte(buffer, buffer_index_pointer, 57_whole_1);

    variable value = 0;

    if >(register1, 7) {
        value = +(value, -(register1, 8));
    };

    if <(register1, 8) {
        value = +(value, register1);
    };

    if >(register2, 7) {
        value = +(value, *(-(register2, 8), 8));
    };

    if <(register2, 8) {
        value = +(value, *(register2, 8));
    };

    autopush_byte(buffer, buffer_index_pointer, byte(+(192, value)));
};

function autopush_cmp_register2_register2(buffer: *AutoBuffer, buffer_index_pointer: *whole_8, register1: Register2, register2: Register2) {
    variable instruction = 64;

    if >(register1, 7) {
        instruction = +(instruction, 1);
    };

    if >(register2, 7) {
        instruction = +(instruction, 4);
    };

    if !(=(instruction, 64)) {
        autopush_byte(buffer, buffer_index_pointer, byte(instruction));
    };
    autopush_byte(buffer, buffer_index_pointer, 102_whole_1);
    autopush_byte(buffer, buffer_index_pointer, 57_whole_1);

    variable value = 0;

    if >(register1, 7) {
        value = +(value, -(register1, 8));
    };

    if <(register1, 8) {
        value = +(value, register1);
    };

    if >(register2, 7) {
        value = +(value, *(-(register2, 8), 8));
    };

    if <(register2, 8) {
        value = +(value, *(register2, 8));
    };

    autopush_byte(buffer, buffer_index_pointer, byte(+(192, value)));
};

function autopush_cmp_register1_register1(buffer: *AutoBuffer, buffer_index_pointer: *whole_8, register1: Register1, register2: Register1) {
    variable instruction = 64;

    if >(register1, 7) {
        instruction = +(instruction, 1);
    };

    if >(register2, 7) {
        instruction = +(instruction, 4);
    };

    if !(=(instruction, 64)) {
        autopush_byte(buffer, buffer_index_pointer, byte(instruction));
    };
    autopush_byte(buffer, buffer_index_pointer, 56_whole_1);

    variable value = 0;

    if >(register1, 7) {
        value = +(value, -(register1, 8));
    };

    if <(register1, 8) {
        value = +(value, register1);
    };

    if >(register2, 7) {
        value = +(value, *(-(register2, 8), 8));
    };

    if <(register2, 8) {
        value = +(value, *(register2, 8));
    };

    autopush_byte(buffer, buffer_index_pointer, byte(+(192, value)));
};

function autopush_cmove_register8_register8(buffer: *AutoBuffer, buffer_index_pointer: *whole_8, register1: Register8, register2: Register8) {
    variable instruction = 72;

    if >(register1, 7) {
        instruction = +(instruction, 4);
    };

    if >(register2, 7) {
        instruction = +(instruction, 1);
    };

    autopush_byte(buffer, buffer_index_pointer, byte(instruction));
    autopush_byte(buffer, buffer_index_pointer, 15_whole_1);
    autopush_byte(buffer, buffer_index_pointer, 68_whole_1);

    variable value = 0;

    if >(register1, 7) {
        value = +(value, *(-(register1, 8), 8));
    };

    if <(register1, 8) {
        value = +(value, *(register1, 8));
    };

    if >(register2, 7) {
        value = +(value, -(register2, 8));
    };

    if <(register2, 8) {
        value = +(value, register2);
    };

    autopush_byte(buffer, buffer_index_pointer, byte(+(192, value)));
};

function autopush_cmova_register8_register8(buffer: *AutoBuffer, buffer_index_pointer: *whole_8, register1: Register8, register2: Register8) {
    variable instruction = 72;

    if >(register1, 7) {
        instruction = +(instruction, 4);
    };

    if >(register2, 7) {
        instruction = +(instruction, 1);
    };

    autopush_byte(buffer, buffer_index_pointer, byte(instruction));
    autopush_byte(buffer, buffer_index_pointer, 15_whole_1);
    autopush_byte(buffer, buffer_index_pointer, 71_whole_1);

    variable value = 0;

    if >(register1, 7) {
        value = +(value, *(-(register1, 8), 8));
    };

    if <(register1, 8) {
        value = +(value, *(register1, 8));
    };

    if >(register2, 7) {
        value = +(value, -(register2, 8));
    };

    if <(register2, 8) {
        value = +(value, register2);
    };

    autopush_byte(buffer, buffer_index_pointer, byte(+(192, value)));
};

function autopush_cmovb_register8_register8(buffer: *AutoBuffer, buffer_index_pointer: *whole_8, register1: Register8, register2: Register8) {
    variable instruction = 72;

    if >(register1, 7) {
        instruction = +(instruction, 4);
    };

    if >(register2, 7) {
        instruction = +(instruction, 1);
    };

    autopush_byte(buffer, buffer_index_pointer, byte(instruction));
    autopush_byte(buffer, buffer_index_pointer, 15_whole_1);
    autopush_byte(buffer, buffer_index_pointer, 66_whole_1);

    variable value = 0;

    if >(register1, 7) {
        value = +(value, *(-(register1, 8), 8));
    };

    if <(register1, 8) {
        value = +(value, *(register1, 8));
    };

    if >(register2, 7) {
        value = +(value, -(register2, 8));
    };

    if <(register2, 8) {
        value = +(value, register2);
    };

    autopush_byte(buffer, buffer_index_pointer, byte(+(192, value)));
};

function autopush_cmp_register1_register1(buffer: *AutoBuffer, buffer_index_pointer: *whole_8, register1: Register1, register2: Register1) {
    variable instruction = 64;

    if >(register1, 7) {
        instruction = +(instruction, 1);
    };

    if >(register2, 7) {
        instruction = +(instruction, 4);
    };

    if !(=(instruction, 64)) {
        autopush_byte(buffer, buffer_index_pointer, byte(instruction));
    };
    autopush_byte(buffer, buffer_index_pointer, 56_whole_1);

    variable value = 0;

    if >(register1, 7) {
        value = +(value, -(register1, 8));
    };

    if <(register1, 8) {
        value = +(value, register1);
    };

    if >(register2, 7) {
        value = +(value, *(-(register2, 8), 8));
    };

    if <(register2, 8) {
        value = +(value, *(register2, 8));
    };

    autopush_byte(buffer, buffer_index_pointer, byte(+(192, value)));
};

function autopush_mov_register8_pointer_offset_register8(buffer: *AutoBuffer, buffer_index_pointer: *whole_8, register_from: Register8, offset: whole_8, register_to: Register8) {
    variable instruction = 72;

    if >(register_to, 7) {
        instruction = +(instruction, 4);
    };

    if >(register_from, 7) {
        instruction = +(instruction, 1);
    };

    autopush_byte(buffer, buffer_index_pointer, byte(instruction));
    autopush_byte(buffer, buffer_index_pointer, 139_whole_1);

    variable value = 0;

    if >(register_to, 7) {
        value = +(value, *(-(register_to, 8), 8));
    };

    if <(register_to, 8) {
        value = +(value, *(register_to, 8));
    };

    if >(register_from, 7) {
        value = +(value, -(register_from, 8));
    };

    if <(register_from, 8) {
        value = +(value, register_from);
    };

    autopush_byte(buffer, buffer_index_pointer, byte(+(128, value)));

    if =(register_from, RSP) {
        autopush_byte(buffer, buffer_index_pointer, 36_whole_1);
    };

    autopush_medium(buffer, buffer_index_pointer, whole_8_to_medium(offset));
};

function autopush_mov_register8_pointer_offset_register4(buffer: *AutoBuffer, buffer_index_pointer: *whole_8, register_from: Register8, offset: whole_8, register_to: Register4) {
    variable instruction = 64;

    if >(register_to, 7) {
        instruction = +(instruction, 4);
    };

    if >(register_from, 7) {
        instruction = +(instruction, 1);
    };

    if !(=(instruction, 64)) {
        autopush_byte(buffer, buffer_index_pointer, byte(instruction));
    };
    autopush_byte(buffer, buffer_index_pointer, 139_whole_1);

    variable value = 0;

    if >(register_to, 7) {
        value = +(value, *(-(register_to, 8), 8));
    };

    if <(register_to, 8) {
        value = +(value, *(register_to, 8));
    };

    if >(register_from, 7) {
        value = +(value, -(register_from, 8));
    };

    if <(register_from, 8) {
        value = +(value, register_from);
    };

    autopush_byte(buffer, buffer_index_pointer, byte(+(128, value)));

    if =(register_from, RSP) {
        autopush_byte(buffer, buffer_index_pointer, 36_whole_1);
    };

    autopush_medium(buffer, buffer_index_pointer, whole_8_to_medium(offset));
};

function autopush_mov_register8_pointer_offset_register2(buffer: *AutoBuffer, buffer_index_pointer: *whole_8, register_from: Register8, offset: whole_8, register_to: Register2) {
    variable instruction = 64;

    if >(register_to, 7) {
        instruction = +(instruction, 4);
    };

    if >(register_from, 7) {
        instruction = +(instruction, 1);
    };

    autopush_byte(buffer, buffer_index_pointer, 102_whole_1);
    if !(=(instruction, 64)) {
        autopush_byte(buffer, buffer_index_pointer, byte(instruction));
    };
    autopush_byte(buffer, buffer_index_pointer, 139_whole_1);

    variable value = 0;

    if >(register_to, 7) {
        value = +(value, *(-(register_to, 8), 8));
    };

    if <(register_to, 8) {
        value = +(value, *(register_to, 8));
    };

    if >(register_from, 7) {
        value = +(value, -(register_from, 8));
    };

    if <(register_from, 8) {
        value = +(value, register_from);
    };

    autopush_byte(buffer, buffer_index_pointer, byte(+(128, value)));

    if =(register_from, RSP) {
        autopush_byte(buffer, buffer_index_pointer, 36_whole_1);
    };

    autopush_medium(buffer, buffer_index_pointer, whole_8_to_medium(offset));
};

function autopush_mov_register8_pointer_offset_register1(buffer: *AutoBuffer, buffer_index_pointer: *whole_8, register_from: Register8, offset: whole_8, register_to: Register1) {
    variable instruction = 64;
    variable instruction2 = 138;

    if >(register_to, 7) {
        instruction = +(instruction, 4);
        instruction2 = +(instruction2, 1);
    };

    if >(register_from, 7) {
        instruction = +(instruction, 1);
        instruction2 = +(instruction2, 1);
    };

    if !(=(instruction, 64)) {
        autopush_byte(buffer, buffer_index_pointer, byte(instruction));
    };
    autopush_byte(buffer, buffer_index_pointer, byte(instruction2));

    variable value = 0;

    if >(register_to, 7) {
        value = +(value, *(-(register_to, 8), 8));
    };

    if <(register_to, 8) {
        value = +(value, *(register_to, 8));
    };

    if >(register_from, 7) {
        value = +(value, -(register_from, 8));
    };

    if <(register_from, 8) {
        value = +(value, register_from);
    };

    autopush_byte(buffer, buffer_index_pointer, byte(+(128, value)));

    if =(register_from, RSP) {
        autopush_byte(buffer, buffer_index_pointer, 36_whole_1);
    };

    autopush_medium(buffer, buffer_index_pointer, whole_8_to_medium(offset));
};

function autopush_mov_register1_register8_pointer_offset(buffer: *AutoBuffer, buffer_index_pointer: *whole_8, register_from: Register1, register_to: Register8, offset: whole_8) {
    variable instruction = 64;

    if >(register_to, 7) {
        instruction = +(instruction, 1);
    };

    if >(register_from, 7) {
        instruction = +(instruction, 4);
    };

    if !(=(instruction, 64)) {
        autopush_byte(buffer, buffer_index_pointer, byte(instruction));
    };
    autopush_byte(buffer, buffer_index_pointer, 136_whole_1);

    variable value = 0;

    if >(register_from, 7) {
        value = +(value, *(-(register_from, 8), 8));
    };

    if <(register_from, 8) {
        value = +(value, *(register_from, 8));
    };

    if >(register_to, 7) {
        value = +(value, -(register_to, 8));
    };

    if <(register_to, 8) {
        value = +(value, register_to);
    };

    autopush_byte(buffer, buffer_index_pointer, byte(+(128, value)));

    if =(register_to, RSP) {
        autopush_byte(buffer, buffer_index_pointer, 36_whole_1);
    };

    autopush_medium(buffer, buffer_index_pointer, whole_8_to_medium(offset));
};

function autopush_mov_register2_register8_pointer_offset(buffer: *AutoBuffer, buffer_index_pointer: *whole_8, register_from: Register2,  register_to: Register8, offset: whole_8) {
    variable instruction = 64;

    if >(register_to, 7) {
        instruction = +(instruction, 1);
    };

    if >(register_from, 7) {
        instruction = +(instruction, 4);
    };

    autopush_byte(buffer, buffer_index_pointer, 102_whole_1);
    if !(=(instruction, 64)) {
        autopush_byte(buffer, buffer_index_pointer, byte(instruction));
    };
    autopush_byte(buffer, buffer_index_pointer, 137_whole_1);

    variable value = 0;

    if >(register_to, 7) {
        value = +(value, -(register_to, 8));
    };

    if <(register_to, 8) {
        value = +(value, register_to);
    };

    if >(register_from, 7) {
        value = +(value, *(-(register_from, 8), 8));
    };

    if <(register_from, 8) {
        value = +(value, *(register_from, 8));
    };

    autopush_byte(buffer, buffer_index_pointer, byte(+(128, value)));

    if =(register_to, RSP) {
        autopush_byte(buffer, buffer_index_pointer, 36_whole_1);
    };

    autopush_medium(buffer, buffer_index_pointer, whole_8_to_medium(offset));
};

function autopush_mov_register4_register8_pointer_offset(buffer: *AutoBuffer, buffer_index_pointer: *whole_8, register_from: Register4,  register_to: Register8, offset: whole_8) {
    variable instruction = 64;

    if >(register_to, 7) {
        instruction = +(instruction, 1);
    };

    if >(register_from, 7) {
        instruction = +(instruction, 4);
    };

    if !(=(instruction, 64)) {
        autopush_byte(buffer, buffer_index_pointer, byte(instruction));
    };
    autopush_byte(buffer, buffer_index_pointer, 137_whole_1);

    variable value = 0;

    if >(register_to, 7) {
        value = +(value, -(register_to, 8));
    };

    if <(register_to, 8) {
        value = +(value, register_to);
    };

    if >(register_from, 7) {
        value = +(value, *(-(register_from, 8), 8));
    };

    if <(register_from, 8) {
        value = +(value, *(register_from, 8));
    };

    autopush_byte(buffer, buffer_index_pointer, byte(+(128, value)));

    if =(register_to, RSP) {
        autopush_byte(buffer, buffer_index_pointer, 36_whole_1);
    };

    autopush_medium(buffer, buffer_index_pointer, whole_8_to_medium(offset));
};

function autopush_mov_register8_register8_pointer_offset(buffer: *AutoBuffer, buffer_index_pointer: *whole_8, register_from: Register8,  register_to: Register8, offset: whole_8) {
    variable instruction = 72;

    if >(register_to, 7) {
        instruction = +(instruction, 1);
    };

    if >(register_from, 7) {
        instruction = +(instruction, 4);
    };

    autopush_byte(buffer, buffer_index_pointer, byte(instruction));
    autopush_byte(buffer, buffer_index_pointer, 137_whole_1);

    variable value = 0;

    if >(register_to, 7) {
        value = +(value, -(register_to, 8));
    };

    if <(register_to, 8) {
        value = +(value, register_to);
    };

    if >(register_from, 7) {
        value = +(value, *(-(register_from, 8), 8));
    };

    if <(register_from, 8) {
        value = +(value, *(register_from, 8));
    };

    autopush_byte(buffer, buffer_index_pointer, byte(+(128, value)));

    if =(register_to, RSP) {
        autopush_byte(buffer, buffer_index_pointer, 36_whole_1);
    };

    autopush_medium(buffer, buffer_index_pointer, whole_8_to_medium(offset));
};

function autopush_add_register8_whole_8(buffer: *AutoBuffer, buffer_index_pointer: *whole_8, register: Register8, value: whole_8) {
    autopush_byte(buffer, buffer_index_pointer, 72_whole_1);
    autopush_byte(buffer, buffer_index_pointer, 129_whole_1);
    autopush_byte(buffer, buffer_index_pointer, byte(+(register, 192)));
    autopush_medium(buffer, buffer_index_pointer, whole_8_to_medium(value));
};

function autopush_mul_register8(buffer: *AutoBuffer, buffer_index_pointer: *whole_8, register: Register8) {
    variable instruction = 72;
    if >(register, 7) {
        instruction = 73;
    };
    autopush_byte(buffer, buffer_index_pointer, byte(instruction));
    autopush_byte(buffer, buffer_index_pointer, 247_whole_1);
    if >(register, 7) {
        autopush_byte(buffer, buffer_index_pointer, byte(+(216, register)));
        return;
    };
    autopush_byte(buffer, buffer_index_pointer, byte(+(224, register)));
};

function autopush_mul_register4(buffer: *AutoBuffer, buffer_index_pointer: *whole_8, register: Register4) {
    variable instruction = 64;
    if >(register, 7) {
        instruction = 65;
    };

    if !(=(instruction, 64)) {
        autopush_byte(buffer, buffer_index_pointer, byte(instruction));
    };
    autopush_byte(buffer, buffer_index_pointer, 247_whole_1);

    if >(register, 7) {
        autopush_byte(buffer, buffer_index_pointer, byte(+(216, register)));
        return;
    };
    autopush_byte(buffer, buffer_index_pointer, byte(+(224, register)));
};

function autopush_mul_register2(buffer: *AutoBuffer, buffer_index_pointer: *whole_8, register: Register2) {
    variable instruction = 64;
    if >(register, 7) {
        instruction = 65;
    };

    if !(=(instruction, 64)) {
        autopush_byte(buffer, buffer_index_pointer, byte(instruction));
    };
    autopush_byte(buffer, buffer_index_pointer, 102_whole_1);
    autopush_byte(buffer, buffer_index_pointer, 247_whole_1);

    if >(register, 7) {
        autopush_byte(buffer, buffer_index_pointer, byte(+(216, register)));
        return;
    };
    autopush_byte(buffer, buffer_index_pointer, byte(+(224, register)));
};

function autopush_mul_register1(buffer: *AutoBuffer, buffer_index_pointer: *whole_8, register: Register1) {
    variable instruction = 64;
    if >(register, 7) {
        instruction = 65;
    };

    if !(=(instruction, 64)) {
        autopush_byte(buffer, buffer_index_pointer, byte(instruction));
    };
    autopush_byte(buffer, buffer_index_pointer, 246_whole_1);

    if >(register, 7) {
        autopush_byte(buffer, buffer_index_pointer, byte(+(216, register)));
        return;
    };
    autopush_byte(buffer, buffer_index_pointer, byte(+(224, register)));
};

function autopush_div_register8(buffer: *AutoBuffer, buffer_index_pointer: *whole_8, register: Register8) {
    variable instruction = 72;
    if >(register, 7) {
        instruction = 73;
    };
    autopush_byte(buffer, buffer_index_pointer, byte(instruction));
    autopush_byte(buffer, buffer_index_pointer, 247_whole_1);
    if >(register, 7) {
        autopush_byte(buffer, buffer_index_pointer, byte(+(232, register)));
        return;
    };
    autopush_byte(buffer, buffer_index_pointer, byte(+(240, register)));
};

function autopush_div_register4(buffer: *AutoBuffer, buffer_index_pointer: *whole_8, register: Register4) {
    variable instruction = 64;
    if >(register, 7) {
        instruction = 65;
    };

    if !(=(instruction, 64)) {
        autopush_byte(buffer, buffer_index_pointer, byte(instruction));
    };
    autopush_byte(buffer, buffer_index_pointer, 247_whole_1);

    if >(register, 7) {
        autopush_byte(buffer, buffer_index_pointer, byte(+(232, register)));
        return;
    };
    autopush_byte(buffer, buffer_index_pointer, byte(+(240, register)));
};

function autopush_div_register2(buffer: *AutoBuffer, buffer_index_pointer: *whole_8, register: Register2) {
    variable instruction = 64;
    if >(register, 7) {
        instruction = 65;
    };

    if !(=(instruction, 64)) {
        autopush_byte(buffer, buffer_index_pointer, byte(instruction));
    };
    autopush_byte(buffer, buffer_index_pointer, 102_whole_1);
    autopush_byte(buffer, buffer_index_pointer, 247_whole_1);

    if >(register, 7) {
        autopush_byte(buffer, buffer_index_pointer, byte(+(232, register)));
        return;
    };
    autopush_byte(buffer, buffer_index_pointer, byte(+(240, register)));
};

function autopush_div_register1(buffer: *AutoBuffer, buffer_index_pointer: *whole_8, register: Register1) {
    variable instruction = 64;
    if >(register, 7) {
        instruction = 65;
    };

    if !(=(instruction, 64)) {
        autopush_byte(buffer, buffer_index_pointer, byte(instruction));
    };
    autopush_byte(buffer, buffer_index_pointer, 246_whole_1);

    if >(register, 7) {
        autopush_byte(buffer, buffer_index_pointer, byte(+(232, register)));
        return;
    };
    autopush_byte(buffer, buffer_index_pointer, byte(+(240, register)));
};

function autopush_add_register8_register8(buffer: *AutoBuffer, buffer_index_pointer: *whole_8, register1: Register8, register2: Register8) {
    variable instruction = 72;

    if >(register1, 7) {
        instruction = +(instruction, 1);
    };

    if >(register2, 7) {
        instruction = +(instruction, 4);
    };

    autopush_byte(buffer, buffer_index_pointer, byte(instruction));
    autopush_byte(buffer, buffer_index_pointer, 1_whole_1);

    variable value = 0;

    if >(register1, 7) {
        value = +(value, -(register1, 8));
    };

    if <(register1, 8) {
        value = +(value, register1);
    };

    if >(register2, 7) {
        value = +(value, *(-(register2, 8), 8));
    };

    if <(register2, 8) {
        value = +(value, *(register2, 8));
    };

    autopush_byte(buffer, buffer_index_pointer, byte(+(192, value)));
};

function autopush_add_register4_register4(buffer: *AutoBuffer, buffer_index_pointer: *whole_8, register1: Register4, register2: Register4) {
    variable instruction = 64;

    if >(register1, 7) {
        instruction = +(instruction, 1);
    };

    if >(register2, 7) {
        instruction = +(instruction, 4);
    };

    if !(=(instruction, 64)) {
        autopush_byte(buffer, buffer_index_pointer, byte(instruction));
    };
    autopush_byte(buffer, buffer_index_pointer, 1_whole_1);

    variable value = 0;

    if >(register1, 7) {
        value = +(value, -(register1, 8));
    };

    if <(register1, 8) {
        value = +(value, register1);
    };

    if >(register2, 7) {
        value = +(value, *(-(register2, 8), 8));
    };

    if <(register2, 8) {
        value = +(value, *(register2, 8));
    };

    autopush_byte(buffer, buffer_index_pointer, byte(+(192, value)));
};

function autopush_add_register2_register2(buffer: *AutoBuffer, buffer_index_pointer: *whole_8, register1: Register2, register2: Register2) {
    variable instruction = 64;

    if >(register1, 7) {
        instruction = +(instruction, 1);
    };

    if >(register2, 7) {
        instruction = +(instruction, 4);
    };

    if !(=(instruction, 64)) {
        autopush_byte(buffer, buffer_index_pointer, byte(instruction));
    };
    autopush_byte(buffer, buffer_index_pointer, 102_whole_1);
    autopush_byte(buffer, buffer_index_pointer, 1_whole_1);

    variable value = 0;

    if >(register1, 7) {
        value = +(value, -(register1, 8));
    };

    if <(register1, 8) {
        value = +(value, register1);
    };

    if >(register2, 7) {
        value = +(value, *(-(register2, 8), 8));
    };

    if <(register2, 8) {
        value = +(value, *(register2, 8));
    };

    autopush_byte(buffer, buffer_index_pointer, byte(+(192, value)));
};

function autopush_add_register1_register1(buffer: *AutoBuffer, buffer_index_pointer: *whole_8, register1: Register1, register2: Register1) {
    variable instruction = 64;

    if >(register1, 7) {
        instruction = +(instruction, 1);
    };

    if >(register2, 7) {
        instruction = +(instruction, 4);
    };

    if !(=(instruction, 64)) {
        autopush_byte(buffer, buffer_index_pointer, byte(instruction));
    };
    autopush_byte(buffer, buffer_index_pointer, 0_whole_1);

    variable value = 0;

    if >(register1, 7) {
        value = +(value, -(register1, 8));
    };

    if <(register1, 8) {
        value = +(value, register1);
    };

    if >(register2, 7) {
        value = +(value, *(-(register2, 8), 8));
    };

    if <(register2, 8) {
        value = +(value, *(register2, 8));
    };

    autopush_byte(buffer, buffer_index_pointer, byte(+(192, value)));
};

function autopush_or_register1_register1(buffer: *AutoBuffer, buffer_index_pointer: *whole_8, register1: Register1, register2: Register1) {
    variable instruction = 64;

    if >(register1, 7) {
        instruction = +(instruction, 1);
    };

    if >(register2, 7) {
        instruction = +(instruction, 4);
    };

    if !(=(instruction, 64)) {
        autopush_byte(buffer, buffer_index_pointer, byte(instruction));
    };
    autopush_byte(buffer, buffer_index_pointer, 8_whole_1);

    variable value = 0;

    if >(register1, 7) {
        value = +(value, -(register1, 8));
    };

    if <(register1, 8) {
        value = +(value, register1);
    };

    if >(register2, 7) {
        value = +(value, *(-(register2, 8), 8));
    };

    if <(register2, 8) {
        value = +(value, *(register2, 8));
    };

    autopush_byte(buffer, buffer_index_pointer, byte(+(192, value)));
};

function autopush_and_register1_register1(buffer: *AutoBuffer, buffer_index_pointer: *whole_8, register1: Register1, register2: Register1) {
    variable instruction = 64;

    if >(register1, 7) {
        instruction = +(instruction, 1);
    };

    if >(register2, 7) {
        instruction = +(instruction, 4);
    };

    if !(=(instruction, 64)) {
        autopush_byte(buffer, buffer_index_pointer, byte(instruction));
    };
    autopush_byte(buffer, buffer_index_pointer, 32_whole_1);

    variable value = 0;

    if >(register1, 7) {
        value = +(value, -(register1, 8));
    };

    if <(register1, 8) {
        value = +(value, register1);
    };

    if >(register2, 7) {
        value = +(value, *(-(register2, 8), 8));
    };

    if <(register2, 8) {
        value = +(value, *(register2, 8));
    };

    autopush_byte(buffer, buffer_index_pointer, byte(+(192, value)));
};

function autopush_sub_register8_register8(buffer: *AutoBuffer, buffer_index_pointer: *whole_8, register1: Register8, register2: Register8) {
    variable instruction = 72;

    if >(register1, 7) {
        instruction = +(instruction, 1);
    };

    if >(register2, 7) {
        instruction = +(instruction, 4);
    };

    autopush_byte(buffer, buffer_index_pointer, byte(instruction));
    autopush_byte(buffer, buffer_index_pointer, 41_whole_1);

    variable value = 0;

    if >(register1, 7) {
        value = +(value, -(register1, 8));
    };

    if <(register1, 8) {
        value = +(value, register1);
    };

    if >(register2, 7) {
        value = +(value, *(-(register2, 8), 8));
    };

    if <(register2, 8) {
        value = +(value, *(register2, 8));
    };

    autopush_byte(buffer, buffer_index_pointer, byte(+(192, value)));
};

function autopush_sub_register4_register4(buffer: *AutoBuffer, buffer_index_pointer: *whole_8, register1: Register4, register2: Register4) {
    variable instruction = 64;

    if >(register1, 7) {
        instruction = +(instruction, 1);
    };

    if >(register2, 7) {
        instruction = +(instruction, 4);
    };

    if !(=(instruction, 64)) {
        autopush_byte(buffer, buffer_index_pointer, byte(instruction));
    };
    autopush_byte(buffer, buffer_index_pointer, 41_whole_1);

    variable value = 0;

    if >(register1, 7) {
        value = +(value, -(register1, 8));
    };

    if <(register1, 8) {
        value = +(value, register1);
    };

    if >(register2, 7) {
        value = +(value, *(-(register2, 8), 8));
    };

    if <(register2, 8) {
        value = +(value, *(register2, 8));
    };

    autopush_byte(buffer, buffer_index_pointer, byte(+(192, value)));
};

function autopush_sub_register2_register2(buffer: *AutoBuffer, buffer_index_pointer: *whole_8, register1: Register2, register2: Register2) {
    variable instruction = 64;

    if >(register1, 7) {
        instruction = +(instruction, 1);
    };

    if >(register2, 7) {
        instruction = +(instruction, 4);
    };

    if !(=(instruction, 64)) {
        autopush_byte(buffer, buffer_index_pointer, byte(instruction));
    };
    autopush_byte(buffer, buffer_index_pointer, 102_whole_1);
    autopush_byte(buffer, buffer_index_pointer, 41_whole_1);

    variable value = 0;

    if >(register1, 7) {
        value = +(value, -(register1, 8));
    };

    if <(register1, 8) {
        value = +(value, register1);
    };

    if >(register2, 7) {
        value = +(value, *(-(register2, 8), 8));
    };

    if <(register2, 8) {
        value = +(value, *(register2, 8));
    };

    autopush_byte(buffer, buffer_index_pointer, byte(+(192, value)));
};

function autopush_sub_register1_register1(buffer: *AutoBuffer, buffer_index_pointer: *whole_8, register1: Register1, register2: Register1) {
    variable instruction = 64;

    if >(register1, 7) {
        instruction = +(instruction, 1);
    };

    if >(register2, 7) {
        instruction = +(instruction, 4);
    };

    if !(=(instruction, 64)) {
        autopush_byte(buffer, buffer_index_pointer, byte(instruction));
    };
    autopush_byte(buffer, buffer_index_pointer, 40_whole_1);

    variable value = 0;

    if >(register1, 7) {
        value = +(value, -(register1, 8));
    };

    if <(register1, 8) {
        value = +(value, register1);
    };

    if >(register2, 7) {
        value = +(value, *(-(register2, 8), 8));
    };

    if <(register2, 8) {
        value = +(value, *(register2, 8));
    };

    autopush_byte(buffer, buffer_index_pointer, byte(+(192, value)));
};

function autopush_sub_register8_whole_8(buffer: *AutoBuffer, buffer_index_pointer: *whole_8, register: Register8, value: whole_8) {
    autopush_byte(buffer, buffer_index_pointer, 72_whole_1);
    autopush_byte(buffer, buffer_index_pointer, 129_whole_1);
    autopush_byte(buffer, buffer_index_pointer, byte(+(register, 232)));
    autopush_medium(buffer, buffer_index_pointer, whole_8_to_medium(value));
};

function autopush_push_whole_8(buffer: *AutoBuffer, buffer_index_pointer: *whole_8, value: whole_8) {
    autopush_byte(buffer, buffer_index_pointer, 104_whole_1);
    autopush_medium(buffer, buffer_index_pointer, whole_8_to_medium(value));
};

function autopush_pop_register8(buffer: *AutoBuffer, buffer_index_pointer: *whole_8, register: Register8) {
    if >(register, 7) {
        autopush_byte(buffer, buffer_index_pointer, 65_whole_1);
        autopush_byte(buffer, buffer_index_pointer, byte(+(register, 80)));
        return;
    };

    autopush_byte(buffer, buffer_index_pointer, byte(+(register, 88)));
};

function autopush_push_register8(buffer: *AutoBuffer, buffer_index_pointer: *whole_8, register: Register8) {
    if >(register, 7) {
        autopush_byte(buffer, buffer_index_pointer, 65_whole_1);
        autopush_byte(buffer, buffer_index_pointer, byte(+(register, 72)));
        return;
    };

    autopush_byte(buffer, buffer_index_pointer, byte(+(register, 80)));
};

function autopush_syscall(buffer: *AutoBuffer, buffer_index_pointer: *whole_8) {
    autopush_byte(buffer, buffer_index_pointer, 15_whole_1);
    autopush_byte(buffer, buffer_index_pointer, 5_whole_1);
};

function autopush_byte(buffer: *AutoBuffer, buffer_index_pointer: *whole_8, byte: any_1) {
    variable buffer_index = whole_8->(buffer_index_pointer);

    autobuffer_set(buffer, &(byte), buffer_index, 1);

    whole_8<-(buffer_index_pointer, +(1, whole_8->(buffer_index_pointer)));
};

function autopush_medium(buffer: *AutoBuffer, buffer_index_pointer: *whole_8, medium: any_4) {
    variable buffer_index = whole_8->(buffer_index_pointer);

    autobuffer_set(buffer, &(medium), buffer_index, 4);

    whole_8<-(buffer_index_pointer, +(4, whole_8->(buffer_index_pointer)));
};

function autopush_short(buffer: *AutoBuffer, buffer_index_pointer: *whole_8, short: any_2) {
    variable buffer_index = whole_8->(buffer_index_pointer);

    autobuffer_set(buffer, &(short), buffer_index, 2);

    whole_8<-(buffer_index_pointer, +(2, whole_8->(buffer_index_pointer)));
};

function autopush_string(buffer: *AutoBuffer, buffer_index_pointer: *whole_8, string: *) {
    variable length = length(string);
    variable buffer_index = whole_8->(buffer_index_pointer);

    autobuffer_set(buffer, string, buffer_index, length);

    whole_8<-(buffer_index_pointer, +(length, whole_8->(buffer_index_pointer)));
};

function autopush_pointer(buffer: *AutoBuffer, buffer_index_pointer: *whole_8, pointer: *, length: whole_8) {
    variable buffer_index = whole_8->(buffer_index_pointer);

    autobuffer_set(buffer, pointer, buffer_index, length);

    whole_8<-(buffer_index_pointer, +(length, whole_8->(buffer_index_pointer)));
};

function autopush_zeros(buffer: *AutoBuffer, buffer_index_pointer: *whole_8, count: whole_8) {
    variable i = 0;
    while <(i, count) {
        autopush_byte(buffer, buffer_index_pointer, 0_whole_1);
        i = +(i, 1);
    };
};

function new_elf64_file_header(): ELF64FileHeader {
    variable header: ELF64FileHeader;

    variable _ = whole_8_to_medium(2);
    ELF64FileHeader<-magic(&(header), whole_8_to_medium(1179403647));
    ELF64FileHeader<-header_size(&(header), whole_8_to_short(64));
    ELF64FileHeader<-program_header_size(&(header), whole_8_to_short(56));
    ELF64FileHeader<-section_header_size(&(header), whole_8_to_short(64));
    ELF64FileHeader<-version(&(header), 1_whole_1);
    ELF64FileHeader<-version2(&(header), whole_8_to_medium(1));

    return header;
};

function whole_8_to_medium(whole_8: whole_8): any_4 {
    variable medium: any_4;

    copy(&(whole_8), &(medium), 4);

    return medium;
};

function whole_8_to_short(whole_8: whole_8): any_2 {
    variable short: any_2;

    copy(&(whole_8), &(short), 2);

    return short;
};

structure ELF64FileHeader {
    magic: any_4;
    format: any_1;
    endianness: any_1;
    version: any_1;
    abi: any_1;
    abi_version: any_1;
    padding: any_7;
    object_file_type: any_2;
    machine: any_2;
    version2: any_4;
    entry_point: any_8;
    program_header_table: any_8;
    section_header_table: any_8;
    flags: any_4;
    header_size: any_2;
    program_header_size: any_2;
    program_header_count: any_2;
    section_header_size: any_2;
    section_header_count: any_2;
    section_names: any_2;
};

structure ELF64ProgramHeader {
    type: any_4;
    flags: any_4;
    location: any_8;
    virtual_address: any_8;
    physical_address: any_8;
    size_file: any_8;
    size_memory: any_8;
    alignment: any_8;
};

function get_byte(pointer: *, offset: whole_8): any_1 {
    return any_1->(@cast_*any_1(+(pointer, offset)));
};

function get_short(pointer: *, offset: whole_8): any_2 {
    return any_2->(@cast_*any_2(+(pointer, offset)));
};

function get_medium(pointer: *, offset: whole_8): any_4 {
    return any_4->(@cast_*any_4(+(pointer, offset)));
};

function get_whole_8(pointer: *, offset: whole_8): any_8 {
    return any_8->(@cast_*any_8(+(pointer, offset)));
};

function brk_allocate(size: whole_8): * {
    variable allocated = sys_brk(@cast_*(0));
    sys_brk(@cast_*(+(allocated, size)));
    return allocated;
};

function print_byte(byte: any_1) {
    @print_integer(byte_to_integer(byte));
};

function print_short(short: any_2) {
    @print_integer(short_to_integer(short));
};

function print_medium(medium: any_4) {
    @print_integer(medium_to_integer(medium));
};

function print_whole_8(whole_8: any_8) {
    @print_integer(whole_8);
};

function length(string: *): whole_8 {
    variable length = 0;

    while !(=(0_whole_1, *1(+(string, length)))) {
        length = +(length, 1);
    };

    return length;
};

function whole_8+(value1: whole_8, value2: whole_8): whole_8 {
    return +(value1, value2);
};
