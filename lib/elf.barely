define Register1 = structure {
    value: whole_1;
};

define Register2 = structure {
    value: whole_1;
};

define Register4 = structure {
    value: whole_1;
};

define Register8 = structure {
    value: whole_1;
};

define AL: Register1 = 0;
define CL: Register1 = 1;
define DL: Register1 = 2;
define BL: Register1 = 3;
define AH: Register1 = 4;
//define SPL: Register1 = 4;
//define BPL: Register1 = 5;

define AX: Register2 = 0;
define CX: Register2 = 1;
define DX: Register2 = 2;
define BX: Register2 = 3;
define SPX: Register2 = 4;
define BPX: Register2 = 5;

define EAX: Register4 = 0;
define ECX: Register4 = 1;
define EDX: Register4 = 2;
define EBX: Register4 = 3;
define ESP: Register4 = 4;
define EBp: Register4 = 5;

define RAX: Register8 = 0;
define RCX: Register8 = 1;
define RDX: Register8 = 2;
define RBX: Register8 = 3;
define RSP: Register8 = 4;
define RBP: Register8 = 5;
define RSI: Register8 = 6;
define RDI: Register8 = 7;
define R8: Register8 = 8;
define R9: Register8 = 9;
define R10: Register8 = 10;
define R11: Register8 = 11;
define R12: Register8 = 12;
define R13: Register8 = 13;
define R14: Register8 = 14;
define R15: Register8 = 15;

define DataIndex = structure {
    value: whole_8;
};

define BssIndex = structure {
    value: whole_8;
};

define InstructionIndex = structure {
    value: whole_8;
};

define autobuffer_buffer_push_jmp_near = function(instructions: *AutoBufferBuffer): InstructionIndex {
    variable current_instruction = AutoBufferBuffer.>index(instructions);

    autobuffer_buffer_push_whole_1(instructions, 233_whole_1);

    autobuffer_buffer_push_whole_4(instructions, 0_whole_4);

    return InstructionIndex.cast(current_instruction);
};

define autobuffer_buffer_push_je_near = function(instructions: *AutoBufferBuffer): InstructionIndex {
    variable current_instruction = AutoBufferBuffer.>index(instructions);

    autobuffer_buffer_push_whole_1(instructions, 15_whole_1);
    autobuffer_buffer_push_whole_1(instructions, 132_whole_1);

    autobuffer_buffer_push_whole_4(instructions, 0_whole_4);

    return InstructionIndex.cast(current_instruction);
};

define autobuffer_buffer_push_jne_near = function(instructions: *AutoBufferBuffer): InstructionIndex {
    variable current_instruction = AutoBufferBuffer.>index(instructions);

    autobuffer_buffer_push_whole_1(instructions, 15_whole_1);
    autobuffer_buffer_push_whole_1(instructions, 133_whole_1);

    autobuffer_buffer_push_whole_4(instructions, 0_whole_4);

    return InstructionIndex.cast(current_instruction);
};

define set_jmp = function(instructions: *AutoBuffer, instruction_index_pointer: *whole_8, jump: InstructionIndex) {
    variable offset = -(whole_8_to_whole_4(whole_8.>(instruction_index_pointer)), whole_8_to_whole_4(whole_8.cast(+(jump, 5))));
    autobuffer_set_any_4(instructions, offset, whole_8.cast(+(jump, 1)));
};

define set_jmp_value = function(instructions: *AutoBufferBuffer, jump: InstructionIndex, value: InstructionIndex) {
    variable offset = -(whole_8_to_whole_4(whole_8.cast(value)), whole_8_to_whole_4(whole_8.cast(+(jump, 5))));
    autobuffer_set_any_4(&(AutoBufferBuffer.>autobuffer(instructions)), offset, whole_8.cast(+(jump, 1)));
};

define set_control_flow_value_absolute = function(instructions: *AutoBufferBuffer, jump: InstructionIndex, offset: whole_8) {
    autobuffer_set_any_4(&(AutoBufferBuffer.>autobuffer(instructions)), whole_8_to_whole_4(offset), whole_8.cast(jump));
};

define autobuffer_buffer_push_call_far_register8 = function(instructions: *AutoBufferBuffer, register: Register8) {
    autobuffer_buffer_push_whole_1(instructions, 255_whole_1);
    autobuffer_buffer_push_whole_1(instructions, +(208_whole_1, register));
};

define autobuffer_buffer_push_call_near = function(instructions: *AutoBufferBuffer): InstructionIndex {
    variable current_instruction = AutoBufferBuffer.>index(instructions);

    autobuffer_buffer_push_whole_1(instructions, 232_whole_1);

    autobuffer_buffer_push_whole_4(instructions, 0_whole_4);

    return InstructionIndex.cast(current_instruction);
};

define autobuffer_buffer_push_ret = function(instructions: *AutoBufferBuffer) {
    autobuffer_buffer_push_whole_1(instructions, 195_whole_1);
};

define set_call = function(instructions: *AutoBuffer, instruction_index_pointer: *whole_8, call: InstructionIndex) {
    variable offset = -(whole_8_to_whole_4(whole_8.>(instruction_index_pointer)), whole_8_to_whole_4(whole_8.cast(+(call, 5))));
    autobuffer_set_any_4(instructions, offset, whole_8.cast(+(call, 1)));
};

define set_call_value = function(instructions: *AutoBufferBuffer, call: InstructionIndex, value: InstructionIndex) {
    variable offset = -(whole_8_to_whole_4(whole_8.cast(value)), whole_8_to_whole_4(whole_8.cast(+(call, 5))));
    autobuffer_set_any_4(&(AutoBufferBuffer.>autobuffer(instructions)), offset, whole_8.cast(+(call, 1)));
};

define set_je = function(instructions: *AutoBuffer, instruction_index_pointer: *whole_8, je: InstructionIndex) {
    variable offset = -(whole_8_to_whole_4(whole_8.>(instruction_index_pointer)), whole_8_to_whole_4(whole_8.cast(+(je, 6))));
    autobuffer_set_any_4(instructions, offset, whole_8.cast(+(je, 2)));
};

define set_je_value = function(instructions: *AutoBufferBuffer, je: InstructionIndex, value: InstructionIndex) {
    variable offset = -(whole_8_to_whole_4(whole_8.cast(value)), whole_8_to_whole_4(whole_8.cast(+(je, 6))));
    autobuffer_set_any_4(&(AutoBufferBuffer.>autobuffer(instructions)), offset, whole_8.cast(+(je, 2)));
};

define set_jne = function(instructions: *AutoBuffer, instruction_index_pointer: *whole_8, jne: InstructionIndex) {
    variable offset = -(whole_8_to_whole_4(whole_8.>(instruction_index_pointer)), whole_8_to_whole_4(whole_8.cast(+(jne, 6))));
    autobuffer_set_any_4(instructions, offset, whole_8.cast(+(jne, 2)));
};

define autobuffer_buffer_push_data_string = function(data: *AutoBufferBuffer, string: *): DataIndex {
    variable index = AutoBufferBuffer.>index(data);
    autobuffer_buffer_push_string(data, string);
    AutoBufferBuffer.<index(data, +(AutoBufferBuffer.>index(data), 1));
    return DataIndex.cast(index);
};

define get_instruction = function(instructions: *AutoBufferBuffer): InstructionIndex {
    variable index = AutoBufferBuffer.>index(instructions);

    return InstructionIndex.cast(index);
};

define autobuffer_buffer_push_push_data = function(buffer: *AutoBufferBuffer, indexes_to_adjust: *AutoBufferStack8, data_index: DataIndex) {
    autobuffer_buffer_push_whole_1(buffer, 104_whole_1);
    autobuffer_stack8_push(indexes_to_adjust, AutoBufferBuffer.>index(buffer));
    autobuffer_buffer_push_whole_4(buffer, whole_8_to_whole_4(whole_8.cast(data_index)));
};

define autobuffer_buffer_push_push_instruction_pointer = function(buffer: *AutoBufferBuffer): InstructionIndex {
    variable instruction_index = InstructionIndex.cast(AutoBufferBuffer.>index(buffer));
    autobuffer_buffer_push_whole_1(buffer, 104_whole_1);
    autobuffer_buffer_push_whole_4(buffer, 0_whole_4);

    return instruction_index;
};

define autobuffer_buffer_push_push_bss = function(buffer: *AutoBufferBuffer, indexes_to_adjust: *AutoBufferStack8, bss_index: BssIndex) {
    autobuffer_buffer_push_whole_1(buffer, 104_whole_1);
    autobuffer_stack8_push(indexes_to_adjust, AutoBufferBuffer.>index(buffer));
    autobuffer_buffer_push_whole_4(buffer, whole_8_to_whole_4(whole_8.cast(bss_index)));
};

define autobuffer_array8_set = function(buffer: *AutoBuffer, index: whole_8, value: any_8) {
    autobuffer_set_whole_8(buffer, whole_8.cast(value), *(index, 8));
    autobuffer_register(buffer, +(*(index, 8), 8), 8);
};

define autobuffer_array8_get = function(buffer: *AutoBuffer, index: whole_8): any_8 {
    return autobuffer_get_whole_8(buffer, *(index, 8));
};

define autobuffer_array8_length = function(buffer: *AutoBuffer): whole_8 {
    variable k = 0;
    while !(=(autobuffer_array8_get(buffer, k), 0)) {
        k = +(k, 1);
    };
    return k;
};

define autobuffer_buffer_push_mov_whole_8_register8 = function(buffer: *AutoBufferBuffer, register: Register8, value: whole_8) {
    if >(register, 7_whole_1) {
        autobuffer_buffer_push_whole_1(buffer, 73_whole_1);
        autobuffer_buffer_push_whole_1(buffer, +(176_whole_1, register));
        autobuffer_buffer_push_whole_8(buffer, value);
        return;
    };
    autobuffer_buffer_push_whole_1(buffer, 72_whole_1);
    autobuffer_buffer_push_whole_1(buffer, +(184_whole_1, register));
    autobuffer_buffer_push_whole_8(buffer, value);
};

define autobuffer_buffer_push_mov_whole_4_register4 = function(buffer: *AutoBufferBuffer, register: Register4, value: whole_4) {
    if >(register, 7_whole_1) {
        autobuffer_buffer_push_whole_1(buffer, 65_whole_1);
        autobuffer_buffer_push_whole_1(buffer, +(176_whole_1, register));
        autobuffer_buffer_push_whole_4(buffer, value);
        return;
    };
    autobuffer_buffer_push_whole_1(buffer, +(184_whole_1, register));
    autobuffer_buffer_push_whole_4(buffer, value);
};

define autobuffer_buffer_push_mov_whole_2_register2 = function(buffer: *AutoBufferBuffer, register: Register2, value: whole_2) {
    if >(register, 7_whole_1) {
        autobuffer_buffer_push_whole_1(buffer, 65_whole_1);
        autobuffer_buffer_push_whole_1(buffer, 102_whole_1);
        autobuffer_buffer_push_whole_1(buffer, +(176_whole_1, register));
        autobuffer_buffer_push_whole_2(buffer, value);
        return;
    };
    autobuffer_buffer_push_whole_1(buffer, 102_whole_1);
    autobuffer_buffer_push_whole_1(buffer, +(184_whole_1, register));
    autobuffer_buffer_push_whole_2(buffer, value);
};

define autobuffer_buffer_push_mov_whole_1_register1 = function(buffer: *AutoBufferBuffer, register: Register1, value: whole_1) {
    if >(register, 7_whole_1) {
        autobuffer_buffer_push_whole_1(buffer, 65_whole_1);
        autobuffer_buffer_push_whole_1(buffer, +(168_whole_1, register));
        autobuffer_buffer_push_whole_1(buffer, value);
        return;
    };
    autobuffer_buffer_push_whole_1(buffer, +(176_whole_1, register));
    autobuffer_buffer_push_whole_1(buffer, value);
};

define autobuffer_buffer_push_lea_register8_offset_register8 = function(buffer: *AutoBufferBuffer, register_from: Register8, offset: whole_8, register_to: Register8) {
    variable instruction = 72_whole_1;

    if >(register_to, 7_whole_1) {
        instruction = +(instruction, 4_whole_1);
    };

    if >(register_from, 7_whole_1) {
        instruction = +(instruction, 1_whole_1);
    };

    autobuffer_buffer_push_whole_1(buffer, instruction);
    autobuffer_buffer_push_whole_1(buffer, 141_whole_1);

    variable value = 0_whole_1;

    if >(register_to, 7_whole_1) {
        value = +(value, *(-(register_to, 8_whole_1), 8_whole_1));
    } else {
        value = +(value, *(register_to, 8_whole_1));
    };

    if >(register_from, 7_whole_1) {
        value = +(value, -(register_from, 8_whole_1));
    } else {
        value = +(value, register_from);
    };

    autobuffer_buffer_push_whole_1(buffer, +(128_whole_1, value));

    if =(register_from, RSP) {
        autobuffer_buffer_push_whole_1(buffer, 36_whole_1);
    };

    autobuffer_buffer_push_whole_4(buffer, whole_8_to_whole_4(offset));
};

define autobuffer_buffer_push_mov_bss_offset_pointer_register8 = function(buffer: *AutoBufferBuffer, indexes_to_adjust_relative: *AutoBufferStack8, data_index: BssIndex, offset: whole_8, register: Register8) {
    variable instruction = 72_whole_1;

    if >(register, 7_whole_1) {
        instruction = +(instruction, 4_whole_1);
    };

    autobuffer_buffer_push_whole_1(buffer, instruction);
    autobuffer_buffer_push_whole_1(buffer, 139_whole_1);

    variable value = 0_whole_1;

    if >(register, 7_whole_1) {
        value = +(value, *(-(register, 8_whole_1), 8_whole_1));
    } else {
        value = +(value, *(register, 8_whole_1));
    };

    autobuffer_buffer_push_whole_1(buffer, +(value, 5_whole_1));

    autobuffer_stack8_push(indexes_to_adjust_relative, AutoBufferBuffer.>index(buffer));
    autobuffer_buffer_push_whole_4(buffer, whole_8_to_whole_4(whole_8.cast(data_index)));
};

define autobuffer_buffer_push_mov_bss_offset_pointer_register4 = function(buffer: *AutoBufferBuffer, indexes_to_adjust_relative: *AutoBufferStack8, data_index: BssIndex, offset: whole_8, register: Register4) {
    variable instruction = 64_whole_1;

    if >(register, 7_whole_1) {
        instruction = +(instruction, 4_whole_1);
    };

    if !(=(instruction, 64_whole_1)) {
        autobuffer_buffer_push_whole_1(buffer, instruction);
    };
    autobuffer_buffer_push_whole_1(buffer, 139_whole_1);

    variable value = 0_whole_1;

    if >(register, 7_whole_1) {
        value = +(value, *(-(register, 8_whole_1), 8_whole_1));
    } else {
        value = +(value, *(register, 8_whole_1));
    };

    autobuffer_buffer_push_whole_1(buffer, +(value, 5_whole_1));

    autobuffer_stack8_push(indexes_to_adjust_relative, AutoBufferBuffer.>index(buffer));
    autobuffer_buffer_push_whole_4(buffer, whole_8_to_whole_4(whole_8.cast(data_index)));
};

define autobuffer_buffer_push_mov_bss_offset_pointer_register2 = function(buffer: *AutoBufferBuffer, indexes_to_adjust_relative: *AutoBufferStack8, data_index: BssIndex, offset: whole_8, register: Register2) {
    variable instruction = 64_whole_1;

    if >(register, 7_whole_1) {
        instruction = +(instruction, 4_whole_1);
    };

    autobuffer_buffer_push_whole_1(buffer, 102_whole_1);
    if !(=(instruction, 64_whole_1)) {
        autobuffer_buffer_push_whole_1(buffer, instruction);
    };
    autobuffer_buffer_push_whole_1(buffer, 139_whole_1);

    variable value = 0_whole_1;

    if >(register, 7_whole_1) {
        value = +(value, *(-(register, 8_whole_1), 8_whole_1));
    } else {
        value = +(value, *(register, 8_whole_1));
    };

    autobuffer_buffer_push_whole_1(buffer, +(value, 5_whole_1));

    autobuffer_stack8_push(indexes_to_adjust_relative, AutoBufferBuffer.>index(buffer));
    autobuffer_buffer_push_whole_4(buffer, whole_8_to_whole_4(whole_8.cast(data_index)));
};

define autobuffer_buffer_push_mov_bss_offset_pointer_register1 = function(buffer: *AutoBufferBuffer, indexes_to_adjust_relative: *AutoBufferStack8, data_index: BssIndex, offset: whole_8, register: Register1) {
    variable instruction = 64_whole_1;

    if >(register, 7_whole_1) {
        instruction = +(instruction, 4_whole_1);
    };

    if !(=(instruction, 64_whole_1)) {
        autobuffer_buffer_push_whole_1(buffer, instruction);
    };
    autobuffer_buffer_push_whole_1(buffer, 138_whole_1);

    variable value = 0_whole_1;

    if >(register, 7_whole_1) {
        value = +(value, *(-(register, 8_whole_1), 8_whole_1));
    } else {
        value = +(value, *(register, 8_whole_1));
    };

    autobuffer_buffer_push_whole_1(buffer, +(value, 5_whole_1));

    autobuffer_stack8_push(indexes_to_adjust_relative, AutoBufferBuffer.>index(buffer));
    autobuffer_buffer_push_whole_4(buffer, whole_8_to_whole_4(whole_8.cast(data_index)));
};

define autobuffer_buffer_push_mov_register8_bss_pointer_offset = function(buffer: *AutoBufferBuffer, indexes_to_adjust_relative: *AutoBufferStack8, register: Register8, data_index: BssIndex, offset: whole_8) {
    variable instruction = 72_whole_1;

    if >(register, 7_whole_1) {
        instruction = +(instruction, 4_whole_1);
    };

    autobuffer_buffer_push_whole_1(buffer, instruction);
    autobuffer_buffer_push_whole_1(buffer, 137_whole_1);

    variable value = 0_whole_1;

    if >(register, 7_whole_1) {
        value = +(value, *(-(register, 8_whole_1), 8_whole_1));
    } else {
        value = +(value, *(register, 8_whole_1));
    };

    autobuffer_buffer_push_whole_1(buffer, +(value, 5_whole_1));

    autobuffer_stack8_push(indexes_to_adjust_relative, AutoBufferBuffer.>index(buffer));
    autobuffer_buffer_push_whole_4(buffer, whole_8_to_whole_4(whole_8.cast(+(data_index, offset))));
};

define autobuffer_buffer_push_mov_register4_bss_pointer_offset = function(buffer: *AutoBufferBuffer, indexes_to_adjust_relative: *AutoBufferStack8, register: Register4, data_index: BssIndex, offset: whole_8) {
    autobuffer_buffer_push_whole_1(buffer, 137_whole_1);

    variable value = 0_whole_1;

    if >(register, 7_whole_1) {
        value = +(value, *(-(register, 8_whole_1), 8_whole_1));
    } else {
        value = +(value, *(register, 8_whole_1));
    };

    autobuffer_buffer_push_whole_1(buffer, +(value, 5_whole_1));

    autobuffer_stack8_push(indexes_to_adjust_relative, AutoBufferBuffer.>index(buffer));
    autobuffer_buffer_push_whole_4(buffer, whole_8_to_whole_4(whole_8.cast(+(data_index, offset))));
};

define autobuffer_buffer_push_mov_register2_bss_pointer_offset = function(buffer: *AutoBufferBuffer, indexes_to_adjust_relative: *AutoBufferStack8, register: Register2, data_index: BssIndex, offset: whole_8) {
    variable instruction = 102_whole_1;

    if >(register, 7_whole_1) {
        instruction = +(instruction, 4_whole_1);
    };

    autobuffer_buffer_push_whole_1(buffer, instruction);
    autobuffer_buffer_push_whole_1(buffer, 137_whole_1);

    variable value = 0_whole_1;

    if >(register, 7_whole_1) {
        value = +(value, *(-(register, 8_whole_1), 8_whole_1));
    } else {
        value = +(value, *(register, 8_whole_1));
    };

    autobuffer_buffer_push_whole_1(buffer, +(value, 5_whole_1));

    autobuffer_stack8_push(indexes_to_adjust_relative, AutoBufferBuffer.>index(buffer));
    autobuffer_buffer_push_whole_4(buffer, whole_8_to_whole_4(whole_8.cast(+(data_index, offset))));
};

define autobuffer_buffer_push_mov_register1_bss_pointer_offset = function(buffer: *AutoBufferBuffer, indexes_to_adjust_relative: *AutoBufferStack8, register: Register1, data_index: BssIndex, offset: whole_8) {
    autobuffer_buffer_push_whole_1(buffer, 136_whole_1);

    variable value = 0_whole_1;

    if >(register, 7_whole_1) {
        value = +(value, *(-(register, 8_whole_1), 8_whole_1));
    } else {
        value = +(value, *(register, 8_whole_1));
    };

    autobuffer_buffer_push_whole_1(buffer, +(value, 5_whole_1));

    autobuffer_stack8_push(indexes_to_adjust_relative, AutoBufferBuffer.>index(buffer));
    autobuffer_buffer_push_whole_4(buffer, whole_8_to_whole_4(whole_8.cast(+(data_index, offset))));
};

define autobuffer_buffer_push_mov_register8_register8 = function(buffer: *AutoBufferBuffer, register_from: Register8, register_to: Register8) {
    variable instruction = 72_whole_1;

    if >(register_to, 7_whole_1) {
        instruction = +(instruction, 1_whole_1);
    };

    if >(register_from, 7_whole_1) {
        instruction = +(instruction, 4_whole_1);
    };

    autobuffer_buffer_push_whole_1(buffer, instruction);
    autobuffer_buffer_push_whole_1(buffer, 137_whole_1);

    variable value = 0_whole_1;

    if >(register_to, 7_whole_1) {
        value = +(value, -(register_to, 8_whole_1));
    } else {
        value = +(value, register_to);
    };

    if >(register_from, 7_whole_1) {
        value = +(value, *(-(register_from, 8_whole_1), 8_whole_1));
    } else {
        value = +(value, *(register_from, 8_whole_1));
    };

    autobuffer_buffer_push_whole_1(buffer, +(value, 192_whole_1));
};

define autobuffer_buffer_push_mov_register8_register8 = function(buffer: *AutoBufferBuffer, register_from: Register8, register_to: Register8) {
    variable instruction = 72_whole_1;

    if >(register_to, 7_whole_1) {
        instruction = +(instruction, 1_whole_1);
    };

    if >(register_from, 7_whole_1) {
        instruction = +(instruction, 4_whole_1);
    };

    autobuffer_buffer_push_whole_1(buffer, instruction);
    autobuffer_buffer_push_whole_1(buffer, 137_whole_1);

    variable value = 0_whole_1;

    if >(register_to, 7_whole_1) {
        value = +(value, -(register_to, 8_whole_1));
    } else {
        value = +(value, register_to);
    };

    if >(register_from, 7_whole_1) {
        value = +(value, *(-(register_from, 8_whole_1), 8_whole_1));
    } else {
        value = +(value, *(register_from, 8_whole_1));
    };

    autobuffer_buffer_push_whole_1(buffer, +(value, 192_whole_1));
};

define autobuffer_buffer_push_cmp_register8_register8 = function(buffer: *AutoBufferBuffer, register1: Register8, register2: Register8) {
    variable instruction = 72_whole_1;

    if >(register1, 7_whole_1) {
        instruction = +(instruction, 1_whole_1);
    };

    if >(register2, 7_whole_1) {
        instruction = +(instruction, 4_whole_1);
    };

    autobuffer_buffer_push_whole_1(buffer, instruction);
    autobuffer_buffer_push_whole_1(buffer, 57_whole_1);

    variable value = 0_whole_1;

    if >(register1, 7_whole_1) {
        value = +(value, -(register1, 8_whole_1));
    } else {
        value = +(value, register1);
    };

    if >(register2, 7_whole_1) {
        value = +(value, *(-(register2, 8_whole_1), 8_whole_1));
    } else {
        value = +(value, *(register2, 8_whole_1));
    };

    autobuffer_buffer_push_whole_1(buffer, +(value, 192_whole_1));
};

define autobuffer_buffer_push_cmp_register4_register4 = function(buffer: *AutoBufferBuffer, register1: Register4, register2: Register4) {
    variable instruction = 64_whole_1;

    if >(register1, 7_whole_1) {
        instruction = +(instruction, 1_whole_1);
    };

    if >(register2, 7_whole_1) {
        instruction = +(instruction, 4_whole_1);
    };

    if !(=(instruction, 64_whole_1)) {
        autobuffer_buffer_push_whole_1(buffer, instruction);
    };
    autobuffer_buffer_push_whole_1(buffer, 57_whole_1);

    variable value = 0_whole_1;

    if >(register1, 7_whole_1) {
        value = +(value, -(register1, 8_whole_1));
    } else {
        value = +(value, register1);
    };

    if >(register2, 7_whole_1) {
        value = +(value, *(-(register2, 8_whole_1), 8_whole_1));
    } else {
        value = +(value, *(register2, 8_whole_1));
    };

    autobuffer_buffer_push_whole_1(buffer, +(value, 192_whole_1));
};

define autobuffer_buffer_push_cmp_register2_register2 = function(buffer: *AutoBufferBuffer, register1: Register2, register2: Register2) {
    variable instruction = 64_whole_1;

    if >(register1, 7_whole_1) {
        instruction = +(instruction, 1_whole_1);
    };

    if >(register2, 7_whole_1) {
        instruction = +(instruction, 4_whole_1);
    };

    if !(=(instruction, 64_whole_1)) {
        autobuffer_buffer_push_whole_1(buffer, instruction);
    };
    autobuffer_buffer_push_whole_1(buffer, 102_whole_1);
    autobuffer_buffer_push_whole_1(buffer, 57_whole_1);

    variable value = 0_whole_1;

    if >(register1, 7_whole_1) {
        value = +(value, -(register1, 8_whole_1));
    } else {
        value = +(value, register1);
    };

    if >(register2, 7_whole_1) {
        value = +(value, *(-(register2, 8_whole_1), 8_whole_1));
    } else {
        value = +(value, *(register2, 8_whole_1));
    };

    autobuffer_buffer_push_whole_1(buffer, +(value, 192_whole_1));
};

define autobuffer_buffer_push_cmp_register1_register1 = function(buffer: *AutoBufferBuffer, register1: Register1, register2: Register1) {
    variable instruction = 64_whole_1;

    if >(register1, 7_whole_1) {
        instruction = +(instruction, 1_whole_1);
    };

    if >(register2, 7_whole_1) {
        instruction = +(instruction, 4_whole_1);
    };

    if !(=(instruction, 64_whole_1)) {
        autobuffer_buffer_push_whole_1(buffer, instruction);
    };
    autobuffer_buffer_push_whole_1(buffer, 56_whole_1);

    variable value = 0_whole_1;

    if >(register1, 7_whole_1) {
        value = +(value, -(register1, 8_whole_1));
    } else {
        value = +(value, register1);
    };

    if >(register2, 7_whole_1) {
        value = +(value, *(-(register2, 8_whole_1), 8_whole_1));
    } else {
        value = +(value, *(register2, 8_whole_1));
    };

    autobuffer_buffer_push_whole_1(buffer, +(value, 192_whole_1));
};

define autobuffer_buffer_push_cmove_register8_register8 = function(buffer: *AutoBufferBuffer, register1: Register8, register2: Register8) {
    variable instruction = 72_whole_1;

    if >(register1, 7_whole_1) {
        instruction = +(instruction, 4_whole_1);
    };

    if >(register2, 7_whole_1) {
        instruction = +(instruction, 1_whole_1);
    };

    autobuffer_buffer_push_whole_1(buffer, instruction);
    autobuffer_buffer_push_whole_1(buffer, 15_whole_1);
    autobuffer_buffer_push_whole_1(buffer, 68_whole_1);

    variable value = 0_whole_1;

    if >(register1, 7_whole_1) {
        value = +(value, *(-(register1, 8_whole_1), 8_whole_1));
    } else {
        value = +(value, *(register1, 8_whole_1));
    };

    if >(register2, 7_whole_1) {
        value = +(value, -(register2, 8_whole_1));
    } else {
        value = +(value, register2);
    };

    autobuffer_buffer_push_whole_1(buffer, +(value, 192_whole_1));
};

define autobuffer_buffer_push_cmova_register8_register8 = function(buffer: *AutoBufferBuffer, register1: Register8, register2: Register8) {
    variable instruction = 72_whole_1;

    if >(register1, 7_whole_1) {
        instruction = +(instruction, 4_whole_1);
    };

    if >(register2, 7_whole_1) {
        instruction = +(instruction, 1_whole_1);
    };

    autobuffer_buffer_push_whole_1(buffer, instruction);
    autobuffer_buffer_push_whole_1(buffer, 15_whole_1);
    autobuffer_buffer_push_whole_1(buffer, 71_whole_1);

    variable value = 0_whole_1;

    if >(register1, 7_whole_1) {
        value = +(value, *(-(register1, 8_whole_1), 8_whole_1));
    } else {
        value = +(value, *(register1, 8_whole_1));
    };

    if >(register2, 7_whole_1) {
        value = +(value, -(register2, 8_whole_1));
    } else {
        value = +(value, register2);
    };

    autobuffer_buffer_push_whole_1(buffer, +(value, 192_whole_1));
};

define autobuffer_buffer_push_cmovg_register8_register8 = function(buffer: *AutoBufferBuffer, register1: Register8, register2: Register8) {
    variable instruction = 72_whole_1;

    if >(register1, 7_whole_1) {
        instruction = +(instruction, 4_whole_1);
    };

    if >(register2, 7_whole_1) {
        instruction = +(instruction, 1_whole_1);
    };

    autobuffer_buffer_push_whole_1(buffer, instruction);
    autobuffer_buffer_push_whole_1(buffer, 15_whole_1);
    autobuffer_buffer_push_whole_1(buffer, 79_whole_1);

    variable value = 0_whole_1;

    if >(register1, 7_whole_1) {
        value = +(value, *(-(register1, 8_whole_1), 8_whole_1));
    } else {
        value = +(value, *(register1, 8_whole_1));
    };

    if >(register2, 7_whole_1) {
        value = +(value, -(register2, 8_whole_1));
    } else {
        value = +(value, register2);
    };

    autobuffer_buffer_push_whole_1(buffer, +(value, 192_whole_1));
};

define autobuffer_buffer_push_cmovb_register8_register8 = function(buffer: *AutoBufferBuffer, register1: Register8, register2: Register8) {
    variable instruction = 72_whole_1;

    if >(register1, 7_whole_1) {
        instruction = +(instruction, 4_whole_1);
    };

    if >(register2, 7_whole_1) {
        instruction = +(instruction, 1_whole_1);
    };

    autobuffer_buffer_push_whole_1(buffer, instruction);
    autobuffer_buffer_push_whole_1(buffer, 15_whole_1);
    autobuffer_buffer_push_whole_1(buffer, 66_whole_1);

    variable value = 0_whole_1;

    if >(register1, 7_whole_1) {
        value = +(value, *(-(register1, 8_whole_1), 8_whole_1));
    } else {
        value = +(value, *(register1, 8_whole_1));
    };

    if >(register2, 7_whole_1) {
        value = +(value, -(register2, 8_whole_1));
    } else {
        value = +(value, register2);
    };

    autobuffer_buffer_push_whole_1(buffer, +(value, 192_whole_1));
};

define autobuffer_buffer_push_cmovl_register8_register8 = function(buffer: *AutoBufferBuffer, register1: Register8, register2: Register8) {
    variable instruction = 72_whole_1;

    if >(register1, 7_whole_1) {
        instruction = +(instruction, 4_whole_1);
    };

    if >(register2, 7_whole_1) {
        instruction = +(instruction, 1_whole_1);
    };

    autobuffer_buffer_push_whole_1(buffer, instruction);
    autobuffer_buffer_push_whole_1(buffer, 15_whole_1);
    autobuffer_buffer_push_whole_1(buffer, 76_whole_1);

    variable value = 0_whole_1;

    if >(register1, 7_whole_1) {
        value = +(value, *(-(register1, 8_whole_1), 8_whole_1));
    } else {
        value = +(value, *(register1, 8_whole_1));
    };

    if >(register2, 7_whole_1) {
        value = +(value, -(register2, 8_whole_1));
    } else {
        value = +(value, register2);
    };

    autobuffer_buffer_push_whole_1(buffer, +(value, 192_whole_1));
};

define autobuffer_buffer_push_mov_register8_pointer_offset_register8 = function(buffer: *AutoBufferBuffer, register_from: Register8, offset: whole_8, register_to: Register8) {
    variable instruction = 72_whole_1;

    if >(register_to, 7_whole_1) {
        instruction = +(instruction, 4_whole_1);
    };

    if >(register_from, 7_whole_1) {
        instruction = +(instruction, 1_whole_1);
    };

    autobuffer_buffer_push_whole_1(buffer, instruction);
    autobuffer_buffer_push_whole_1(buffer, 139_whole_1);

    variable value = 0_whole_1;

    if >(register_to, 7_whole_1) {
        value = +(value, *(-(register_to, 8_whole_1), 8_whole_1));
    } else {
        value = +(value, *(register_to, 8_whole_1));
    };

    if >(register_from, 7_whole_1) {
        value = +(value, -(register_from, 8_whole_1));
    } else {
        value = +(value, register_from);
    };

    autobuffer_buffer_push_whole_1(buffer, +(value, 128_whole_1));

    if =(register_from, RSP) {
        autobuffer_buffer_push_whole_1(buffer, 36_whole_1);
    };

    autobuffer_buffer_push_whole_4(buffer, whole_8_to_whole_4(offset));
};

define autobuffer_buffer_push_mov_register8_pointer_offset_register4 = function(buffer: *AutoBufferBuffer, register_from: Register8, offset: whole_8, register_to: Register4) {
    variable instruction = 64_whole_1;

    if >(register_to, 7_whole_1) {
        instruction = +(instruction, 4_whole_1);
    };

    if >(register_from, 7_whole_1) {
        instruction = +(instruction, 1_whole_1);
    };

    if !(=(instruction, 64_whole_1)) {
        autobuffer_buffer_push_whole_1(buffer, instruction);
    };
    autobuffer_buffer_push_whole_1(buffer, 139_whole_1);

    variable value = 0_whole_1;

    if >(register_to, 7_whole_1) {
        value = +(value, *(-(register_to, 8_whole_1), 8_whole_1));
    } else {
        value = +(value, *(register_to, 8_whole_1));
    };

    if >(register_from, 7_whole_1) {
        value = +(value, -(register_from, 8_whole_1));
    } else {
        value = +(value, register_from);
    };

    autobuffer_buffer_push_whole_1(buffer, +(value, 128_whole_1));

    if =(register_from, RSP) {
        autobuffer_buffer_push_whole_1(buffer, 36_whole_1);
    };

    autobuffer_buffer_push_whole_4(buffer, whole_8_to_whole_4(offset));
};

define autobuffer_buffer_push_mov_register8_pointer_offset_register2 = function(buffer: *AutoBufferBuffer, register_from: Register8, offset: whole_8, register_to: Register2) {
    variable instruction = 64_whole_1;

    if >(register_to, 7_whole_1) {
        instruction = +(instruction, 4_whole_1);
    };

    if >(register_from, 7_whole_1) {
        instruction = +(instruction, 1_whole_1);
    };

    autobuffer_buffer_push_whole_1(buffer, 102_whole_1);
    if !(=(instruction, 64_whole_1)) {
        autobuffer_buffer_push_whole_1(buffer, instruction);
    };
    autobuffer_buffer_push_whole_1(buffer, 139_whole_1);

    variable value = 0_whole_1;

    if >(register_to, 7_whole_1) {
        value = +(value, *(-(register_to, 8_whole_1), 8_whole_1));
    } else {
        value = +(value, *(register_to, 8_whole_1));
    };

    if >(register_from, 7_whole_1) {
        value = +(value, -(register_from, 8_whole_1));
    } else {
        value = +(value, register_from);
    };

    autobuffer_buffer_push_whole_1(buffer, +(value, 128_whole_1));

    if =(register_from, RSP) {
        autobuffer_buffer_push_whole_1(buffer, 36_whole_1);
    };

    autobuffer_buffer_push_whole_4(buffer, whole_8_to_whole_4(offset));
};

define autobuffer_buffer_push_mov_register8_pointer_offset_register1 = function(buffer: *AutoBufferBuffer, register_from: Register8, offset: whole_8, register_to: Register1) {
    variable instruction = 64_whole_1;
    variable instruction2 = 138_whole_1;

    if >(register_to, 7_whole_1) {
        instruction = +(instruction, 4_whole_1);
        instruction2 = +(instruction2, 1_whole_1);
    };

    if >(register_from, 7_whole_1) {
        instruction = +(instruction, 1_whole_1);
        instruction2 = +(instruction2, 1_whole_1);
    };

    if !(=(instruction, 64_whole_1)) {
        autobuffer_buffer_push_whole_1(buffer, instruction);
    };
    autobuffer_buffer_push_whole_1(buffer, instruction2);

    variable value = 0_whole_1;

    if >(register_to, 7_whole_1) {
        value = +(value, *(-(register_to, 8_whole_1), 8_whole_1));
    } else {
        value = +(value, *(register_to, 8_whole_1));
    };

    if >(register_from, 7_whole_1) {
        value = +(value, -(register_from, 8_whole_1));
    } else {
        value = +(value, register_from);
    };

    autobuffer_buffer_push_whole_1(buffer, +(128_whole_1, value));

    if =(register_from, RSP) {
        autobuffer_buffer_push_whole_1(buffer, 36_whole_1);
    };

    autobuffer_buffer_push_whole_4(buffer, whole_8_to_whole_4(offset));
};

define autobuffer_buffer_push_mov_register1_register8_pointer_offset = function(buffer: *AutoBufferBuffer, register_from: Register1, register_to: Register8, offset: whole_8) {
    variable instruction = 64_whole_1;

    if >(register_to, 7_whole_1) {
        instruction = +(instruction, 1_whole_1);
    };

    if >(register_from, 7_whole_1) {
        instruction = +(instruction, 4_whole_1);
    };

    if !(=(instruction, 64_whole_1)) {
        autobuffer_buffer_push_whole_1(buffer, instruction);
    };
    autobuffer_buffer_push_whole_1(buffer, 136_whole_1);

    variable value = 0_whole_1;

    if >(register_from, 7_whole_1) {
        value = +(value, *(-(register_from, 8_whole_1), 8_whole_1));
    } else {
        value = +(value, *(register_from, 8_whole_1));
    };

    if >(register_to, 7_whole_1) {
        value = +(value, -(register_to, 8_whole_1));
    } else {
        value = +(value, register_to);
    };

    autobuffer_buffer_push_whole_1(buffer, +(value, 128_whole_1));

    if =(register_to, RSP) {
        autobuffer_buffer_push_whole_1(buffer, 36_whole_1);
    };

    autobuffer_buffer_push_whole_4(buffer, whole_8_to_whole_4(offset));
};

define autobuffer_buffer_push_mov_register2_register8_pointer_offset = function(buffer: *AutoBufferBuffer, register_from: Register2,  register_to: Register8, offset: whole_8) {
    variable instruction = 64_whole_1;

    if >(register_to, 7_whole_1) {
        instruction = +(instruction, 1_whole_1);
    };

    if >(register_from, 7_whole_1) {
        instruction = +(instruction, 4_whole_1);
    };

    autobuffer_buffer_push_whole_1(buffer, 102_whole_1);
    if !(=(instruction, 64_whole_1)) {
        autobuffer_buffer_push_whole_1(buffer, instruction);
    };
    autobuffer_buffer_push_whole_1(buffer, 137_whole_1);

    variable value = 0_whole_1;

    if >(register_to, 7_whole_1) {
        value = +(value, -(register_to, 8_whole_1));
    } else {
        value = +(value, register_to);
    };

    if >(register_from, 7_whole_1) {
        value = +(value, *(-(register_from, 8_whole_1), 8_whole_1));
    } else {
        value = +(value, *(register_from, 8_whole_1));
    };

    autobuffer_buffer_push_whole_1(buffer, +(value, 128_whole_1));

    if =(register_to, RSP) {
        autobuffer_buffer_push_whole_1(buffer, 36_whole_1);
    };

    autobuffer_buffer_push_whole_4(buffer, whole_8_to_whole_4(offset));
};

define autobuffer_buffer_push_mov_register4_register8_pointer_offset = function(buffer: *AutoBufferBuffer, register_from: Register4,  register_to: Register8, offset: whole_8) {
    variable instruction = 64_whole_1;

    if >(register_to, 7_whole_1) {
        instruction = +(instruction, 1_whole_1);
    };

    if >(register_from, 7_whole_1) {
        instruction = +(instruction, 4_whole_1);
    };

    if !(=(instruction, 64_whole_1)) {
        autobuffer_buffer_push_whole_1(buffer, instruction);
    };
    autobuffer_buffer_push_whole_1(buffer, 137_whole_1);

    variable value = 0_whole_1;

    if >(register_to, 7_whole_1) {
        value = +(value, -(register_to, 8_whole_1));
    } else {
        value = +(value, register_to);
    };

    if >(register_from, 7_whole_1) {
        value = +(value, *(-(register_from, 8_whole_1), 8_whole_1));
    } else {
        value = +(value, *(register_from, 8_whole_1));
    };

    autobuffer_buffer_push_whole_1(buffer, +(value, 128_whole_1));

    if =(register_to, RSP) {
        autobuffer_buffer_push_whole_1(buffer, 36_whole_1);
    };

    autobuffer_buffer_push_whole_4(buffer, whole_8_to_whole_4(offset));
};

define autobuffer_buffer_push_mov_register8_register8_pointer_offset = function(buffer: *AutoBufferBuffer, register_from: Register8,  register_to: Register8, offset: whole_8) {
    variable instruction = 72_whole_1;

    if >(register_to, 7_whole_1) {
        instruction = +(instruction, 1_whole_1);
    };

    if >(register_from, 7_whole_1) {
        instruction = +(instruction, 4_whole_1);
    };

    autobuffer_buffer_push_whole_1(buffer, instruction);
    autobuffer_buffer_push_whole_1(buffer, 137_whole_1);

    variable value = 0_whole_1;

    if >(register_to, 7_whole_1) {
        value = +(value, -(register_to, 8_whole_1));
    } else {
        value = +(value, register_to);
    };

    if >(register_from, 7_whole_1) {
        value = +(value, *(-(register_from, 8_whole_1), 8_whole_1));
    } else {
        value = +(value, *(register_from, 8_whole_1));
    };

    autobuffer_buffer_push_whole_1(buffer, +(value, 128_whole_1));

    if =(register_to, RSP) {
        autobuffer_buffer_push_whole_1(buffer, 36_whole_1);
    };

    autobuffer_buffer_push_whole_4(buffer, whole_8_to_whole_4(offset));
};

define autobuffer_buffer_push_add_register8_whole_8 = function(buffer: *AutoBufferBuffer, register: Register8, value: whole_8) {
    autobuffer_buffer_push_whole_1(buffer, 72_whole_1);
    autobuffer_buffer_push_whole_1(buffer, 129_whole_1);
    autobuffer_buffer_push_whole_1(buffer, +(192_whole_1, register));
    autobuffer_buffer_push_whole_4(buffer, whole_8_to_whole_4(value));
};

define autobuffer_buffer_push_mul_register8 = function(buffer: *AutoBufferBuffer, register: Register8) {
    variable instruction = 72_whole_1;
    if >(register, 7_whole_1) {
        instruction = 73_whole_1;
    };
    autobuffer_buffer_push_whole_1(buffer, instruction);
    autobuffer_buffer_push_whole_1(buffer, 247_whole_1);
    if >(register, 7_whole_1) {
        autobuffer_buffer_push_whole_1(buffer, +(216_whole_1, register));
    } else {
        autobuffer_buffer_push_whole_1(buffer, +(224_whole_1, register));
    };
};

define autobuffer_buffer_push_mul_register4 = function(buffer: *AutoBufferBuffer, register: Register4) {
    variable instruction = 64_whole_1;
    if >(register, 7_whole_1) {
        instruction = 65_whole_1;
    };

    if !(=(instruction, 64_whole_1)) {
        autobuffer_buffer_push_whole_1(buffer, instruction);
    };
    autobuffer_buffer_push_whole_1(buffer, 247_whole_1);

    if >(register, 7_whole_1) {
        autobuffer_buffer_push_whole_1(buffer, +(216_whole_1, register));
    } else {
        autobuffer_buffer_push_whole_1(buffer, +(224_whole_1, register));
    };
};

define autobuffer_buffer_push_mul_register2 = function(buffer: *AutoBufferBuffer, register: Register2) {
    variable instruction = 64_whole_1;
    if >(register, 7_whole_1) {
        instruction = 65_whole_1;
    };

    if !(=(instruction, 64_whole_1)) {
        autobuffer_buffer_push_whole_1(buffer, instruction);
    };
    autobuffer_buffer_push_whole_1(buffer, 102_whole_1);
    autobuffer_buffer_push_whole_1(buffer, 247_whole_1);

    if >(register, 7_whole_1) {
        autobuffer_buffer_push_whole_1(buffer, +(216_whole_1, register));
    } else {
        autobuffer_buffer_push_whole_1(buffer, +(224_whole_1, register));
    };
};

define autobuffer_buffer_push_mul_register1 = function(buffer: *AutoBufferBuffer, register: Register1) {
    variable instruction = 64_whole_1;
    if >(register, 7_whole_1) {
        instruction = 65_whole_1;
    };

    if !(=(instruction, 64_whole_1)) {
        autobuffer_buffer_push_whole_1(buffer, instruction);
    };
    autobuffer_buffer_push_whole_1(buffer, 246_whole_1);

    if >(register, 7_whole_1) {
        autobuffer_buffer_push_whole_1(buffer, +(216_whole_1, register));
    } else {
        autobuffer_buffer_push_whole_1(buffer, +(224_whole_1, register));
    };
};

define autobuffer_buffer_push_imul_register8 = function(buffer: *AutoBufferBuffer, register: Register8) {
    variable instruction = 72_whole_1;
    if >(register, 7_whole_1) {
        instruction = 73_whole_1;
    };
    autobuffer_buffer_push_whole_1(buffer, instruction);
    autobuffer_buffer_push_whole_1(buffer, 247_whole_1);
    if >(register, 7_whole_1) {
        autobuffer_buffer_push_whole_1(buffer, +(224_whole_1, register));
    } else {
        autobuffer_buffer_push_whole_1(buffer, +(232_whole_1, register));
    };
};

define autobuffer_buffer_push_imul_register4 = function(buffer: *AutoBufferBuffer, register: Register4) {
    variable instruction = 64_whole_1;
    if >(register, 7_whole_1) {
        instruction = 65_whole_1;
    };

    if !(=(instruction, 64_whole_1)) {
        autobuffer_buffer_push_whole_1(buffer, instruction);
    };
    autobuffer_buffer_push_whole_1(buffer, 247_whole_1);

    if >(register, 7_whole_1) {
        autobuffer_buffer_push_whole_1(buffer, +(224_whole_1, register));
    } else {
        autobuffer_buffer_push_whole_1(buffer, +(232_whole_1, register));
    };
};

define autobuffer_buffer_push_imul_register2 = function(buffer: *AutoBufferBuffer, register: Register2) {
    variable instruction = 64_whole_1;
    if >(register, 7_whole_1) {
        instruction = 65_whole_1;
    };

    if !(=(instruction, 64_whole_1)) {
        autobuffer_buffer_push_whole_1(buffer, instruction);
    };
    autobuffer_buffer_push_whole_1(buffer, 102_whole_1);
    autobuffer_buffer_push_whole_1(buffer, 247_whole_1);

    if >(register, 7_whole_1) {
        autobuffer_buffer_push_whole_1(buffer, +(224_whole_1, register));
    } else {
        autobuffer_buffer_push_whole_1(buffer, +(232_whole_1, register));
    };
};

define autobuffer_buffer_push_imul_register1 = function(buffer: *AutoBufferBuffer, register: Register1) {
    variable instruction = 64_whole_1;
    if >(register, 7_whole_1) {
        instruction = 65_whole_1;
    };

    if !(=(instruction, 64_whole_1)) {
        autobuffer_buffer_push_whole_1(buffer, instruction);
    };
    autobuffer_buffer_push_whole_1(buffer, 246_whole_1);

    if >(register, 7_whole_1) {
        autobuffer_buffer_push_whole_1(buffer, +(224_whole_1, register));
    } else {
        autobuffer_buffer_push_whole_1(buffer, +(232_whole_1, register));
    };
};

define autobuffer_buffer_push_div_register8 = function(buffer: *AutoBufferBuffer, register: Register8) {
    variable instruction = 72_whole_1;
    if >(register, 7_whole_1) {
        instruction = 73_whole_1;
    };
    autobuffer_buffer_push_whole_1(buffer, instruction);
    autobuffer_buffer_push_whole_1(buffer, 247_whole_1);
    if >(register, 7_whole_1) {
        autobuffer_buffer_push_whole_1(buffer, +(232_whole_1, register));
    } else {
        autobuffer_buffer_push_whole_1(buffer, +(240_whole_1, register));
    };
};

define autobuffer_buffer_push_div_register4 = function(buffer: *AutoBufferBuffer, register: Register4) {
    variable instruction = 64_whole_1;
    if >(register, 7_whole_1) {
        instruction = 65_whole_1;
    };

    if !(=(instruction, 64_whole_1)) {
        autobuffer_buffer_push_whole_1(buffer, instruction);
    };
    autobuffer_buffer_push_whole_1(buffer, 247_whole_1);

    if >(register, 7_whole_1) {
        autobuffer_buffer_push_whole_1(buffer, +(232_whole_1, register));
    } else {
        autobuffer_buffer_push_whole_1(buffer, +(240_whole_1, register));
    };
};

define autobuffer_buffer_push_div_register2 = function(buffer: *AutoBufferBuffer, register: Register2) {
    variable instruction = 64_whole_1;
    if >(register, 7_whole_1) {
        instruction = 65_whole_1;
    };

    if !(=(instruction, 64_whole_1)) {
        autobuffer_buffer_push_whole_1(buffer, instruction);
    };
    autobuffer_buffer_push_whole_1(buffer, 102_whole_1);
    autobuffer_buffer_push_whole_1(buffer, 247_whole_1);

    if >(register, 7_whole_1) {
        autobuffer_buffer_push_whole_1(buffer, +(232_whole_1, register));
    } else {
        autobuffer_buffer_push_whole_1(buffer, +(240_whole_1, register));
    };
};

define autobuffer_buffer_push_div_register1 = function(buffer: *AutoBufferBuffer, register: Register1) {
    variable instruction = 64_whole_1;
    if >(register, 7_whole_1) {
        instruction = 65_whole_1;
    };

    if !(=(instruction, 64_whole_1)) {
        autobuffer_buffer_push_whole_1(buffer, instruction);
    };
    autobuffer_buffer_push_whole_1(buffer, 246_whole_1);

    if >(register, 7_whole_1) {
        autobuffer_buffer_push_whole_1(buffer, +(232_whole_1, register));
    } else {
        autobuffer_buffer_push_whole_1(buffer, +(240_whole_1, register));
    };
};

define autobuffer_buffer_push_idiv_register8 = function(buffer: *AutoBufferBuffer, register: Register8) {
    variable instruction = 72_whole_1;
    if >(register, 7_whole_1) {
        instruction = 73_whole_1;
    };
    autobuffer_buffer_push_whole_1(buffer, instruction);
    autobuffer_buffer_push_whole_1(buffer, 247_whole_1);
    if >(register, 7_whole_1) {
        autobuffer_buffer_push_whole_1(buffer, +(240_whole_1, register));
    } else {
        autobuffer_buffer_push_whole_1(buffer, +(248_whole_1, register));
    };
};

define autobuffer_buffer_push_idiv_register4 = function(buffer: *AutoBufferBuffer, register: Register4) {
    variable instruction = 64_whole_1;
    if >(register, 7_whole_1) {
        instruction = 65_whole_1;
    };

    if !(=(instruction, 64_whole_1)) {
        autobuffer_buffer_push_whole_1(buffer, instruction);
    };
    autobuffer_buffer_push_whole_1(buffer, 247_whole_1);

    if >(register, 7_whole_1) {
        autobuffer_buffer_push_whole_1(buffer, +(240_whole_1, register));
    } else {
        autobuffer_buffer_push_whole_1(buffer, +(248_whole_1, register));
    };
};

define autobuffer_buffer_push_idiv_register2 = function(buffer: *AutoBufferBuffer, register: Register2) {
    variable instruction = 64_whole_1;
    if >(register, 7_whole_1) {
        instruction = 65_whole_1;
    };

    if !(=(instruction, 64_whole_1)) {
        autobuffer_buffer_push_whole_1(buffer, instruction);
    };
    autobuffer_buffer_push_whole_1(buffer, 102_whole_1);
    autobuffer_buffer_push_whole_1(buffer, 247_whole_1);

    if >(register, 7_whole_1) {
        autobuffer_buffer_push_whole_1(buffer, +(240_whole_1, register));
    } else {
        autobuffer_buffer_push_whole_1(buffer, +(248_whole_1, register));
    };
};

define autobuffer_buffer_push_idiv_register1 = function(buffer: *AutoBufferBuffer, register: Register1) {
    variable instruction = 64_whole_1;
    if >(register, 7_whole_1) {
        instruction = 65_whole_1;
    };

    if !(=(instruction, 64_whole_1)) {
        autobuffer_buffer_push_whole_1(buffer, instruction);
    };
    autobuffer_buffer_push_whole_1(buffer, 246_whole_1);

    if >(register, 7_whole_1) {
        autobuffer_buffer_push_whole_1(buffer, +(240_whole_1, register));
    } else {
        autobuffer_buffer_push_whole_1(buffer, +(248_whole_1, register));
    };
};

define autobuffer_buffer_push_cqo = function(buffer: *AutoBufferBuffer) {
    autobuffer_buffer_push_whole_1(buffer, 72_whole_1);
    autobuffer_buffer_push_whole_1(buffer, 153_whole_1);
};

define autobuffer_buffer_push_cdq = function(buffer: *AutoBufferBuffer) {
    autobuffer_buffer_push_whole_1(buffer, 153_whole_1);
};

define autobuffer_buffer_push_cwd = function(buffer: *AutoBufferBuffer) {
    autobuffer_buffer_push_whole_1(buffer, 102_whole_1);
    autobuffer_buffer_push_whole_1(buffer, 153_whole_1);
};

define autobuffer_buffer_push_cbw = function(buffer: *AutoBufferBuffer) {
    autobuffer_buffer_push_whole_1(buffer, 102_whole_1);
    autobuffer_buffer_push_whole_1(buffer, 152_whole_1);
};

define autobuffer_buffer_push_add_register8_register8 = function(buffer: *AutoBufferBuffer, register1: Register8, register2: Register8) {
    variable instruction = 72_whole_1;

    if >(register1, 7_whole_1) {
        instruction = +(instruction, 1_whole_1);
    };

    if >(register2, 7_whole_1) {
        instruction = +(instruction, 4_whole_1);
    };

    autobuffer_buffer_push_whole_1(buffer, instruction);
    autobuffer_buffer_push_whole_1(buffer, 1_whole_1);

    variable value = 0_whole_1;

    if >(register1, 7_whole_1) {
        value = +(value, -(register1, 8_whole_1));
    } else {
        value = +(value, register1);
    };

    if >(register2, 7_whole_1) {
        value = +(value, *(-(register2, 8_whole_1), 8_whole_1));
    } else {
        value = +(value, *(register2, 8_whole_1));
    };

    autobuffer_buffer_push_whole_1(buffer, +(value, 192_whole_1));
};

define autobuffer_buffer_push_add_register4_register4 = function(buffer: *AutoBufferBuffer, register1: Register4, register2: Register4) {
    variable instruction = 64_whole_1;

    if >(register1, 7_whole_1) {
        instruction = +(instruction, 1_whole_1);
    };

    if >(register2, 7_whole_1) {
        instruction = +(instruction, 4_whole_1);
    };

    if !(=(instruction, 64_whole_1)) {
        autobuffer_buffer_push_whole_1(buffer, instruction);
    };
    autobuffer_buffer_push_whole_1(buffer, 1_whole_1);

    variable value = 0_whole_1;

    if >(register1, 7_whole_1) {
        value = +(value, -(register1, 8_whole_1));
    } else {
        value = +(value, register1);
    };

    if >(register2, 7_whole_1) {
        value = +(value, *(-(register2, 8_whole_1), 8_whole_1));
    } else {
        value = +(value, *(register2, 8_whole_1));
    };

    autobuffer_buffer_push_whole_1(buffer, +(value, 192_whole_1));
};

define autobuffer_buffer_push_add_register2_register2 = function(buffer: *AutoBufferBuffer, register1: Register2, register2: Register2) {
    variable instruction = 64_whole_1;

    if >(register1, 7_whole_1) {
        instruction = +(instruction, 1_whole_1);
    };

    if >(register2, 7_whole_1) {
        instruction = +(instruction, 4_whole_1);
    };

    if !(=(instruction, 64_whole_1)) {
        autobuffer_buffer_push_whole_1(buffer, instruction);
    };
    autobuffer_buffer_push_whole_1(buffer, 102_whole_1);
    autobuffer_buffer_push_whole_1(buffer, 1_whole_1);

    variable value = 0_whole_1;

    if >(register1, 7_whole_1) {
        value = +(value, -(register1, 8_whole_1));
    } else {
        value = +(value, register1);
    };

    if >(register2, 7_whole_1) {
        value = +(value, *(-(register2, 8_whole_1), 8_whole_1));
    } else {
        value = +(value, *(register2, 8_whole_1));
    };

    autobuffer_buffer_push_whole_1(buffer, +(value, 192_whole_1));
};

define autobuffer_buffer_push_add_register1_register1 = function(buffer: *AutoBufferBuffer, register1: Register1, register2: Register1) {
    variable instruction = 64_whole_1;

    if >(register1, 7_whole_1) {
        instruction = +(instruction, 1_whole_1);
    };

    if >(register2, 7_whole_1) {
        instruction = +(instruction, 4_whole_1);
    };

    if !(=(instruction, 64_whole_1)) {
        autobuffer_buffer_push_whole_1(buffer, instruction);
    };
    autobuffer_buffer_push_whole_1(buffer, 0_whole_1);

    variable value = 0_whole_1;

    if >(register1, 7_whole_1) {
        value = +(value, -(register1, 8_whole_1));
    } else {
        value = +(value, register1);
    };

    if >(register2, 7_whole_1) {
        value = +(value, *(-(register2, 8_whole_1), 8_whole_1));
    } else {
        value = +(value, *(register2, 8_whole_1));
    };

    autobuffer_buffer_push_whole_1(buffer, +(value, 192_whole_1));
};

define autobuffer_buffer_push_or_register1_register1 = function(buffer: *AutoBufferBuffer, register1: Register1, register2: Register1) {
    variable instruction = 64_whole_1;

    if >(register1, 7_whole_1) {
        instruction = +(instruction, 1_whole_1);
    };

    if >(register2, 7_whole_1) {
        instruction = +(instruction, 4_whole_1);
    };

    if !(=(instruction, 64_whole_1)) {
        autobuffer_buffer_push_whole_1(buffer, instruction);
    };
    autobuffer_buffer_push_whole_1(buffer, 8_whole_1);

    variable value = 0_whole_1;

    if >(register1, 7_whole_1) {
        value = +(value, -(register1, 8_whole_1));
    } else {
        value = +(value, register1);
    };

    if >(register2, 7_whole_1) {
        value = +(value, *(-(register2, 8_whole_1), 8_whole_1));
    } else {
        value = +(value, *(register2, 8_whole_1));
    };

    autobuffer_buffer_push_whole_1(buffer, +(value, 192_whole_1));
};

define autobuffer_buffer_push_and_register1_register1 = function(buffer: *AutoBufferBuffer, register1: Register1, register2: Register1) {
    variable instruction = 64_whole_1;

    if >(register1, 7_whole_1) {
        instruction = +(instruction, 1_whole_1);
    };

    if >(register2, 7_whole_1) {
        instruction = +(instruction, 4_whole_1);
    };

    if !(=(instruction, 64_whole_1)) {
        autobuffer_buffer_push_whole_1(buffer, instruction);
    };
    autobuffer_buffer_push_whole_1(buffer, 32_whole_1);

    variable value = 0_whole_1;

    if >(register1, 7_whole_1) {
        value = +(value, -(register1, 8_whole_1));
    } else {
        value = +(value, register1);
    };

    if >(register2, 7_whole_1) {
        value = +(value, *(-(register2, 8_whole_1), 8_whole_1));
    } else {
        value = +(value, *(register2, 8_whole_1));
    };

    autobuffer_buffer_push_whole_1(buffer, +(value, 192_whole_1));
};

define autobuffer_buffer_push_sub_register8_register8 = function(buffer: *AutoBufferBuffer, register1: Register8, register2: Register8) {
    variable instruction = 72_whole_1;

    if >(register1, 7_whole_1) {
        instruction = +(instruction, 1_whole_1);
    };

    if >(register2, 7_whole_1) {
        instruction = +(instruction, 4_whole_1);
    };

    autobuffer_buffer_push_whole_1(buffer, instruction);
    autobuffer_buffer_push_whole_1(buffer, 41_whole_1);

    variable value = 0_whole_1;

    if >(register1, 7_whole_1) {
        value = +(value, -(register1, 8_whole_1));
    } else {
        value = +(value, register1);
    };

    if >(register2, 7_whole_1) {
        value = +(value, *(-(register2, 8_whole_1), 8_whole_1));
    } else {
        value = +(value, *(register2, 8_whole_1));
    };

    autobuffer_buffer_push_whole_1(buffer, +(value, 192_whole_1));
};

define autobuffer_buffer_push_sub_register4_register4 = function(buffer: *AutoBufferBuffer, register1: Register4, register2: Register4) {
    variable instruction = 64_whole_1;

    if >(register1, 7_whole_1) {
        instruction = +(instruction, 1_whole_1);
    };

    if >(register2, 7_whole_1) {
        instruction = +(instruction, 4_whole_1);
    };

    if !(=(instruction, 64_whole_1)) {
        autobuffer_buffer_push_whole_1(buffer, instruction);
    };
    autobuffer_buffer_push_whole_1(buffer, 41_whole_1);

    variable value = 0_whole_1;

    if >(register1, 7_whole_1) {
        value = +(value, -(register1, 8_whole_1));
    } else {
        value = +(value, register1);
    };

    if >(register2, 7_whole_1) {
        value = +(value, *(-(register2, 8_whole_1), 8_whole_1));
    } else {
        value = +(value, *(register2, 8_whole_1));
    };

    autobuffer_buffer_push_whole_1(buffer, +(value, 192_whole_1));
};

define autobuffer_buffer_push_sub_register2_register2 = function(buffer: *AutoBufferBuffer, register1: Register2, register2: Register2) {
    variable instruction = 64_whole_1;

    if >(register1, 7_whole_1) {
        instruction = +(instruction, 1_whole_1);
    };

    if >(register2, 7_whole_1) {
        instruction = +(instruction, 4_whole_1);
    };

    if !(=(instruction, 64_whole_1)) {
        autobuffer_buffer_push_whole_1(buffer, instruction);
    };
    autobuffer_buffer_push_whole_1(buffer, 102_whole_1);
    autobuffer_buffer_push_whole_1(buffer, 41_whole_1);

    variable value = 0_whole_1;

    if >(register1, 7_whole_1) {
        value = +(value, -(register1, 8_whole_1));
    } else {
        value = +(value, register1);
    };

    if >(register2, 7_whole_1) {
        value = +(value, *(-(register2, 8_whole_1), 8_whole_1));
    } else {
        value = +(value, *(register2, 8_whole_1));
    };

    autobuffer_buffer_push_whole_1(buffer, +(value, 192_whole_1));
};

define autobuffer_buffer_push_sub_register1_register1 = function(buffer: *AutoBufferBuffer, register1: Register1, register2: Register1) {
    variable instruction = 64_whole_1;

    if >(register1, 7_whole_1) {
        instruction = +(instruction, 1_whole_1);
    };

    if >(register2, 7_whole_1) {
        instruction = +(instruction, 4_whole_1);
    };

    if !(=(instruction, 64_whole_1)) {
        autobuffer_buffer_push_whole_1(buffer, instruction);
    };
    autobuffer_buffer_push_whole_1(buffer, 40_whole_1);

    variable value = 0_whole_1;

    if >(register1, 7_whole_1) {
        value = +(value, -(register1, 8_whole_1));
    } else {
        value = +(value, register1);
    };

    if >(register2, 7_whole_1) {
        value = +(value, *(-(register2, 8_whole_1), 8_whole_1));
    } else {
        value = +(value, *(register2, 8_whole_1));
    };

    autobuffer_buffer_push_whole_1(buffer, +(value, 192_whole_1));
};

define autobuffer_buffer_push_sub_register8_whole_8 = function(buffer: *AutoBufferBuffer, register: Register8, value: whole_8) {
    autobuffer_buffer_push_whole_1(buffer, 72_whole_1);
    autobuffer_buffer_push_whole_1(buffer, 129_whole_1);
    autobuffer_buffer_push_whole_1(buffer, +(232_whole_1, register));
    autobuffer_buffer_push_whole_4(buffer, whole_8_to_whole_4(value));
};

define autobuffer_buffer_push_pop_register8 = function(buffer: *AutoBufferBuffer, register: Register8) {
    if >(register, 7_whole_1) {
        autobuffer_buffer_push_whole_1(buffer, 65_whole_1);
        autobuffer_buffer_push_whole_1(buffer, +(80_whole_1, register));
    } else {
        autobuffer_buffer_push_whole_1(buffer, +(88_whole_1, register));
    };
};

define autobuffer_buffer_push_push_register8 = function(buffer: *AutoBufferBuffer, register: Register8) {
    if >(register, 7_whole_1) {
        autobuffer_buffer_push_whole_1(buffer, 65_whole_1);
        autobuffer_buffer_push_whole_1(buffer, +(72_whole_1, register));
    } else {
        autobuffer_buffer_push_whole_1(buffer, +(80_whole_1, register));
    };
};

define autobuffer_buffer_push_syscall = function(buffer: *AutoBufferBuffer) {
    autobuffer_buffer_push_whole_1(buffer, 15_whole_1);
    autobuffer_buffer_push_whole_1(buffer, 5_whole_1);
};

define autobuffer_buffer_push_pointer = function(buffer: *AutoBufferBuffer, pointer: *, length: whole_8) {
    variable buffer_index = AutoBufferBuffer.>index(buffer);

    autobuffer_set(&(AutoBufferBuffer.>autobuffer(buffer)), pointer, buffer_index, length);

    AutoBufferBuffer.<index(buffer, +(length, buffer_index));
};

define new_elf64_file_header = function(): ELF64FileHeader {
    variable header = ELF64FileHeader.>0();

    variable _ = whole_8_to_whole_4(2);
    ELF64FileHeader.<magic(&(header), whole_8_to_whole_4(1179403647));
    ELF64FileHeader.<header_size(&(header), whole_8_to_whole_2(64));
    ELF64FileHeader.<program_header_size(&(header), whole_8_to_whole_2(56));
    ELF64FileHeader.<section_header_size(&(header), whole_8_to_whole_2(64));
    ELF64FileHeader.<version(&(header), 1_whole_1);
    ELF64FileHeader.<version2(&(header), whole_8_to_whole_4(1));

    return header;
};

define ELF64FileHeader = structure {
    magic: any_4;
    format: any_1;
    endianness: any_1;
    version: any_1;
    abi: any_1;
    abi_version: any_1;
    padding: any_7;
    object_file_type: any_2;
    machine: any_2;
    version2: any_4;
    entry_point: any_8;
    program_header_table: any_8;
    section_header_table: any_8;
    flags: any_4;
    header_size: any_2;
    program_header_size: any_2;
    program_header_count: any_2;
    section_header_size: any_2;
    section_header_count: any_2;
    section_names: any_2;
};

define ELF64ProgramHeader = structure {
    type: any_4;
    flags: any_4;
    location: any_8;
    virtual_address: any_8;
    physical_address: any_8;
    size_file: any_8;
    size_memory: any_8;
    alignment: any_8;
};

define get_whole_1 = function(pointer: *, offset: whole_8): whole_1 {
    return whole_1.>(whole_1.*cast(+(pointer, offset)));
};

define get_whole_2 = function(pointer: *, offset: whole_8): whole_2 {
    return whole_2.>(whole_2.*cast(+(pointer, offset)));
};

define get_whole_4 = function(pointer: *, offset: whole_8): whole_4 {
    return whole_4.>(whole_4.*cast(+(pointer, offset)));
};

define get_whole_8 = function(pointer: *, offset: whole_8): any_8 {
    return any_8.>(any_8.*cast(+(pointer, offset)));
};

define BRK = global(*);
define REFERENCE_BRK = global(*);

define brk_allocate = function(size: whole_8): * {
    if =(BRK, 0) {
        BRK = sys_brk(*.cast(0));
        REFERENCE_BRK = BRK;
    };

    variable allocated = REFERENCE_BRK;
    REFERENCE_BRK = *.cast(+(REFERENCE_BRK, size));
    
    if >(REFERENCE_BRK, BRK) {
        variable increment = 67108864;
        if >(size, increment) {
            increment = size;
        };
        BRK = *.cast(+(BRK, increment));
        variable _ = sys_brk(BRK);
    };
    return allocated;
};

