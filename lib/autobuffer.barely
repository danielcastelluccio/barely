define AutoBuffer = structure {
    buffer: *;
    size: whole_8;
    increment: whole_8;
};

define autobuffer_new = function(size: whole_8): AutoBuffer {
    variable auto_buffer: AutoBuffer;

    AutoBuffer.<size(&(auto_buffer), size);
    AutoBuffer.<increment(&(auto_buffer), size);

    variable allocated = brk_allocate(size);
    AutoBuffer.<buffer(&(auto_buffer), allocated);

    return auto_buffer;
};

define autobuffer_reset = function(buffer: *AutoBuffer) {
    variable actual_buffer = AutoBuffer.>buffer(buffer);
    variable size = AutoBuffer.>size(buffer);
    variable i = 0;
    while <(i, size) {
        variable done_anything = false;
        
        if <(+(i, 8), size) {
            any_8.<(@cast_*any_8(+(actual_buffer, i)), 0_whole_8);
            i = +(i, 1);
            done_anything = true;
        };

        if !(done_anything) {
            any_1.<(@cast_*any_1(+(actual_buffer, i)), 0_whole_1);
            i = +(i, 1);
        };
    };
};

define autobuffer_set_boolean = function(buffer: *AutoBuffer, value: boolean, to: whole_8) {
    autobuffer_set(buffer, &(value), to, 1);
};

define autobuffer_set_any_1 = function(buffer: *AutoBuffer, value: any_1, to: whole_8) {
    autobuffer_set(buffer, &(value), to, 1);
};

define autobuffer_set_any_4 = function(buffer: *AutoBuffer, value: any_4, to: whole_8) {
    autobuffer_set(buffer, &(value), to, 4);
};

define autobuffer_set_any_8 = function(buffer: *AutoBuffer, value: any_8, to: whole_8) {
    autobuffer_set(buffer, &(value), to, 8);
};

define autobuffer_set_* = function(buffer: *AutoBuffer, value: *, to: whole_8) {
    autobuffer_set(buffer, &(value), to, 8);
};

define autobuffer_set_whole_8 = function(buffer: *AutoBuffer, value: whole_8, to: whole_8) {
    autobuffer_set(buffer, &(value), to, 8);
};

define autobuffer_register = function(buffer: *AutoBuffer, location: whole_8, size: whole_8) {
    while >(+(location, size), AutoBuffer.>size(buffer)) {
        variable previous_buffer = AutoBuffer.>buffer(buffer);
        variable previous_size = AutoBuffer.>size(buffer);
        variable new_buffer_size = +(AutoBuffer.>size(buffer), AutoBuffer.>increment(buffer));
        variable allocated = brk_allocate(new_buffer_size);
        AutoBuffer.<buffer(buffer, allocated);
        AutoBuffer.<size(buffer, new_buffer_size);
        copy(previous_buffer, allocated, previous_size);
    };
};

define autobuffer_set = function(buffer: *AutoBuffer, from: *, to: whole_8, size: whole_8) {
    autobuffer_register(buffer, to, size);
    variable to_pointer = @cast_*(+(AutoBuffer.>buffer(buffer), to));

    copy(from, to_pointer, size);
};

define autobuffer_get = function(buffer: *AutoBuffer, location: whole_8): * {
    return @cast_*(+(AutoBuffer.>buffer(buffer), location));
};

define autobuffer_get_size = function(buffer: *AutoBuffer, location: whole_8, size: whole_8): * {
    autobuffer_register(buffer, location, size);
    return autobuffer_get(buffer, location);
};

define autobuffer_get_whole_8 = function(buffer: *AutoBuffer, location: whole_8): whole_8 {
    return whole_8.>(@cast_*whole_8(autobuffer_get_size(buffer, location, 8)));
};

define autobuffer_get_* = function(buffer: *AutoBuffer, location: whole_8): * {
    return *.>(@cast_**(autobuffer_get(buffer, location)));
};

define autobuffer_get_any_1 = function(buffer: *AutoBuffer, location: whole_8): any_1 {
    return any_1.>(@cast_*any_1(autobuffer_get(buffer, location)));
};

define autobuffer_get_any_8 = function(buffer: *AutoBuffer, location: whole_8): any_8 {
    return any_8.>(@cast_*any_8(autobuffer_get_size(buffer, location, 8)));
};

define autobuffer_get_whole_4 = function(buffer: *AutoBuffer, location: whole_8): whole_4 {
    return whole_4.>(@cast_*whole_4(autobuffer_get(buffer, location)));
};

define increment_whole_8_pointer = function(pointer: *whole_8, amount: whole_8) {
    whole_8.<(pointer, +(whole_8.>(pointer), amount));
};
