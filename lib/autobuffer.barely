include "lib/miscellaneous.barely";

structure AutoBuffer {
    buffer: *;
    size: whole_8;
    increment: whole_8;
};

function autobuffer_new(size: whole_8): AutoBuffer {
    variable auto_buffer: AutoBuffer;

    AutoBuffer<-size(&(auto_buffer), size);
    AutoBuffer<-increment(&(auto_buffer), size);

    variable allocated = brk_allocate(size);
    AutoBuffer<-buffer(&(auto_buffer), allocated);

    return auto_buffer;
};

function autobuffer_reset(buffer: *AutoBuffer) {
    variable i = 0;
    while <(i, AutoBuffer->size(buffer)) {
        any_1<-(@cast_*any_1(+(AutoBuffer->buffer(buffer), i)), 0_whole_1);
        i = +(i, 1);
    };
};

function autobuffer_set_boolean(buffer: *AutoBuffer, value: boolean, to: whole_8) {
    autobuffer_set(buffer, &(value), to, 1);
};

function autobuffer_set_any_1(buffer: *AutoBuffer, value: any_1, to: whole_8) {
    autobuffer_set(buffer, &(value), to, 1);
};

function autobuffer_set_any_4(buffer: *AutoBuffer, value: any_4, to: whole_8) {
    autobuffer_set(buffer, &(value), to, 4);
};

function autobuffer_set_*(buffer: *AutoBuffer, value: *, to: whole_8) {
    autobuffer_set(buffer, &(value), to, 8);
};

function autobuffer_set_whole_8(buffer: *AutoBuffer, value: whole_8, to: whole_8) {
    autobuffer_set(buffer, &(value), to, 8);
};

function autobuffer_register(buffer: *AutoBuffer, location: whole_8, size: whole_8) {
    while >(+(location, size), AutoBuffer->size(buffer)) {
        variable previous_buffer = AutoBuffer->buffer(buffer);
        variable previous_size = AutoBuffer->size(buffer);
        variable new_buffer_size = +(AutoBuffer->size(buffer), AutoBuffer->increment(buffer));
        variable allocated = brk_allocate(new_buffer_size);
        AutoBuffer<-buffer(buffer, allocated);
        AutoBuffer<-size(buffer, new_buffer_size);
        copy(previous_buffer, allocated, previous_size);
    };
};

function autobuffer_set(buffer: *AutoBuffer, from: *, to: whole_8, size: whole_8) {
    autobuffer_register(buffer, to, size);
    variable to_pointer = @cast_*(+(AutoBuffer->buffer(buffer), to));

    copy(from, to_pointer, size);
};

function autobuffer_get(buffer: *AutoBuffer, location: whole_8): * {
    return @cast_*(+(AutoBuffer->buffer(buffer), location));
};

function autobuffer_get_whole_8(buffer: *AutoBuffer, location: whole_8): whole_8 {
    return whole_8->(@cast_*whole_8(autobuffer_get(buffer, location)));
};

function autobuffer_get_*(buffer: *AutoBuffer, location: whole_8): * {
    return *->(@cast_**(autobuffer_get(buffer, location)));
};

function autobuffer_get_any_1(buffer: *AutoBuffer, location: whole_8): any_1 {
    return any_1->(@cast_*any_1(autobuffer_get(buffer, location)));
};

function autobuffer_get_whole_4(buffer: *AutoBuffer, location: whole_8): whole_4 {
    return whole_4->(@cast_*whole_4(autobuffer_get(buffer, location)));
};

function increment_whole_8_pointer(pointer: *whole_8, amount: whole_8) {
    whole_8<-(pointer, +(whole_8->(pointer), amount));
};
