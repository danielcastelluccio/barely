define string= = function(string1: *, string2: *): boolean {
    variable string1_length = length(string1);

    variable string2_length = length(string2);

    if !(=(string1_length, string2_length)) {
        return false;
    };

    return string_length=(string1, string2, string1_length);
};

define string_length= = function(string1: *, string2: *, length: whole_8): boolean {
    variable i = 0;
    while <(i, length) {
        variable string1_character = any_1.>(any_1.*cast(+(string1, i)));
        variable string2_character = any_1.>(any_1.*cast(+(string2, i)));

        if !(=(string1_character, string2_character)) {
            return false;
        };

        i = +(i, 1);
    };

    return true;
};

define copy = function(from: *, to: *, size: whole_8) {
    variable i = 0;

    while <(i, size) {
        variable done_anything = false;

        if &&(<(+(i, 4096), size), !(done_anything)) {
            any_4096.<(any_4096.*cast(+(to, i)), any_4096.>(any_4096.*cast(+(from, i))));
            i = +(i, 4096);

            done_anything = true;
        };

        if &&(<(+(i, 512), size), !(done_anything)) {
            any_512.<(any_512.*cast(+(to, i)), any_512.>(any_512.*cast(+(from, i))));
            i = +(i, 512);

            done_anything = true;
        };

        if &&(<(+(i, 64), size), !(done_anything)) {
            any_64.<(any_64.*cast(+(to, i)), any_64.>(any_64.*cast(+(from, i))));
            i = +(i, 64);

            done_anything = true;
        };

        if &&(<(+(i, 8), size), !(done_anything)) {
            any_8.<(any_8.*cast(+(to, i)), any_8.>(any_8.*cast(+(from, i))));
            i = +(i, 8);

            done_anything = true;
        };

        if !(done_anything) {
            any_1.<(any_1.*cast(+(to, i)), any_1.>(any_1.*cast(+(from, i))));
            i = +(i, 1);
        };
    };
};

define whole_8_to_whole_4 = function(whole_8: whole_8): whole_4 {
    variable _whole_4 = whole_4.>0();

    copy(&(whole_8), &(_whole_4), 4);

    return _whole_4;
};

define whole_8_to_whole_2 = function(whole_8: whole_8): whole_2 {
    variable _whole_2 = whole_2.>0();

    copy(&(whole_8), &(_whole_2), 2);

    return _whole_2;
};

define whole_8_to_whole_1 = function(whole_8: whole_8): whole_1 {
    variable _whole_1 = whole_1.>0();

    copy(&(whole_8), &(_whole_1), 1);

    return _whole_1;
};

define whole_4_to_whole_8 = function(data: whole_4): whole_8 {
    variable _whole_8 = whole_8.>0();

    whole_4.<(whole_4.*cast(&(_whole_8)), data);

    return _whole_8;
};

define whole_2_to_whole_8 = function(data: whole_2): whole_8 {
    variable _whole_8 = whole_8.>0();

    whole_2.<(whole_2.*cast(&(_whole_8)), data);

    return _whole_8;
};

define whole_1_to_whole_8 = function(data: whole_1): whole_8 {
    variable _whole_8 = whole_8.>0();

    whole_1.<(whole_1.*cast(&(_whole_8)), data);

    return _whole_8;
};

define length = function(string: *): whole_8 {
    variable length = 0;

    while !(=(0_whole_1, any_1.>(+(any_1.*cast(string), length)))) {
        length = +(length, 1);
    };

    return length;
};
