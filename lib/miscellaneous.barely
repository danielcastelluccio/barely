function string=(string1: *, string2: *): boolean { variable string1_length = length(string1);
    variable string2_length = length(string2);

    if !(=(string1_length, string2_length)) {
        return false;
    };

    return String.length=(string1, string2, string1_length);
};

function String.length=(string1: *, string2: *, length: whole_8): boolean {
    variable i = 0;
    while <(i, length) {
        variable string1_character = *1(@cast_*(+(string1, i)));
        variable string2_character = *1(@cast_*(+(string2, i)));

        if !(=(string1_character, string2_character)) {
            return false;
        };

        i = +(i, 1);
    };

    return true;
};

function copy(from: *, to: *, size: whole_8) {
    variable i = 0;

    while <(i, size) {
        variable done_anything = false;

        if &&(<(+(i, 4096), size), !(done_anything)) {
            any_4096<-(@cast_*any_4096(+(to, i)), any_4096->(@cast_*any_4096(+(from, i))));
            i = +(i, 4096);

            done_anything = true;
        };

        if &&(<(+(i, 512), size), !(done_anything)) {
            any_512<-(@cast_*any_512(+(to, i)), any_512->(@cast_*any_512(+(from, i))));
            i = +(i, 512);

            done_anything = true;
        };

        if &&(<(+(i, 64), size), !(done_anything)) {
            any_64<-(@cast_*any_64(+(to, i)), any_64->(@cast_*any_64(+(from, i))));
            i = +(i, 64);

            done_anything = true;
        };

        if &&(<(+(i, 8), size), !(done_anything)) {
            any_8<-(@cast_*any_8(+(to, i)), any_8->(@cast_*any_8(+(from, i))));
            i = +(i, 8);

            done_anything = true;
        };

        if !(done_anything) {
            any_1<-(@cast_*any_1(+(to, i)), any_1->(@cast_*any_1(+(from, i))));
            i = +(i, 1);
        };
    };
};

function whole_8_to_whole_4(whole_8: whole_8): whole_4 {
    variable whole_4 = whole_4();

    copy(&(whole_8), &(whole_4), 4);

    return whole_4;
};

function whole_8_to_whole_2(whole_8: whole_8): whole_2 {
    variable whole_2 = whole_2();

    copy(&(whole_8), &(whole_2), 2);

    return whole_2;
};

function whole_8_to_whole_1(whole_8: whole_8): whole_1 {
    variable whole_1 = whole_1();

    copy(&(whole_8), &(whole_1), 1);

    return whole_1;
};

function whole_4_to_whole_8(whole_4: whole_4): whole_8 {
    variable whole_8 = whole_8();

    whole_4<-(@cast_*whole_4(&(whole_8)), whole_4);

    return whole_8;
};

function whole_2_to_whole_8(whole_2: whole_2): whole_8 {
    variable whole_8 = whole_8();

    whole_2<-(@cast_*whole_2(&(whole_8)), whole_2);

    return whole_8;
};

function whole_1_to_whole_8(whole_1: whole_1): whole_8 {
    variable whole_8 = whole_8();

    whole_1<-(@cast_*whole_1(&(whole_8)), whole_1);

    return whole_8;
};

function length(string: *): whole_8 {
    variable length = 0;

    while !(=(0_whole_1, *1(+(string, length)))) {
        length = +(length, 1);
    };

    return length;
};
