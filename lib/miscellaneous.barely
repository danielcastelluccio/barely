define string= = function(string1: *, string2: *): boolean {
    declare string1_length = length(string1);
    declare string2_length = length(string2);

    if !(string1_length == string2_length) {
        return false;
    };

    return string_length=(string1, string2, string1_length);
};

define string_length= = function(string1: *, string2: *, length: whole_8): boolean {
    declare i = 0;
    while i < length {
        declare string1_character = any_1.pcast(string1 + i).*;
        declare string2_character = any_1.pcast(string2 + i).*;

        if !(string1_character == string2_character) {
            return false;
        };

        i = i + 1;
    };

    return true;
};

define copy = function(from: *, to: *, size: whole_8) {
    declare i = 0;

    while i < size {
        if (i + 4096) < size {
            any_4096.pcast(to + i).* = any_4096.pcast(from + i).*;
            i = i + 4096;
        } else if (i + 512) < size {
            any_512.pcast(to + i).* = any_512.pcast(from + i).*;
            i = i + 512;
        } else if (i + 64) < size {
            any_64.pcast(to + i).* = any_64.pcast(from + i).*;
            i = i + 64;
        } else if (i + 8) < size {
            any_8.pcast(to + i).* = any_8.pcast(from + i).*;
            i = i + 8;
        } else {
            any_1.pcast(to + i).* = any_1.pcast(from + i).*;
            i = i + 1;
        };
    };
};

define whole_8_to_whole_4 = function(_whole_8: whole_8): whole_4 {
    declare _whole_4 = whole_4.>0();
    (&_whole_4).* = whole_4.pcast(&_whole_8).*;
    return _whole_4;
};

define whole_8_to_whole_2 = function(_whole_8: whole_8): whole_2 {
    declare _whole_2 = whole_2.>0();
    (&_whole_2).* = whole_2.pcast(&_whole_8).*;
    return _whole_2;
};

define whole_8_to_whole_1 = function(_whole_8: whole_8): whole_1 {
    declare _whole_1 = whole_1.>0();
    (&_whole_1).* = whole_1.pcast(&_whole_8).*;
    return _whole_1;
};

define whole_4_to_whole_8 = function(_whole_4: whole_4): whole_8 {
    declare _whole_8 = whole_8.>0();
    whole_4.pcast(&_whole_8).* = _whole_4;
    return _whole_8;
};

define whole_2_to_whole_8 = function(_whole_2: whole_2): whole_8 {
    declare _whole_8 = whole_8.>0();
    whole_2.pcast(&_whole_8).* = _whole_2;
    return _whole_8;
};

define whole_1_to_whole_8 = function(_whole_1: whole_1): whole_8 {
    declare _whole_8 = whole_8.>0();
    whole_1.pcast(&_whole_8).* = _whole_1;
    return _whole_8;
};

define length = function(string: *): whole_8 {
    declare length = 0;

    while !(0:whole_1 == (any_1.pcast(string) + length).*) {
        length = length + 1;
    };

    return length;
};
